# PROP.ie Production Deployment Pipeline
# Enterprise CI/CD for Property Technology Platform

name: 🚀 Production Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test suite (emergency only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.17.0'
  DEPLOYMENT_TIMEOUT: '1800' # 30 minutes
  HEALTH_CHECK_RETRIES: 5

jobs:
  # ================================================================================
  # PRE-DEPLOYMENT VALIDATION
  # ================================================================================
  
  validate:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📋 Validate Commit Message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG =~ \[skip-deploy\] ]]; then
            echo "⏭️ Deployment skipped due to [skip-deploy] in commit message"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi
        id: validation
        
      - name: 🏷️ Generate Version
        id: version
        run: |
          VERSION="v$(date +%Y.%m.%d)-${GITHUB_SHA:0:7}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
          
      - name: 🔒 Security Scan
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=high --production
          
      - name: 📊 Code Quality Check
        run: |
          echo "📈 Checking code quality metrics..."
          # Add code quality tools like SonarQube if available
          
  # ================================================================================
  # BUILD AND TEST
  # ================================================================================
  
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true' && !inputs.skip_tests
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: propie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📚 Install Dependencies
        run: |
          npm ci --only=production
          npm ci --only=development
          
      - name: 🏗️ Build Application
        run: |
          npm run build
          
      - name: 🧪 Run Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/propie_test
          NODE_ENV: test
        run: |
          npm run test:ci
          
      - name: 🧪 Integration Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/propie_test
        run: |
          npm run test:integration
          
      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          
  # ================================================================================
  # BUILD PRODUCTION ARTIFACTS
  # ================================================================================
  
  build:
    name: 🏗️ Build Production
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && needs.validate.outputs.should_deploy == 'true' && (needs.test.result == 'success' || inputs.skip_tests)
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📚 Install Production Dependencies
        run: |
          npm ci --only=production
          
      - name: 🏗️ Build for Production
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          npm run build
          
      - name: 📦 Create Deployment Package
        run: |
          tar -czf deployment-${{ needs.validate.outputs.version }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=coverage \
            --exclude=__tests__ \
            .next package.json package-lock.json public prisma src
            
      - name: 💾 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: deployment-${{ needs.validate.outputs.version }}.tar.gz
          retention-days: 30
          
  # ================================================================================
  # STAGING DEPLOYMENT
  # ================================================================================
  
  deploy-staging:
    name: 🚧 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always() && needs.validate.outputs.should_deploy == 'true' && needs.build.result == 'success'
    timeout-minutes: 15
    environment: staging
    
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build
          
      - name: 🚀 Deploy to AWS Amplify Staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "🚧 Deploying to staging environment..."
          # AWS Amplify CLI deployment commands here
          aws amplify start-deployment \
            --app-id ${{ secrets.AMPLIFY_APP_ID_STAGING }} \
            --branch-name staging
            
      - name: ⏳ Wait for Deployment
        run: |
          echo "⏳ Waiting for staging deployment to complete..."
          sleep 60
          
      - name: 🏥 Health Check Staging
        run: |
          for i in {1..${{ env.HEALTH_CHECK_RETRIES }}}; do
            if curl -f https://staging.prop.ie/api/health; then
              echo "✅ Staging health check passed"
              break
            fi
            echo "🔄 Health check attempt $i failed, retrying..."
            sleep 30
          done
          
  # ================================================================================
  # PRODUCTION DEPLOYMENT
  # ================================================================================
  
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build, deploy-staging]
    if: always() && needs.validate.outputs.should_deploy == 'true' && needs.deploy-staging.result == 'success'
    timeout-minutes: 30
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build
          
      - name: 🗄️ Database Migration (Dry Run)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}
        run: |
          echo "🔍 Running database migration dry run..."
          npx prisma migrate deploy --preview-feature
          
      - name: 💾 Create Pre-deployment Backup
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}
        run: |
          echo "💾 Creating pre-deployment backup..."
          BACKUP_NAME="pre-deploy-$(date +%Y%m%d-%H%M%S)"
          aws rds create-db-snapshot \
            --db-instance-identifier propie-production \
            --db-snapshot-identifier $BACKUP_NAME
            
      - name: 🗄️ Run Database Migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}
        run: |
          echo "🗄️ Running production database migrations..."
          npx prisma migrate deploy
          
      - name: 🚀 Deploy to AWS Amplify Production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "🚀 Deploying to production environment..."
          aws amplify start-deployment \
            --app-id ${{ secrets.AMPLIFY_APP_ID_PRODUCTION }} \
            --branch-name main
            
      - name: ⏳ Wait for Production Deployment
        run: |
          echo "⏳ Waiting for production deployment to complete..."
          sleep 180 # 3 minutes for production deployment
          
      - name: 🏥 Comprehensive Health Checks
        env:
          HEALTH_CHECK_URL: https://prop.ie/api/health
          DATABASE_HEALTH_URL: https://prop.ie/api/health/database  
          PAYMENTS_HEALTH_URL: https://prop.ie/api/health/payments
        run: |
          echo "🏥 Running comprehensive production health checks..."
          
          # Main health check
          for i in {1..${{ env.HEALTH_CHECK_RETRIES }}}; do
            if curl -f $HEALTH_CHECK_URL; then
              echo "✅ Main health check passed"
              break
            fi
            echo "🔄 Main health check attempt $i failed, retrying..."
            sleep 30
          done
          
          # Database health check
          if curl -f $DATABASE_HEALTH_URL; then
            echo "✅ Database health check passed"
          else
            echo "❌ Database health check failed"
            exit 1
          fi
          
          # Payments health check
          if curl -f $PAYMENTS_HEALTH_URL; then
            echo "✅ Payments health check passed"
          else
            echo "⚠️ Payments health check failed (non-critical)"
          fi
          
      - name: 🧪 Production Smoke Tests
        run: |
          echo "🧪 Running production smoke tests..."
          # Test critical user journeys
          curl -f https://prop.ie/api/properties
          curl -f https://prop.ie/api/health
          
      - name: 🏷️ Tag Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ needs.validate.outputs.version }}
          git push origin ${{ needs.validate.outputs.version }}
          
  # ================================================================================
  # POST-DEPLOYMENT MONITORING
  # ================================================================================
  
  post-deployment:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [validate, deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    timeout-minutes: 10
    
    steps:
      - name: 📊 Setup Monitoring
        run: |
          echo "📊 Configuring post-deployment monitoring..."
          
      - name: 🔔 Sentry Release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          echo "🔔 Creating Sentry release..."
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli releases new ${{ needs.validate.outputs.version }}
          sentry-cli releases finalize ${{ needs.validate.outputs.version }}
          
      - name: 📈 Performance Baseline
        run: |
          echo "📈 Establishing performance baseline..."
          # Run performance tests and establish baseline metrics
          
  # ================================================================================
  # NOTIFICATION AND CLEANUP
  # ================================================================================
  
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [validate, deploy-production, post-deployment]
    if: always()
    
    steps:
      - name: 📢 Success Notification
        if: needs.deploy-production.result == 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 PROP.ie Production Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PROP.ie Production Deployment* ✅\n\n*Version:* `${{ needs.validate.outputs.version }}`\n*Environment:* Production\n*Status:* Deployed Successfully\n*Health Checks:* All Passed\n\n<https://prop.ie|🌐 View Live Site>"
                  }
                }
              ]
            }'
            
      - name: 📢 Failure Notification
        if: needs.deploy-production.result == 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🚨 PROP.ie Production Deployment Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PROP.ie Production Deployment* ❌\n\n*Version:* `${{ needs.validate.outputs.version }}`\n*Environment:* Production\n*Status:* Deployment Failed\n*Action Required:* Immediate Investigation\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|🔍 View Logs>"
                  }
                }
              ]
            }'
            
      - name: 📧 Email Notification
        if: always()
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          echo "📧 Sending deployment summary email..."
          # Email notification logic here
          
  # ================================================================================
  # EMERGENCY ROLLBACK (Manual Trigger)
  # ================================================================================
  
  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    timeout-minutes: 15
    environment: production
    
    steps:
      - name: 🚨 Emergency Rollback
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "🚨 Executing emergency rollback..."
          # Get previous deployment
          PREVIOUS_DEPLOYMENT=$(aws amplify list-jobs \
            --app-id ${{ secrets.AMPLIFY_APP_ID_PRODUCTION }} \
            --branch-name main \
            --max-items 2 \
            --query 'jobSummaries[1].commitId' \
            --output text)
            
          # Trigger rollback deployment
          aws amplify start-deployment \
            --app-id ${{ secrets.AMPLIFY_APP_ID_PRODUCTION }} \
            --branch-name main \
            --source-url $PREVIOUS_DEPLOYMENT
            
      - name: 🔔 Rollback Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🔄 EMERGENCY: PROP.ie Production Rollback Executed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*EMERGENCY ROLLBACK EXECUTED* 🚨\n\n*Platform:* PROP.ie Production\n*Action:* Automatic rollback to previous version\n*Status:* In Progress\n*Triggered By:* ${{ github.actor }}\n\n*Immediate Actions Required:*\n• Verify rollback completion\n• Investigate original failure\n• Prepare hotfix if needed"
                  }
                }
              ]
            }'

# ================================================================================
# DEPLOYMENT SECURITY AND COMPLIANCE
# ================================================================================

# Security best practices:
# - All secrets stored in GitHub Secrets
# - Minimal permissions for deployment
# - Audit trail for all deployments
# - Automated security scanning
# - Environment isolation
# - Rollback capabilities

# Compliance requirements:
# - Change management process
# - Deployment approval gates
# - Audit logging
# - Data protection during deployment
# - Business continuity planning