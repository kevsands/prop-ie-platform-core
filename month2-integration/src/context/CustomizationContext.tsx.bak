"use client";


// src/context/CustomizationContext.tsx
import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';
import { useRouter } from 'next/navigation';

// Define types for customization options
export interface CustomizationOption {
  id: string;
  name: string;
  price: number;
  unit: string;
  category: string;
  room: string;
  active: boolean;
  image: string;
  description?: string;
  features?: string[];
  customData?: Record<string, any>;
}

// Define type for selected options
export interface SelectedOption {
  id: string;
  name: string;
  price: number;
  unit: string;
  category: string;
  room?: string;
  active?: boolean;
  customData?: Record<string, any>;
}

// Define state shape
interface CustomizationState {
  selectedOptions: Record<string, SelectedOption>;
  availableOptions: CustomizationOption[];
  currentRoom: string;
  totalCost: number;
  loading: boolean;
  error: string | null;
  propertyId: string | null;
  customizationId: string | null;
}

// Define context value shape
export interface CustomizationContextType {
  state: CustomizationState;
  selectOption: (optionId: string, option: SelectedOption) => void;
  removeOption: (optionId: string) => void;
  setCurrentRoom: (room: string) => void;
  setAvailableOptions: (options: CustomizationOption[]) => void;
  resetCustomization: () => void;
  saveCustomization: () => Promise<void>;
  loadCustomization: (propertyId: string) => Promise<void>;
  selectedOptions: Record<string, SelectedOption>; // Added for backwards compatibility
  totalCost: number; // Added for backwards compatibility
}

// Define action types
type CustomizationAction =
  | { type: 'SELECT_OPTION'; payload: { id: string; option: SelectedOption } }
  | { type: 'REMOVE_OPTION'; payload: { id: string } }
  | { type: 'SET_CURRENT_ROOM'; payload: { room: string } }
  | { type: 'SET_AVAILABLE_OPTIONS'; payload: { options: CustomizationOption[] } }
  | { type: 'SET_LOADING'; payload: { loading: boolean } }
  | { type: 'SET_ERROR'; payload: { error: string | null } }
  | { type: 'RESET_CUSTOMIZATION' }
  | { type: 'LOAD_CUSTOMIZATION'; payload: { customization: Partial<CustomizationState> } };

// Create context
const CustomizationContext = createContext<CustomizationContextType | undefined>(undefined);

// Initial state
const initialState: CustomizationState = {
  selectedOptions: {},
  availableOptions: [],
  currentRoom: 'living-room',
  totalCost: 0,
  loading: false,
  error: null,
  propertyId: null,
  customizationId: null,
};

// Reducer function
function customizationReducer(state: CustomizationState, action: CustomizationAction): CustomizationState {
  switch (action.type) {
    case 'SELECT_OPTION':
      return {
        ...state,
        selectedOptions: {
          ...state.selectedOptions,
          [action.payload.id]: action.payload.option,
        },
        totalCost: calculateTotalCost({
          ...state.selectedOptions,
          [action.payload.id]: action.payload.option,
        }),
      };
    case 'REMOVE_OPTION':
      const { [action.payload.id]: removed, ...remainingOptions } = state.selectedOptions;
      return {
        ...state,
        selectedOptions: remainingOptions,
        totalCost: calculateTotalCost(remainingOptions),
      };
    case 'SET_CURRENT_ROOM':
      return {
        ...state,
        currentRoom: action.payload.room,
      };
    case 'SET_AVAILABLE_OPTIONS':
      return {
        ...state,
        availableOptions: action.payload.options,
      };
    case 'SET_LOADING':
      return {
        ...state,
        loading: action.payload.loading,
      };
    case 'SET_ERROR':
      return {
        ...state,
        error: action.payload.error,
      };
    case 'RESET_CUSTOMIZATION':
      return {
        ...initialState,
        availableOptions: state.availableOptions,
      };
    case 'LOAD_CUSTOMIZATION':
      return {
        ...state,
        ...action.payload.customization,
        totalCost: calculateTotalCost(
          action.payload.customization.selectedOptions || state.selectedOptions
        ),
      };
    default:
      return state;
  }
}

// Helper to calculate total cost
function calculateTotalCost(selectedOptions: Record<string, SelectedOption>): number {
  return Object.values(selectedOptions).reduce((total, option) => total + option.price, 0);
}

// Provider component
export function CustomizationProvider({ children }: { children: ReactNode }) {
  const [state, dispatch] = useReducer(customizationReducer, initialState);
  const router = useRouter();

  useEffect(() => {
    // Initialize with property ID from query if available
    const { propertyId } = router.query;
    if (propertyId && typeof propertyId === 'string') {
      loadCustomization(propertyId);
    }
  }, [router.query]);

  // Select an option
  const selectOption = (optionId: string, option: SelectedOption) => {
    dispatch({
      type: 'SELECT_OPTION',
      payload: { id: optionId, option },
    });
  };

  // Remove an option
  const removeOption = (optionId: string) => {
    dispatch({
      type: 'REMOVE_OPTION',
      payload: { id: optionId },
    });
  };

  // Set current room
  const setCurrentRoom = (room: string) => {
    dispatch({
      type: 'SET_CURRENT_ROOM',
      payload: { room },
    });
  };

  // Set available options
  const setAvailableOptions = (options: CustomizationOption[]) => {
    dispatch({
      type: 'SET_AVAILABLE_OPTIONS',
      payload: { options },
    });
  };

  // Reset customization
  const resetCustomization = () => {
    dispatch({ type: 'RESET_CUSTOMIZATION' });
  };

  // Save customization
  const saveCustomization = async () => {
    try {
      dispatch({ type: 'SET_LOADING', payload: { loading: true } });
      
      // Mock API call for now
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Success!
      dispatch({ type: 'SET_LOADING', payload: { loading: false } });
    } catch (error) {
      dispatch({
        type: 'SET_ERROR',
        payload: { error: 'Failed to save customization' },
      });
      dispatch({ type: 'SET_LOADING', payload: { loading: false } });
    }
  };

  // Load customization
  const loadCustomization = async (propertyId: string) => {
    try {
      dispatch({ type: 'SET_LOADING', payload: { loading: true } });
      
      // Mock API call for now
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Success!
      dispatch({
        type: 'LOAD_CUSTOMIZATION',
        payload: {
          customization: {
            propertyId,
            // More data would come from the API
            selectedOptions: state.selectedOptions,
          },
        },
      });
      dispatch({ type: 'SET_LOADING', payload: { loading: false } });
    } catch (error) {
      dispatch({
        type: 'SET_ERROR',
        payload: { error: 'Failed to load customization' },
      });
      dispatch({ type: 'SET_LOADING', payload: { loading: false } });
    }
  };

  // Context value including selectedOptions and totalCost for backwards compatibility
  const value: CustomizationContextType = {
    state,
    selectOption,
    removeOption,
    setCurrentRoom,
    setAvailableOptions,
    resetCustomization,
    saveCustomization,
    loadCustomization,
    selectedOptions: state.selectedOptions,
    totalCost: state.totalCost,
  };

  return (
    <CustomizationContext.Provider value={value}>
      {children}
    </CustomizationContext.Provider>
  );
}

// Custom hook for using the context
export function useCustomization() {
  const context = useContext(CustomizationContext);
  if (context === undefined) {
    throw new Error('useCustomization must be used within a CustomizationProvider');
  }
  return context;
}

export default CustomizationContext;