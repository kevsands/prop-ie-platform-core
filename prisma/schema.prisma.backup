// PROP.ie Unified Database Schema
// Consolidated from all existing schemas for comprehensive platform functionality
// This schema supports the full enterprise-scale property management ecosystem

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // SQLite for development
  url      = env("DATABASE_URL")
}

// ======= CORE ENUMS =======

enum UserRole {
  DEVELOPER
  BUYER
  INVESTOR
  ARCHITECT
  ENGINEER
  QUANTITY_SURVEYOR
  LEGAL
  PROJECT_MANAGER
  AGENT
  SOLICITOR
  CONTRACTOR
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum KYCStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum DevelopmentStatus {
  PLANNING
  PRE_CONSTRUCTION
  CONSTRUCTION
  MARKETING
  SALES
  HANDOVER
  COMPLETED
}

enum UnitType {
  APARTMENT
  DUPLEX
  SEMI_DETACHED
  DETACHED
  TERRACED
  PENTHOUSE
  COMMERCIAL
  RETAIL
  OFFICE
}

enum UnitStatus {
  PLANNED
  UNDER_CONSTRUCTION
  COMPLETE
  AVAILABLE
  RESERVED
  SALE_AGREED
  SOLD
  OCCUPIED
}

enum SaleStatus {
  ENQUIRY
  VIEWING_SCHEDULED
  VIEWED
  INTERESTED
  RESERVATION
  PENDING_APPROVAL
  RESERVATION_APPROVED
  CONTRACT_ISSUED
  CONTRACT_SIGNED
  DEPOSIT_PAID
  MORTGAGE_APPROVED
  CLOSING
  COMPLETED
  HANDED_OVER
  CANCELLED
  EXPIRED
}

// First-Time Buyer specific enums
enum BuyerPhase {
  PLANNING
  FINANCING
  PROPERTY_SEARCH
  RESERVATION
  LEGAL_PROCESS
  CONSTRUCTION
  COMPLETION
  POST_PURCHASE
}

enum MortgageStatus {
  PREPARING
  SUBMITTED
  INFO_REQUESTED
  UNDERWRITING
  DECLINED
  APPROVED_IN_PRINCIPLE
  VALUATION_PENDING
  VALUATION_COMPLETE
  FINAL_APPROVAL
  MORTGAGE_OFFER
  EXPIRED
  DRAWDOWN
  COMPLETED
}

enum ReservationStatus {
  PENDING_PAYMENT
  ACTIVE
  EXPIRED
  CANCELLED
  CONVERTED_TO_SALE
  REFUNDED
}

// Financial enums
enum CurrencyCode {
  EUR
  USD
  GBP
  CAD
  AUD
  JPY
  CHF
  CNY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
  SCHEDULED
  PROCESSING
  RECONCILED
  DISPUTED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  CASH
  CHECK
  DIRECT_DEBIT
  ELECTRONIC_TRANSFER
  WIRE_TRANSFER
  ESCROW
  OTHER
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
  PARTIALLY_PAID
  REFUNDED
}

enum InvoiceType {
  RECEIVABLE
  PAYABLE
}

enum FundingType {
  DEVELOPMENT_LOAN
  SENIOR_DEBT
  MEZZANINE_DEBT
  EQUITY_INVESTMENT
  CROWDFUNDING
  GRANT
  PRESALES
  JOINT_VENTURE
  CONSTRUCTION_LOAN
  BRIDGE_LOAN
  INTERNAL_FUNDING
  VENTURE_DEBT
  OTHER
}

enum FundingStatus {
  PROPOSED
  APPROVED
  ACTIVE
  FULLY_DRAWN
  REPAID
  CANCELLED
  EXPIRED
  PENDING_APPROVAL
  PARTIALLY_DRAWN
}

enum InvestmentType {
  EQUITY
  DEBT
  MEZZANINE
  PREFERRED_EQUITY
  JOINT_VENTURE
  PRIVATE_PLACEMENT
  SYNDICATION
  FUND
  REIT
  OTHER
}

enum InvestmentStatus {
  PROPOSED
  OPEN
  CLOSED
  FULLY_SUBSCRIBED
  ACTIVE
  EXITED
  DISTRESSED
  DEFAULTED
  RESTRUCTURED
  ON_HOLD
}

enum RiskRating {
  VERY_LOW
  LOW
  MODERATE
  HIGH
  VERY_HIGH
}

// SLP (Single Legal Pack) enums
enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ComponentStatus {
  PENDING
  UPLOADED
  IN_REVIEW
  APPROVED
  REJECTED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum ParticipantRole {
  BUYER
  SELLER
  BUYER_SOLICITOR
  SELLER_SOLICITOR
  AGENT
  DEVELOPER
}

// ======= USER MANAGEMENT =======

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  firstName    String
  lastName     String
  phone        String?
  password     String? // Hashed password if using local auth
  roles        String // JSON array of roles for SQLite compatibility
  status       UserStatus @default(ACTIVE)
  kycStatus    KYCStatus  @default(NOT_STARTED)
  organization String?
  position     String?
  avatar       String?
  preferences  Json?
  created      DateTime   @default(now())
  lastActive   DateTime   @updatedAt
  lastLogin    DateTime?
  metadata     Json?

  // Relations
  kycDocuments        Document[]    @relation("UserKycDocuments")
  ownedDevelopments   Development[] @relation("DeveloperRelation")
  investments         Investment[]  @relation("InvestorRelation")
  professionalProfile Professional? @relation("ProfessionalProfile")
  leadsSold           Sale[]        @relation("SellingAgentRelation")
  leads               Lead[]        @relation("AssignedLeads")

  teamMemberships TeamMember[]
  projectsManaged Project[]           @relation("ProjectManagerRelation")
  tasksAssigned   ProjectTask[]       @relation("AssignedTasksRelation")
  tasksCreated    ProjectTask[]       @relation("CreatedTasksRelation")
  salesMilestones SaleStatusHistory[] @relation("SaleStatusUpdatedByRelation")

  // Document management
  documentsUploaded Document[]        @relation("DocumentUploader")
  documentsApproved Document[]        @relation("DocumentApprover")
  updatedDocuments  DocumentVersion[] @relation("DocumentVersionCreator")
  permissions       UserPermission[]  @relation("UserPermissions")

  // First-Time Buyer relations
  buyerProfile      BuyerProfile?
  buyerJourney      BuyerJourney?
  reservations      Reservation[]
  snagLists         SnagList[]
  mortgageTracking  MortgageTracking?
  buyerEvents       BuyerEvent[]

  // Invoice relations
  invoicesCreated   Invoice[]        @relation("InvoiceCreator")
  invoicesApproved  Invoice[]        @relation("InvoiceApprover")
  paymentsRecorded  InvoicePayment[] @relation("PaymentRecorder")
}

model UserPermission {
  id         String @id @default(cuid())
  user       User   @relation("UserPermissions", fields: [userId], references: [id])
  userId     String
  resource   String
  action     String
  conditions Json?
}

model TeamMember {
  id        String    @id @default(cuid())
  team      Team      @relation(fields: [teamId], references: [id])
  teamId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  role      String
  joinDate  DateTime  @default(now())
  leaveDate DateTime?

  @@unique([teamId, userId])
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  projects    Project[]
  members     TeamMember[]
  permissions Json?
  created     DateTime     @default(now())
  updated     DateTime     @updatedAt
}

// ======= FIRST-TIME BUYER JOURNEY =======

model BuyerProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])
  currentJourneyPhase String   @default("planning")
  financialDetails    Json?
  preferences         Json?
  governmentSchemes   Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model BuyerJourney {
  id               String       @id @default(cuid())
  buyer            User         @relation(fields: [buyerId], references: [id])
  buyerId          String       @unique
  currentPhase     BuyerPhase
  startDate        DateTime     @default(now())
  lastUpdated      DateTime     @updatedAt
  targetMoveInDate DateTime?
  targetProperty   Unit?        @relation(fields: [targetPropertyId], references: [id])
  targetPropertyId String?
  preferences      BuyerPreference?
  notes            String?

  // Related entities
  phaseHistory         BuyerPhaseHistory[]
  affordabilityChecks  AffordabilityCheck[]
  mortgageApplications MortgageApplication[]
  propertyReservations PropertyReservation[]
  snaggingLists        SnagList[]

  @@map("BuyerJourneys")
}

model BuyerPhaseHistory {
  id             String       @id @default(cuid())
  journey        BuyerJourney @relation(fields: [journeyId], references: [id])
  journeyId      String
  phase          BuyerPhase
  startDate      DateTime     @default(now())
  endDate        DateTime?
  completedTasks Json?
  notes          String?
}

model BuyerPreference {
  id                     String      @id @default(cuid())
  journey                BuyerJourney @relation(fields: [journeyId], references: [id])
  journeyId              String      @unique
  locations              String // JSON array for SQLite compatibility
  maxDistanceToWork      Int?
  maxDistanceToSchool    Int?
  minBedrooms            Int?
  maxBedrooms            Int?
  minBathrooms           Int?
  propertyTypes          String // JSON array for SQLite compatibility
  mustHaveFeatures       String // JSON array for SQLite compatibility
  niceToHaveFeatures     String // JSON array for SQLite compatibility
  budget                 BudgetInfo?
  lastUpdated            DateTime    @updatedAt
}

model BudgetInfo {
  id                  String          @id @default(cuid())
  preference          BuyerPreference @relation(fields: [preferenceId], references: [id])
  preferenceId        String          @unique
  maxTotalPrice       Int
  maxMonthlyPayment   Int?
  estimatedDeposit    Int
  includesHTB         Boolean         @default(false)
  htbAmount           Int?
  otherFundingSources Json?
  created             DateTime        @default(now())
  updated             DateTime        @updatedAt
}

model AffordabilityCheck {
  id                String       @id @default(cuid())
  journey           BuyerJourney @relation(fields: [journeyId], references: [id])
  journeyId         String
  grossAnnualIncome Int
  partnerIncome     Int?
  monthlyDebts      Int
  depositAmount     Int
  htbAmount         Int?
  maxMortgage       Int
  maxPropertyPrice  Int
  monthlyRepayment  Int
  loanToValue       Float
  debtToIncomeRatio Float
  lender            String?
  calculator        String?
  notes             String?
  created           DateTime     @default(now())
}

model MortgageApplication {
  id                 String            @id @default(cuid())
  journey            BuyerJourney      @relation(fields: [journeyId], references: [id])
  journeyId          String
  lender             String
  applicationType    String
  applicationDate    DateTime
  applicationReference String?
  status             MortgageStatus
  loanAmount         Int
  term               Int
  interestRate       Float?
  fixedRatePeriod    Int?
  monthlyRepayment   Int?
  approvalDate       DateTime?
  approvalExpiryDate DateTime?
  offerReceivedDate  DateTime?
  offerValidUntil    DateTime?
  brokerName         String?
  brokerContact      String?
  brokerFee          Int?
  documents          MortgageDocument[]
  notes              String?
  created            DateTime          @default(now())
  updated            DateTime          @updatedAt
}

model MortgageDocument {
  id               String              @id @default(cuid())
  mortgage         MortgageApplication @relation(fields: [mortgageId], references: [id])
  mortgageId       String
  name             String
  documentType     String
  fileUrl          String
  mimeType         String
  size             Int
  uploadDate       DateTime            @default(now())
  status           String
  verificationDate DateTime?
  notes            String?
}

model PropertyReservation {
  id               String            @id @default(cuid())
  journey          BuyerJourney      @relation(fields: [journeyId], references: [id])
  journeyId        String
  unit             Unit              @relation(fields: [unitId], references: [id])
  unitId           String
  reservationDate  DateTime          @default(now())
  reservationFee   Int
  status           ReservationStatus
  expiryDate       DateTime
  termsUrl         String?
  paymentMethod    String
  paymentReference String?
  paymentStatus    String
  paymentDate      DateTime?
  refundAmount     Int?
  refundDate       DateTime?
  contractSentDate DateTime?
  contractSignedDate DateTime?
  notes            String?
  created          DateTime          @default(now())
  updated          DateTime          @updatedAt
}

model BuyerEvent {
  id               String    @id @default(cuid())
  buyer            User      @relation(fields: [buyerId], references: [id])
  buyerId          String
  title            String
  description      String?
  eventType        String
  location         String?
  startTime        DateTime
  endTime          DateTime
  unitId           String?
  developmentId    String?
  reminderSent     Boolean   @default(false)
  reminderSentTime DateTime?
  notes            String?
  created          DateTime  @default(now())
  updated          DateTime  @updatedAt
}

// ======= LOCATION =======

model Location {
  id           String  @id @default(cuid())
  address      String
  addressLine1 String?
  addressLine2 String?
  city         String
  county       String
  eircode      String?
  country      String  @default("Ireland")
  longitude    Float?
  latitude     Float?

  developments Development[]
}

// ======= DEVELOPMENT =======

model Development {
  id          String            @id @default(cuid())
  name        String
  slug        String?           @unique
  developer   User              @relation("DeveloperRelation", fields: [developerId], references: [id])
  developerId String
  location    Location          @relation(fields: [locationId], references: [id])
  locationId  String
  status      DevelopmentStatus

  totalUnits Unit[]

  professionalTeam ProfessionalAppointment[]

  marketingStatus    Json
  salesStatus        Json
  constructionStatus Json
  complianceStatus   Json

  timelineId   String?          @unique
  timeline     ProjectTimeline? @relation(fields: [timelineId], references: [id])
  financialsId String?

  mainImage      String
  images         String // JSON array for SQLite compatibility
  videos         String // JSON array for SQLite compatibility
  sitePlanUrl    String?
  brochureUrl    String?
  virtualTourUrl String?
  websiteUrl     String?

  description      String
  shortDescription String?
  features         String // JSON array for SQLite compatibility
  amenities        String // JSON array for SQLite compatibility
  buildingSpecs    Json?

  buildingType   String?
  completionDate DateTime?
  startDate      DateTime?
  created        DateTime  @default(now())
  updated        DateTime  @updatedAt
  publishedDate  DateTime?
  isPublished    Boolean   @default(false)
  tags           String // JSON array for SQLite compatibility
  awards         String // JSON array for SQLite compatibility

  documents               Document[]
  projects                Project[]
  investmentOpportunities InvestmentOpportunity[]
  campaigns               MarketingCampaign[]
  sales                   Sale[]
  investments             Investment[]
  viewings                Viewing[]
  finance                 DevelopmentFinance?
  invoicesAsProject       Invoice[]        @relation("InvoiceProject")
  invoicesAsDevelopment   Invoice[]        @relation("InvoiceDevelopment")
}

model ProjectTimeline {
  id                     String              @id @default(cuid())
  development            Development?
  planningSubmissionDate DateTime
  planningDecisionDate   DateTime?
  constructionStartDate  DateTime?
  constructionEndDate    DateTime?
  marketingLaunchDate    DateTime?
  salesLaunchDate        DateTime?
  milestones             ProjectMilestone[]
}

model ProjectMilestone {
  id          String          @id @default(cuid())
  name        String
  description String
  plannedDate DateTime
  actualDate  DateTime?
  status      MilestoneStatus
  timeline    ProjectTimeline @relation(fields: [timelineId], references: [id])
  timelineId  String

  dependencies ProjectMilestoneDependency[] @relation("DependsOn")
  dependents   ProjectMilestoneDependency[] @relation("DependedOnBy")
  documents    Document[]
}

model ProjectMilestoneDependency {
  id          String           @id @default(cuid())
  milestone   ProjectMilestone @relation("DependsOn", fields: [milestoneId], references: [id])
  milestoneId String
  dependsOn   ProjectMilestone @relation("DependedOnBy", fields: [dependsOnId], references: [id])
  dependsOnId String

  @@unique([milestoneId, dependsOnId])
}

// ======= UNIT =======

model Unit {
  id            String      @id @default(cuid())
  development   Development @relation(fields: [developmentId], references: [id])
  developmentId String
  name          String
  type          UnitType

  size          Float
  bedrooms      Int
  bathrooms     Int
  floors        Int
  parkingSpaces Int

  basePrice Float
  status    UnitStatus

  berRating String
  features  String // JSON array for SQLite compatibility

  primaryImage   String
  images         String // JSON array for SQLite compatibility
  floorplans     String // JSON array for SQLite compatibility
  virtualTourUrl String?

  unitNumber         String?
  block              String?
  floor              Int?
  aspect             String?
  availableFrom      DateTime?
  reservationEndDate DateTime?
  lastViewed         DateTime?
  viewCount          Int       @default(0)
  updatedAt          DateTime  @updatedAt
  slug               String?

  // Relations
  outdoorSpaces           UnitOutdoorSpace[]
  rooms                   UnitRoom[]
  customizationOptions    UnitCustomizationOption[]
  customizationSelections CustomizationSelection[]
  sales                   Sale[]
  viewings                Viewing[]
  investorWatchlists      InvestorWatchlistUnit[]
  documents               Document[]                @relation("UnitDocuments")
  reservations            Reservation[]
  snagLists               SnagList[]
  homePackItems           HomePackItem[]
  homePackDocuments       HomePackDocument[]
  buyerJourneys           BuyerJourney[]
  propertyReservations    PropertyReservation[]
}

// Unit related models continue with the existing detailed schema...
// [Include all the existing Unit-related models from the original schema.prisma]

model UnitOutdoorSpace {
  id          String           @id @default(cuid())
  unit        Unit             @relation(fields: [unitId], references: [id])
  unitId      String
  type        OutdoorSpaceType
  size        Float
  orientation String?
  description String?
  features    String // JSON array for SQLite compatibility
  images      String // JSON array for SQLite compatibility
}

enum OutdoorSpaceType {
  BALCONY
  TERRACE
  GARDEN
  PATIO
  ROOF_TERRACE
  YARD
}

model UnitRoom {
  id       String   @id @default(cuid())
  unit     Unit     @relation(fields: [unitId], references: [id])
  unitId   String
  name     String
  type     RoomType
  size     Float
  length   Float?
  width    Float?
  features String // JSON array for SQLite compatibility
  images   String // JSON array for SQLite compatibility
}

enum RoomType {
  LIVING_ROOM
  KITCHEN
  DINING_ROOM
  BEDROOM
  BATHROOM
  EN_SUITE
  STUDY
  UTILITY
  HALL
  LANDING
  STORAGE
  OTHER
}

model UnitCustomizationOption {
  id                    String                @id @default(cuid())
  unit                  Unit                  @relation(fields: [unitId], references: [id])
  unitId                String
  category              CustomizationCategory
  name                  String
  description           String
  baseOption            Boolean
  additionalCost        Float
  images                String // JSON array for SQLite compatibility
  modelPath             String?
  installationTimeframe Int?
  supplierInfo          Json?
  specificationDetails  String?
  dimensions            Json?
  technicalRequirements String?
  maintenanceInfo       String?
  warrantyPeriod        Int?

  selections       SelectedOption[]
  alternatives     UnitCustomizationOptionAlternative[]     @relation("AlternativeRelation")
  alternativeOf    UnitCustomizationOptionAlternative[]     @relation("AlternativeOfRelation")
  requiredWith     UnitCustomizationOptionRequirement[]     @relation("RequiredWithRelation")
  requiresOption   UnitCustomizationOptionRequirement[]     @relation("RequiresOptionRelation")
  incompatibleWith UnitCustomizationOptionIncompatibility[] @relation("IncompatibleWithRelation")
  incompatibleOf   UnitCustomizationOptionIncompatibility[] @relation("IncompatibleOfRelation")
}

enum CustomizationCategory {
  KITCHEN
  BATHROOM
  FLOORING
  DOORS
  WINDOWS
  PAINT
  ELECTRICAL
  HEATING
  STORAGE
  FIXTURES
  EXTERIOR
  SMART_HOME
  APPLIANCES
  LIGHTING
  OTHER
}

model UnitCustomizationOptionAlternative {
  id                  String                  @id @default(cuid())
  option              UnitCustomizationOption @relation("AlternativeRelation", fields: [optionId], references: [id])
  optionId            String
  alternativeOption   UnitCustomizationOption @relation("AlternativeOfRelation", fields: [alternativeOptionId], references: [id])
  alternativeOptionId String

  @@unique([optionId, alternativeOptionId])
}

model UnitCustomizationOptionRequirement {
  id               String                  @id @default(cuid())
  option           UnitCustomizationOption @relation("RequiredWithRelation", fields: [optionId], references: [id])
  optionId         String
  requiredOption   UnitCustomizationOption @relation("RequiresOptionRelation", fields: [requiredOptionId], references: [id])
  requiredOptionId String

  @@unique([optionId, requiredOptionId])
}

model UnitCustomizationOptionIncompatibility {
  id                   String                  @id @default(cuid())
  option               UnitCustomizationOption @relation("IncompatibleWithRelation", fields: [optionId], references: [id])
  optionId             String
  incompatibleOption   UnitCustomizationOption @relation("IncompatibleOfRelation", fields: [incompatibleOptionId], references: [id])
  incompatibleOptionId String

  @@unique([optionId, incompatibleOptionId])
}

model CustomizationSelection {
  id            String              @id @default(cuid())
  unit          Unit                @relation(fields: [unitId], references: [id])
  unitId        String
  buyer         String
  status        CustomizationStatus
  totalCost     Float
  notes         String?
  submittedDate DateTime?
  approvedDate  DateTime?
  deadlineDate  DateTime?
  meetingBooked Boolean             @default(false)
  meetingDate   DateTime?

  selections SelectedOption[]
  documents  Document[]
}

model SelectedOption {
  id          String                  @id @default(cuid())
  selection   CustomizationSelection  @relation(fields: [selectionId], references: [id])
  selectionId String
  option      UnitCustomizationOption @relation(fields: [optionId], references: [id])
  optionId    String
  location    String?
  notes       String?
  color       String?
  finish      String?
  quantity    Int                     @default(1)
}

enum CustomizationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  CHANGES_REQUESTED
  APPROVED
  REJECTED
  EXPIRED
  IN_PROGRESS
  COMPLETED
}

// ======= RESERVATIONS & SNAG LISTS =======

model Reservation {
  id                 String    @id @default(cuid())
  propertyId         String
  property           Unit      @relation(fields: [propertyId], references: [id])
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  status             String    @default("pending")
  depositAmount      Float
  depositPaid        Boolean   @default(false)
  reservationDate    DateTime  @default(now())
  agreementSigned    Boolean   @default(false)
  agreementDocument  String?
  expiryDate         DateTime?
  completionDate     DateTime?
  cancellationReason String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  documents          Document[]
}

model MortgageTracking {
  id                String     @id @default(cuid())
  userId            String     @unique
  user              User       @relation(fields: [userId], references: [id])
  status            String     @default("not_started")
  lenderName        String?
  amount            Float?
  aipDate           DateTime?
  aipExpiryDate     DateTime?
  formalOfferDate   DateTime?
  mortgageDocuments Document[] @relation("MortgageDocuments")
  conditions        String // JSON array for SQLite compatibility
  notes             String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model SnagList {
  id         String     @id @default(cuid())
  journey    BuyerJourney? @relation(fields: [journeyId], references: [id])
  journeyId  String?
  propertyId String
  property   Unit       @relation(fields: [propertyId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  status     String     @default("active")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  items      SnagItem[]
}

model SnagItem {
  id             String    @id @default(cuid())
  snagListId     String
  snagList       SnagList  @relation(fields: [snagListId], references: [id])
  description    String
  location       String
  status         String    @default("pending")
  images         String // JSON array for SQLite compatibility
  developerNotes String?
  fixedDate      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sale           Sale?     @relation("SaleSnagItems", fields: [saleId], references: [id])
  saleId         String?
}

model HomePackItem {
  id          String    @id @default(cuid())
  propertyId  String
  property    Unit      @relation(fields: [propertyId], references: [id])
  title       String
  category    String
  documentUrl String
  expiryDate  DateTime?
  issuer      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model HomePackDocument {
  id             String    @id @default(cuid())
  unit           Unit      @relation(fields: [unitId], references: [id])
  unitId         String
  name           String
  category       String
  description    String?
  fileUrl        String
  mimeType       String
  size           Int
  uploadDate     DateTime  @default(now())
  expiryDate     DateTime?
  manufacturer   String?
  modelNumber    String?
  serialNumber   String?
  purchaseDate   String?
  supplierContact String?
  notes          String?
}

// ======= SALES =======

model Sale {
  id               String  @id @default(cuid())
  unit             Unit    @relation(fields: [unitId], references: [id])
  unitId           String
  buyerId          String
  sellingAgent     User?   @relation("SellingAgentRelation", fields: [sellingAgentId], references: [id])
  sellingAgentId   String?
  solicitorId      String?
  buyerSolicitorId String?

  status         SaleStatus
  contractStatus String

  basePrice         Float
  customizationCost Float
  totalPrice        Float

  documents Document[]

  completionDate    DateTime?
  handoverDate      DateTime?
  keyCollectionDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referenceNumber String
  metadata        Json?
  tags            String // JSON array for SQLite compatibility

  statusHistory   SaleStatusHistory[]
  timeline        SaleTimeline?
  depositInfo     Deposit?
  mortgageDetails MortgageDetails?
  htbDetails      HTBDetails?
  notes           SaleNote[]
  tasks           SaleTask[]
  snagList        SnagItem[]       @relation("SaleSnagItems")
  development     Development      @relation(fields: [developmentId], references: [id])
  developmentId   String
}

model SaleStatusHistory {
  id             String   @id @default(cuid())
  sale           Sale     @relation(fields: [saleId], references: [id])
  saleId         String
  status         String
  previousStatus String?
  timestamp      DateTime @default(now())
  updatedBy      User     @relation("SaleStatusUpdatedByRelation", fields: [updatedById], references: [id])
  updatedById    String
  notes          String?
}

model SaleTimeline {
  id                     String    @id @default(cuid())
  sale                   Sale      @relation(fields: [saleId], references: [id])
  saleId                 String    @unique
  initialEnquiryDate     DateTime?
  firstViewingDate       DateTime?
  reservationDate        DateTime?
  reservationExpiryDate  DateTime?
  contractIssuedDate     DateTime?
  contractReturnDeadline DateTime?
  contractReturnedDate   DateTime?
  depositDueDate         DateTime?
  depositPaidDate        DateTime?
  mortgageApprovalDate   DateTime?
  closingDate            DateTime?
  fundsDisbursedDate     DateTime?
  saleCompletedDate      DateTime?
  handoverDate           DateTime?
  keyCollectionDate      DateTime?
  warrantyStartDate      DateTime?
  warrantyEndDate        DateTime?
}

model Deposit {
  id                      String    @id @default(cuid())
  sale                    Sale      @relation(fields: [saleId], references: [id])
  saleId                  String    @unique
  initialAmount           Float
  initialAmountPercentage Float
  initialPaidDate         DateTime?
  balanceAmount           Float
  balanceDueDate          DateTime?
  balancePaidDate         DateTime?
  totalPaid               Float
  status                  String
  paymentMethod           String?
  receiptDocumentIds      String // JSON array for SQLite compatibility
}

model MortgageDetails {
  id                      String    @id @default(cuid())
  sale                    Sale      @relation(fields: [saleId], references: [id])
  saleId                  String    @unique
  lender                  String
  amount                  Float
  term                    Int
  interestRate            Float
  approvalInPrincipleDate DateTime?
  finalApprovalDate       DateTime?
  status                  String
  broker                  String?
  brokerFee               Float?
  loanType                String
  documentIds             String // JSON array for SQLite compatibility
  notes                   String?
  applicationDate         DateTime?
  offerExpiryDate         DateTime?
  completionDate          DateTime?
  drawdownDate            DateTime?
}

model HTBDetails {
  id                  String    @id @default(cuid())
  sale                Sale      @relation(fields: [saleId], references: [id])
  saleId              String    @unique
  applicationNumber   String
  status              String
  applicationDate     DateTime
  approvalDate        DateTime?
  amount              Float
  claimSubmissionDate DateTime?
  claimPaymentDate    DateTime?
  documentIds         String // JSON array for SQLite compatibility
  notes               String?
  accessCode          String?
  claimCode           String?
  expiryDate          DateTime?
}

model SaleNote {
  id        String   @id @default(cuid())
  sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    String
  authorId  String
  content   String
  timestamp DateTime @default(now())
  isPrivate Boolean  @default(false)
  category  String?
}

model SaleTask {
  id               String    @id @default(cuid())
  sale             Sale      @relation(fields: [saleId], references: [id])
  saleId           String
  title            String
  description      String
  dueDate          DateTime
  status           String
  priority         String
  assignedToId     String
  createdById      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  completedAt      DateTime?
  completedById    String?
  notifyBeforeDays Int?
  isReminderSent   Boolean   @default(false)
  recurrence       Json?
}

// ======= DOCUMENT MANAGEMENT =======

model Document {
  id                String    @id @default(cuid())
  name              String
  description       String?
  type              String
  status            String
  category          String
  fileUrl           String
  fileType          String
  fileSize          Int
  uploadedBy        User      @relation("DocumentUploader", fields: [uploadedById], references: [id])
  uploadedById      String
  uploadedByName    String?
  uploadDate        DateTime  @default(now())
  expiryDate        DateTime?
  tags              String // JSON array for SQLite compatibility
  version           Int       @default(1)
  relatedTo         Json?
  metadata          Json?
  signatureRequired Boolean   @default(false)
  signatureStatus   String?
  organizationId    String?

  kycUsers                User[]                   @relation("UserKycDocuments")
  development             Development?             @relation(fields: [developmentId], references: [id])
  developmentId           String?
  unit                    Unit?                    @relation("UnitDocuments", fields: [unitId], references: [id])
  unitId                  String?
  sale                    Sale?                    @relation(fields: [saleId], references: [id])
  saleId                  String?
  milestones              ProjectMilestone[]
  customizationSelections CustomizationSelection[]

  approvedBy   User?   @relation("DocumentApprover", fields: [approvedById], references: [id])
  approvedById String?

  previousVersions DocumentVersion[]
  signatures       DocumentSignature[]
  workflow         DocumentWorkflowInstance?
  reservation      Reservation?          @relation(fields: [reservationId], references: [id])
  reservationId    String?
  mortgageTracking MortgageTracking?     @relation("MortgageDocuments", fields: [mortgageTrackingId], references: [id])
  mortgageTrackingId String?

  // Financial relations
  fundingSource       FundingSource?      @relation("FundingSourceDocuments", fields: [fundingSourceId], references: [id])
  fundingSourceId     String?
  budget              DevelopmentBudget?  @relation("BudgetDocuments", fields: [budgetId], references: [id])
  budgetId            String?
  financialStatement  FinancialStatement? @relation("FinancialStatementDocuments", fields: [financialStatementId], references: [id])
  financialStatementId String?
  investment          Investment?         @relation("InvestmentDocuments", fields: [investmentId], references: [id])
  investmentId        String?
  // investor            Investment? @relation("InvestorDocuments", fields: [investorId], references: [id])
  // investorId          String?
  invoice             Invoice?            @relation("InvoiceDocuments", fields: [invoiceId], references: [id])
  invoiceId           String?
}

model DocumentVersion {
  id            String   @id @default(cuid())
  document      Document @relation(fields: [documentId], references: [id])
  documentId    String
  versionNumber Int
  fileUrl       String
  createdBy     User     @relation("DocumentVersionCreator", fields: [createdById], references: [id])
  createdById   String
  created       DateTime @default(now())
  notes         String?
  changes       String?
  size          Int
  checksum      String?
}

model DocumentWorkflow {
  id            String   @id @default(cuid())
  name          String
  description   String?
  documentTypes String // JSON array for SQLite compatibility
  isDefault     Boolean  @default(false)
  created       DateTime @default(now())
  updated       DateTime @updatedAt
  createdBy     String

  stages    DocumentWorkflowStage[]
  instances DocumentWorkflowInstance[]
}

model DocumentWorkflowStage {
  id            String  @id @default(cuid())
  name          String
  description   String?
  order         Int
  isOptional    Boolean @default(false)
  timeoutDays   Int?
  notifyOnEntry Boolean @default(true)
  notifyOnExit  Boolean @default(false)

  workflow     DocumentWorkflow          @relation(fields: [workflowId], references: [id])
  workflowId   String
  approvers    ApproverConfig[]
  customFields DocumentCustomField[]
  history      DocumentWorkflowHistory[]
}

model ApproverConfig {
  id              String  @id @default(cuid())
  approverType    String
  approverId      String
  approverName    String?
  requirementType String
  canDelegate     Boolean @default(false)

  stage   DocumentWorkflowStage @relation(fields: [stageId], references: [id])
  stageId String
}

model DocumentCustomField {
  id                String   @id @default(cuid())
  name              String
  description       String?
  fieldType         String
  isRequired        Boolean  @default(false)
  options           String // JSON array for SQLite compatibility
  defaultValue      String?
  validationRegex   String?
  validationMessage String?

  stage   DocumentWorkflowStage @relation(fields: [stageId], references: [id])
  stageId String
}

model DocumentWorkflowInstance {
  id                String           @id @default(cuid())
  document          Document         @relation(fields: [documentId], references: [id])
  documentId        String           @unique
  workflow          DocumentWorkflow @relation(fields: [workflowId], references: [id])
  workflowId        String
  currentStageId    String?
  status            String
  startDate         DateTime         @default(now())
  endDate           DateTime?
  dueDate           DateTime?
  customFieldValues Json?
  notes             String?

  history DocumentWorkflowHistory[]
}

model DocumentWorkflowHistory {
  id          String                   @id @default(cuid())
  instance    DocumentWorkflowInstance @relation(fields: [instanceId], references: [id])
  instanceId  String
  stage       DocumentWorkflowStage    @relation(fields: [stageId], references: [id])
  stageId     String
  enteredDate DateTime                 @default(now())
  exitDate    DateTime?
  status      String
  notes       String?

  approvals DocumentApproval[]
}

model DocumentApproval {
  id            String                  @id @default(cuid())
  history       DocumentWorkflowHistory @relation(fields: [historyId], references: [id])
  historyId     String
  approverId    String
  decision      String
  timestamp     DateTime                @default(now())
  notes         String?
  delegatedToId String?
}

model DocumentSignature {
  id                 String   @id @default(cuid())
  document           Document @relation(fields: [documentId], references: [id])
  documentId         String
  signerId           String
  signatureDate      DateTime @default(now())
  signatureImageUrl  String?
  signaturePosition  Json?
  signatureMethod    String
  ipAddress          String?
  verified           Boolean  @default(false)
  verificationMethod String?
  certificateUrl     String?
}

// ======= FINANCIAL MODELS =======

model DevelopmentFinance {
  id                  String      @id @default(cuid())
  development         Development @relation(fields: [developmentId], references: [id])
  developmentId       String      @unique
  projectCost         Decimal
  projectCostCurrency CurrencyCode
  reportingPeriod     String
  lockedBy            String?
  lockedUntil         DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  fundingSources      FundingSource[]
  budget              DevelopmentBudget?
  cashFlows           CashFlowProjection[]
  financialReturns    FinancialReturns?
  financialStatements FinancialStatement[]
  transactions        FinancialTransaction[]
}

model FundingSource {
  id              String                @id @default(cuid())
  finance         DevelopmentFinance    @relation(fields: [financeId], references: [id])
  financeId       String
  name            String
  type            FundingType
  amount          Decimal
  currency        CurrencyCode
  interestRate    Decimal?
  term            Int?
  termUnit        String?
  startDate       DateTime?
  endDate         DateTime?
  ltvRatio        Decimal?
  ltcRatio        Decimal?
  covenants       String // JSON array for SQLite compatibility
  securityType    String?
  providerName    String
  providerContact String?
  status          FundingStatus
  notes           String?
  drawdowns       Drawdown[]
  repayments      Repayment[]
  documents       Document[]            @relation("FundingSourceDocuments")
}

model Drawdown {
  id                String        @id @default(cuid())
  fundingSource     FundingSource @relation(fields: [fundingSourceId], references: [id])
  fundingSourceId   String
  amount            Decimal
  currency          CurrencyCode
  date              DateTime
  status            TransactionStatus
  purpose           String
  notes             String?
  transactionId     String?
  conditions        String // JSON array for SQLite compatibility
}

model Repayment {
  id                String        @id @default(cuid())
  fundingSource     FundingSource @relation(fields: [fundingSourceId], references: [id])
  fundingSourceId   String
  amount            Decimal
  currency          CurrencyCode
  date              DateTime
  status            TransactionStatus
  type              String
  principalAmount   Decimal?
  interestAmount    Decimal?
  feesAmount        Decimal?
  notes             String?
  transactionId     String?
}

model DevelopmentBudget {
  id                    String            @id @default(cuid())
  finance               DevelopmentFinance @relation(fields: [financeId], references: [id])
  financeId             String            @unique
  name                  String
  description           String?
  totalBudget           Decimal
  currency              CurrencyCode
  contingencyPercentage Decimal
  contingencyAmount     Decimal
  startDate             DateTime
  endDate               DateTime
  version               Int
  status                String
  createdBy             String
  approvedBy            String?
  approvedAt            DateTime?
  notes                 String?
  categories            BudgetCategory[]
  documents             Document[]        @relation("BudgetDocuments")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model BudgetCategory {
  id                 String             @id @default(cuid())
  budget             DevelopmentBudget  @relation(fields: [budgetId], references: [id])
  budgetId           String
  name               String
  description        String?
  parentCategoryId   String?
  plannedAmount      Decimal
  actualAmount       Decimal
  varianceAmount     Decimal
  variancePercentage Decimal
  isMilestone        Boolean            @default(false)
  milestoneDate      DateTime?
  status             String
  notes              String?
  items              BudgetLineItem[]
}

model BudgetLineItem {
  id                 String         @id @default(cuid())
  category           BudgetCategory @relation(fields: [categoryId], references: [id])
  categoryId         String
  name               String
  description        String?
  quantity           Decimal
  unit               String
  unitPrice          Decimal
  plannedAmount      Decimal
  actualAmount       Decimal
  varianceAmount     Decimal
  variancePercentage Decimal
  responsible        String?
  invoices           String // JSON array for SQLite compatibility
  purchaseOrders     String // JSON array for SQLite compatibility
  status             String
  notes              String?
}

model FinancialTransaction {
  id                   String            @id @default(cuid())
  finance              DevelopmentFinance @relation(fields: [financeId], references: [id])
  financeId            String
  amount               Decimal
  currency             CurrencyCode
  date                 DateTime
  description          String
  referenceNumber      String?
  status               TransactionStatus
  category             String
  transactionType      String
  paymentMethod        PaymentMethod
  counterpartyName     String
  counterpartyType     String
  counterpartyId       String?
  budgetCategoryId     String?
  invoiceId            String?
  accountId            String?
  relatedTransactionId String?
  tags                 String // JSON array for SQLite compatibility
  notes                String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model FinancialStatement {
  id         String            @id @default(cuid())
  finance    DevelopmentFinance @relation(fields: [financeId], references: [id])
  financeId  String
  type       String
  period     String
  startDate  DateTime
  endDate    DateTime
  data       Json
  createdBy  String
  approvedBy String?
  approvedAt DateTime?
  status     String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  documents  Document[]        @relation("FinancialStatementDocuments")
}

model FinancialReturns {
  id                      String            @id @default(cuid())
  finance                 DevelopmentFinance @relation(fields: [financeId], references: [id])
  financeId               String            @unique
  totalRevenue            Decimal
  totalRevenueCurrency    CurrencyCode
  totalCost               Decimal
  totalCostCurrency       CurrencyCode
  grossProfit             Decimal
  grossProfitCurrency     CurrencyCode
  grossMargin             Decimal
  netProfit               Decimal
  netProfitCurrency       CurrencyCode
  netMargin               Decimal
  ror                     Decimal
  roi                     Decimal
  irr                     Decimal
  paybackPeriod           Int
  profitOnCost            Decimal
  breakEvenPoint          Json?
  constructionStartDate   DateTime?
  constructionEndDate     DateTime?
  salesStartDate          DateTime?
  salesEndDate            DateTime?
  constructionDuration    Int
  salesDuration           Int
  npv                     Decimal
  npvCurrency             CurrencyCode
  sensitivity             Json?
  lastCalculated          DateTime
  calculatedBy            String
}

model CashFlowProjection {
  id              String            @id @default(cuid())
  finance         DevelopmentFinance @relation(fields: [financeId], references: [id])
  financeId       String
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  frequency       String
  baseCurrency    CurrencyCode
  version         Int
  status          String
  createdBy       String
  approvedBy      String?
  approvedAt      DateTime?
  lastUpdated     DateTime          @updatedAt
  scenarioType    String
  assumptions     Json?
  periods         CashFlowPeriod[]
  summary         CashFlowSummary?
  // scenarios       CashFlowScenario[]
  // baseScenario    CashFlowProjection? @relation("BaseScenarioRelation", fields: [baseScenarioId], references: [id])
  // baseScenarioId  String?
}

model CashFlowPeriod {
  id                         String             @id @default(cuid())
  cashFlow                   CashFlowProjection @relation(fields: [cashFlowId], references: [id])
  cashFlowId                 String
  periodNumber               Int
  startDate                  DateTime
  endDate                    DateTime
  isActual                   Boolean
  salesRevenue               Decimal
  salesRevenueCurrency       CurrencyCode
  rentalIncome               Decimal
  rentalIncomeCurrency       CurrencyCode
  fundingDrawdowns           Decimal
  fundingDrawdownsCurrency   CurrencyCode
  otherInflows               Decimal
  otherInflowsCurrency       CurrencyCode
  totalInflows               Decimal
  totalInflowsCurrency       CurrencyCode
  landCosts                  Decimal
  landCostsCurrency          CurrencyCode
  constructionCosts          Decimal
  constructionCostsCurrency  CurrencyCode
  professionalFees           Decimal
  professionalFeesCurrency   CurrencyCode
  marketingCosts             Decimal
  marketingCostsCurrency     CurrencyCode
  financeCosts               Decimal
  financeCostsCurrency       CurrencyCode
  legalFees                  Decimal
  legalFeesCurrency          CurrencyCode
  contingencyCosts           Decimal
  contingencyCostsCurrency   CurrencyCode
  taxPayments                Decimal
  taxPaymentsCurrency        CurrencyCode
  otherOutflows              Decimal
  otherOutflowsCurrency      CurrencyCode
  totalOutflows              Decimal
  totalOutflowsCurrency      CurrencyCode
  netCashFlow                Decimal
  netCashFlowCurrency        CurrencyCode
  cumulativeCashFlow         Decimal
  cumulativeCashFlowCurrency CurrencyCode
  notes                      String?
  categories                 CashFlowCategory[]
}

model CashFlowCategory {
  id                      String           @id @default(cuid())
  period                  CashFlowPeriod   @relation(fields: [periodId], references: [id])
  periodId                String
  name                    String
  description             String?
  type                    String
  plannedAmount           Decimal
  plannedAmountCurrency   CurrencyCode
  actualAmount            Decimal
  actualAmountCurrency    CurrencyCode
  variance                Decimal
  varianceCurrency        CurrencyCode
  variancePercentage      Decimal
  parentCategoryId        String?
  items                   CashFlowLineItem[]
}

model CashFlowLineItem {
  id                    String           @id @default(cuid())
  category              CashFlowCategory @relation(fields: [categoryId], references: [id])
  categoryId            String
  name                  String
  description           String?
  type                  String
  plannedAmount         Decimal
  plannedAmountCurrency CurrencyCode
  actualAmount          Decimal
  actualAmountCurrency  CurrencyCode
  variance              Decimal
  varianceCurrency      CurrencyCode
  variancePercentage    Decimal
  date                  DateTime?
  transactionId         String?
  budgetLineItemId      String?
  notes                 String?
}

model CashFlowSummary {
  id                         String             @id @default(cuid())
  cashFlow                   CashFlowProjection @relation(fields: [cashFlowId], references: [id])
  cashFlowId                 String             @unique
  totalInflows               Decimal
  totalInflowsCurrency       CurrencyCode
  totalOutflows              Decimal
  totalOutflowsCurrency      CurrencyCode
  netCashFlow                Decimal
  netCashFlowCurrency        CurrencyCode
  peakNegativeCashFlow       Decimal
  peakNegativeCashFlowCurrency CurrencyCode
  peakNegativeCashFlowPeriod Int
  breakEvenPeriod            Int
  cashFlowPositiveDate       DateTime?
  periodsWithNegativeCashFlow Int
  periodsWithPositiveCashFlow Int
  npv                        Decimal
  npvCurrency                CurrencyCode
  irr                        Decimal
  paybackPeriod              Int
  profitability              Decimal
  volatilityIndex            Decimal
  liquidityRatio             Decimal
  inflowDistribution         Json
  outflowDistribution        Json
  lastCalculated             DateTime
}

model CashFlowScenario {
  id                             String             @id @default(cuid())
  name                           String
  description                    String?
  type                           String
  // baseScenario                   CashFlowProjection @relation("BaseScenarioRelation", fields: [baseScenarioId], references: [id])
  baseScenarioId                 String
  modifiedAssumptions            Json
  netCashFlowDifference          Decimal
  netCashFlowDifferenceCurrency  CurrencyCode
  netCashFlowDifferencePercentage Decimal
  npvDifference                  Decimal
  npvDifferenceCurrency          CurrencyCode
  npvDifferencePercentage        Decimal
  irrDifference                  Decimal
  paybackPeriodDifference        Int
  probabilityAssessment          Decimal?
  scenarioSpecificMetrics        Json?
  createdBy                      String
  createdAt                      DateTime           @default(now())
  lastUpdated                    DateTime           @updatedAt
}

// ======= INVESTMENT MODELS =======

model Investment {
  id              String                        @id @default(cuid())
  investor        User                          @relation("InvestorRelation", fields: [investorId], references: [id])
  investorId      String
  development     Development                   @relation(fields: [developmentId], references: [id])
  developmentId   String
  unitIds         String // JSON array for SQLite compatibility
  investmentType  String
  status          String
  amount          Float
  currency        String                        @default("EUR")
  equity          Float?
  ownershipStructure String?
  expectedReturn  Float
  projectedIRR    Float?
  projectMultiple Float?
  commitmentDate  DateTime
  fundingDate     DateTime
  dueDate         DateTime?
  exitDate        DateTime?
  investmentVehicleId String?
  legalEntity     String?
  coInvestorIds   String // JSON array for SQLite compatibility
  investmentAgreementId String
  termSheetId     String?
  documentIds     String // JSON array for SQLite compatibility
  currentValue    Float
  valuationDate   DateTime
  totalReturns    Float
  roi             Float
  notes           String?
  created         DateTime                      @default(now())
  updated         DateTime                      @updatedAt
  distributions   Distribution[]
  updates         InvestmentUpdate[]
  documents       Document[]                    @relation("InvestmentDocuments")
}

model Distribution {
  id               String     @id @default(cuid())
  investment       Investment @relation(fields: [investmentId], references: [id])
  investmentId     String
  distributionType String
  amount           Float
  currency         String     @default("EUR")
  distributionDate DateTime
  description      String
  status           String
  paymentReference String?
  documentIds      String // JSON array for SQLite compatibility
  taxWithheld      Float?
  netAmount        Float
}

model InvestmentUpdate {
  id               String     @id @default(cuid())
  investment       Investment @relation(fields: [investmentId], references: [id])
  investmentId     String
  updateDate       DateTime
  title            String
  content          String
  authorId         String
  isPublic         Boolean    @default(true)
  metrics          Json
  documentIds      String // JSON array for SQLite compatibility
  sentToInvestors  Boolean    @default(false)
  acknowledgements Json[]
}

model InvestmentOpportunity {
  id                      String      @id @default(cuid())
  title                   String
  development             Development @relation(fields: [developmentId], references: [id])
  developmentId           String
  description             String
  status                  String
  minimumInvestment       Float
  targetRaise             Float
  maxRaise                Float
  totalRaised             Float       @default(0)
  investmentType          String
  projectedReturns        Json
  launchDate              DateTime
  closingDate             DateTime
  constructionStartDate   DateTime?
  estimatedCompletionDate DateTime
  estimatedExitDate       DateTime
  highlights              String // JSON array for SQLite compatibility
  riskFactors             String // JSON array for SQLite compatibility
  images                  String // JSON array for SQLite compatibility
  brochureUrl             String?
  financialProjectionsUrl String?
  investmentStructure     String
  feesStructure           Json
  documentIds             String // JSON array for SQLite compatibility
  visibleTo               String
  selectedInvestorIds     String // JSON array for SQLite compatibility
  viewCount               Int         @default(0)
  interestedInvestors     Json[]
  commitments             Json[]
  createdById             String
  created                 DateTime    @default(now())
  updated                 DateTime    @updatedAt
}

model InvestorWatchlistUnit {
  id         String   @id @default(cuid())
  investorId String
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
  addedDate  DateTime @default(now())
  notes      String?

  @@unique([investorId, unitId])
}

// ======= PROFESSIONAL SERVICES =======

model Professional {
  id               String   @id @default(cuid())
  user             User     @relation("ProfessionalProfile", fields: [userId], references: [id])
  userId           String   @unique
  companyId        String
  company          Company  @relation(fields: [companyId], references: [id])
  specializations  String // JSON array for SQLite compatibility
  status           String
  licenseNumber    String?
  insuranceDetails Json?
  professionalBio  String?
  website          String?
  created          DateTime @default(now())
  updated          DateTime @updatedAt

  qualifications Qualification[]
  documents      ProfessionalDocument[]
  appointments   ProfessionalAppointment[]
  assignments    ProfessionalAssignment[]
  reviews        ProfessionalReview[]
}

model Company {
  id               String    @id @default(cuid())
  name             String
  address          String
  phone            String
  email            String
  website          String?
  description      String?
  logo             String?
  vatNumber        String?
  companyNumber    String
  establishedDate  DateTime?
  insuranceDetails Json?
  certifications   String // JSON array for SQLite compatibility
  created          DateTime  @default(now())
  updated          DateTime  @updatedAt

  professionals Professional[]
  serviceAreas  ServiceArea[]
}

model ServiceArea {
  id        String   @id @default(cuid())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  county    String
  cities    String // JSON array for SQLite compatibility
}

model Qualification {
  id                    String       @id @default(cuid())
  professional          Professional @relation(fields: [professionalId], references: [id])
  professionalId        String
  title                 String
  issuingBody           String
  dateObtained          DateTime
  expiryDate            DateTime?
  certificateDocumentId String?
  verificationUrl       String?
  isVerified            Boolean      @default(false)
}

model ProfessionalDocument {
  id             String       @id @default(cuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  documentId     String
  type           String
  uploadDate     DateTime     @default(now())
  expiryDate     DateTime?
  isVerified     Boolean      @default(false)
}

model ProfessionalAppointment {
  id                 String       @id @default(cuid())
  development        Development  @relation(fields: [developmentId], references: [id])
  developmentId      String
  professional       Professional @relation(fields: [professionalId], references: [id])
  professionalId     String
  role               String
  appointmentDate    DateTime     @default(now())
  endDate            DateTime?
  status             String
  contractDocumentId String?
  feeStructure       Json?
  responsibilities   String // JSON array for SQLite compatibility
  notes              String?
  created            DateTime     @default(now())
  updated            DateTime     @updatedAt
}

model ProfessionalAssignment {
  id             String       @id @default(cuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  role           String
  saleId         String
  assignedDate   DateTime     @default(now())
  endDate        DateTime?
  status         String
  notes          String?
  created        DateTime     @default(now())
  updated        DateTime     @updatedAt
}

model ProfessionalReview {
  id             String       @id @default(cuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  reviewerId     String
  developmentId  String?
  saleId         String?
  rating         Int
  comment        String
  reviewDate     DateTime     @default(now())
  isPublic       Boolean      @default(true)
  isVerified     Boolean      @default(false)
  response       String?
  responseDate   DateTime?
}

// ======= PROJECT MANAGEMENT =======

model Project {
  id            String      @id @default(cuid())
  development   Development @relation(fields: [developmentId], references: [id])
  developmentId String
  name          String
  description   String
  status        String

  plannedStartDate DateTime
  plannedEndDate   DateTime
  actualStartDate  DateTime?
  actualEndDate    DateTime?

  projectManager      User    @relation("ProjectManagerRelation", fields: [projectManagerId], references: [id])
  projectManagerId    String
  assignedCertifierId String?

  completionPercentage Float  @default(0)
  constructionStage    String

  createdBy  String
  created    DateTime @default(now())
  updated    DateTime @updatedAt
  isArchived Boolean  @default(false)

  teams            Team[]
  phases           ProjectPhase[]
  milestones       ProjectMilestone2[]
  risks            ProjectRisk[]
  issues           ProjectIssue[]
  tasks            ProjectTask[]
  constructionLogs ConstructionLog[]
  inspections      Inspection[]
  updates          ProjectUpdate[]
  meetings         Meeting[]
  healthAndSafety  HealthAndSafetyPlan?
}

model ProjectPhase {
  id                   String    @id @default(cuid())
  project              Project   @relation(fields: [projectId], references: [id])
  projectId            String
  name                 String
  description          String
  orderIndex           Int
  status               String
  plannedStartDate     DateTime
  plannedEndDate       DateTime
  actualStartDate      DateTime?
  actualEndDate        DateTime?
  completionPercentage Float     @default(0)
  documentIds          String // JSON array for SQLite compatibility

  milestones   ProjectMilestone2[]
  tasks        ProjectTask[]
  dependencies ProjectPhaseDependency[] @relation("PhaseDependsOn")
  dependents   ProjectPhaseDependency[] @relation("PhaseDependedOnBy")
}

model ProjectPhaseDependency {
  id          String       @id @default(cuid())
  phase       ProjectPhase @relation("PhaseDependsOn", fields: [phaseId], references: [id])
  phaseId     String
  dependsOn   ProjectPhase @relation("PhaseDependedOnBy", fields: [dependsOnId], references: [id])
  dependsOnId String
  type        String

  @@unique([phaseId, dependsOnId])
}

model ProjectMilestone2 {
  id                 String        @id @default(cuid())
  project            Project       @relation(fields: [projectId], references: [id])
  projectId          String
  phase              ProjectPhase? @relation(fields: [phaseId], references: [id])
  phaseId            String?
  name               String
  description        String
  plannedDate        DateTime
  actualDate         DateTime?
  status             String
  isKeyMilestone     Boolean       @default(false)
  notifyStakeholders Boolean       @default(true)
  responsiblePartyId String
  verificationMethod String
  completionCriteria String // JSON array for SQLite compatibility
  documentIds        String // JSON array for SQLite compatibility

  dependencies ProjectMilestoneDependency2[] @relation("MilestoneDependsOn")
  dependents   ProjectMilestoneDependency2[] @relation("MilestoneDependedOnBy")
}

model ProjectMilestoneDependency2 {
  id          String            @id @default(cuid())
  milestone   ProjectMilestone2 @relation("MilestoneDependsOn", fields: [milestoneId], references: [id])
  milestoneId String
  dependsOn   ProjectMilestone2 @relation("MilestoneDependedOnBy", fields: [dependsOnId], references: [id])
  dependsOnId String

  @@unique([milestoneId, dependsOnId])
}

model ProjectTask {
  id                 String        @id @default(cuid())
  title              String
  description        String
  project            Project       @relation(fields: [projectId], references: [id])
  projectId          String
  phase              ProjectPhase? @relation(fields: [phaseId], references: [id])
  phaseId            String?
  status             String
  priority           String
  assignedTo         User          @relation("AssignedTasksRelation", fields: [assignedToId], references: [id])
  assignedToId       String
  createdBy          User          @relation("CreatedTasksRelation", fields: [createdById], references: [id])
  createdById        String
  plannedStartDate   DateTime
  plannedEndDate     DateTime
  actualStartDate    DateTime?
  actualEndDate      DateTime?
  estimatedHours     Float
  actualHours        Float?
  progressPercentage Float         @default(0)
  relatedTo          Json?
  tags               String // JSON array for SQLite compatibility
  created            DateTime      @default(now())
  updated            DateTime      @updatedAt
  isOnCriticalPath   Boolean       @default(false)

  dependencies  ProjectTaskDependency[] @relation("TaskDependsOn")
  dependents    ProjectTaskDependency[] @relation("TaskDependedOnBy")
  subtasks      ProjectTask[]           @relation("SubtaskRelation")
  parentTask    ProjectTask?            @relation("SubtaskRelation", fields: [parentTaskId], references: [id])
  parentTaskId  String?
  comments      TaskComment[]
  attachmentIds String // JSON array for SQLite compatibility
}

model ProjectTaskDependency {
  id          String      @id @default(cuid())
  task        ProjectTask @relation("TaskDependsOn", fields: [taskId], references: [id])
  taskId      String
  dependsOn   ProjectTask @relation("TaskDependedOnBy", fields: [dependsOnId], references: [id])
  dependsOnId String

  @@unique([taskId, dependsOnId])
}

model TaskComment {
  id            String      @id @default(cuid())
  task          ProjectTask @relation(fields: [taskId], references: [id])
  taskId        String
  userId        String
  content       String
  timestamp     DateTime    @default(now())
  attachmentIds String // JSON array for SQLite compatibility
  mentions      String // JSON array for SQLite compatibility
  edited        Boolean     @default(false)
  editedAt      DateTime?
}

model ProjectRisk {
  id                     String   @id @default(cuid())
  project                Project  @relation(fields: [projectId], references: [id])
  projectId              String
  title                  String
  description            String
  category               String
  probability            String
  impact                 String
  severity               Int
  status                 String
  ownerId                String
  identifiedDate         DateTime @default(now())
  identifiedById         String
  lastUpdated            DateTime @updatedAt
  updatedById            String
  mitigationStrategy     String
  mitigationTaskIds      String // JSON array for SQLite compatibility
  contingencyPlan        String
  contingencyBudget      Float?
  earlyWarningIndicators String // JSON array for SQLite compatibility
  affectedAreas          String // JSON array for SQLite compatibility
  riskRegisterRanking    Int
  isArchived             Boolean  @default(false)
}

model ProjectIssue {
  id                   String    @id @default(cuid())
  project              Project   @relation(fields: [projectId], references: [id])
  projectId            String
  title                String
  description          String
  category             String
  severity             String
  status               String
  priority             String
  reportedDate         DateTime  @default(now())
  reportedById         String
  assignedToId         String
  dueDate              DateTime?
  resolvedDate         DateTime?
  resolutionDetails    String?
  impact               String
  rootCause            String?
  preventativeMeasures String?
  relatedRiskIds       String // JSON array for SQLite compatibility
  resolutionTaskIds    String // JSON array for SQLite compatibility
  affectedUnitIds      String // JSON array for SQLite compatibility
  documentIds          String // JSON array for SQLite compatibility
  isEscalated          Boolean   @default(false)
  escalationLevel      Int?
  escalatedToId        String?

  comments IssueComment[]
}

model IssueComment {
  id            String       @id @default(cuid())
  issue         ProjectIssue @relation(fields: [issueId], references: [id])
  issueId       String
  userId        String
  content       String
  timestamp     DateTime     @default(now())
  attachmentIds String // JSON array for SQLite compatibility
  isInternal    Boolean      @default(false)
  edited        Boolean      @default(false)
  editedAt      DateTime?
}

model ConstructionLog {
  id                 String    @id @default(cuid())
  project            Project   @relation(fields: [projectId], references: [id])
  projectId          String
  date               DateTime  @default(now())
  authorId           String
  weather            Json
  crews              Json[]
  equipment          Json[]
  workCompleted      Json[]
  materials          Json[]
  delays             Json[]
  visitors           Json[]
  safetyIncidents    Json[]
  qualityIssues      Json[]
  notes              String
  photoIds           String // JSON array for SQLite compatibility
  nextDayPlan        String
  issues             String // JSON array for SQLite compatibility
  submittedTimestamp DateTime  @default(now())
  approvedById       String?
  approvedTimestamp  DateTime?
}

model Inspection {
  id                   String    @id @default(cuid())
  project              Project   @relation(fields: [projectId], references: [id])
  projectId            String
  type                 String
  inspectorId          String
  inspectorRole        String
  scheduled            DateTime
  completed            DateTime?
  location             String
  unitId               String?
  status               String
  result               String?
  notes                String
  photoIds             String // JSON array for SQLite compatibility
  documentIds          String // JSON array for SQLite compatibility
  followUpRequired     Boolean   @default(false)
  followUpDate         DateTime?
  followUpInspectionId String?
  isReinspection       Boolean   @default(false)
  previousInspectionId String?
  created              DateTime  @default(now())
  createdById          String
  updated              DateTime  @updatedAt
  updatedById          String

  findings InspectionFinding[]
}

model InspectionFinding {
  id                   String     @id @default(cuid())
  inspection           Inspection @relation(fields: [inspectionId], references: [id])
  inspectionId         String
  category             String
  description          String
  location             String
  severity             String
  action               String
  photoIds             String // JSON array for SQLite compatibility
  assignedToId         String?
  dueDate              DateTime?
  status               String
  closedDate           DateTime?
  closedById           String?
  verificationRequired Boolean    @default(false)
  verifiedById         String?
  verifiedDate         DateTime?
}

model ProjectUpdate {
  id                   String   @id @default(cuid())
  project              Project  @relation(fields: [projectId], references: [id])
  projectId            String
  title                String
  content              String
  authorId             String
  timestamp            DateTime @default(now())
  type                 String
  visibleTo            String // JSON array for SQLite compatibility
  attachmentIds        String // JSON array for SQLite compatibility
  affectedPhaseIds     String // JSON array for SQLite compatibility
  affectedMilestoneIds String // JSON array for SQLite compatibility
  tags                 String // JSON array for SQLite compatibility
}

model Meeting {
  id                 String   @id @default(cuid())
  project            Project  @relation(fields: [projectId], references: [id])
  projectId          String
  title              String
  type               String
  date               DateTime
  startTime          String
  endTime            String
  location           String
  isVirtual          Boolean  @default(false)
  virtualMeetingLink String?
  organizerId        String
  recurrence         Json?
  documentIds        String // JSON array for SQLite compatibility
  created            DateTime @default(now())
  updated            DateTime @updatedAt
  status             String

  attendees MeetingAttendee[]
  agenda    AgendaItem[]
  minutes   MeetingMinutes?
}

model MeetingAttendee {
  id        String   @id @default(cuid())
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  meetingId String
  userId    String
  required  Boolean  @default(true)
  attended  Boolean?
}

model AgendaItem {
  id          String   @id @default(cuid())
  meeting     Meeting  @relation(fields: [meetingId], references: [id])
  meetingId   String
  topic       String
  description String?
  presenterId String
  duration    Int
  order       Int
  documentIds String // JSON array for SQLite compatibility
  status      String
}

model MeetingMinutes {
  id            String    @id @default(cuid())
  meeting       Meeting   @relation(fields: [meetingId], references: [id])
  meetingId     String    @unique
  attendees     String // JSON array for SQLite compatibility
  absentees     String // JSON array for SQLite compatibility
  discussions   Json[]
  approvedById  String?
  approvedDate  DateTime?
  distributedOn DateTime?
  distributedTo String // JSON array for SQLite compatibility

  actionItems MeetingActionItem[]
}

model MeetingActionItem {
  id            String         @id @default(cuid())
  minutes       MeetingMinutes @relation(fields: [minutesId], references: [id])
  minutesId     String
  description   String
  assignedToId  String
  dueDate       DateTime
  priority      String
  status        String
  completedDate DateTime?
  notes         String?
  relatedTaskId String?
}

model HealthAndSafetyPlan {
  id                  String   @id @default(cuid())
  project             Project  @relation(fields: [projectId], references: [id])
  projectId           String   @unique
  documentUrl         String
  version             String
  approvedById        String
  approvedDate        DateTime
  lastReviewDate      DateTime
  nextReviewDate      DateTime
  responsiblePersonId String
  riskAssessmentIds   String // JSON array for SQLite compatibility

  emergencyContacts EmergencyContact[]
  safetyInspections SafetyInspection[]
  incidents         SafetyIncident[]
  trainingRecords   TrainingRecord[]
  toolboxTalks      ToolboxTalk[]
}

model EmergencyContact {
  id                  String              @id @default(cuid())
  healthAndSafetyPlan HealthAndSafetyPlan @relation(fields: [planId], references: [id])
  planId              String
  name                String
  role                String
  phoneNumber         String
  email               String
  company             String?
  isOnSite            Boolean             @default(false)
}

model SafetyInspection {
  id                  String              @id @default(cuid())
  healthAndSafetyPlan HealthAndSafetyPlan @relation(fields: [planId], references: [id])
  planId              String
  date                DateTime
  inspectorId         String
  location            String
  type                String
  items               Json[]
  issues              Json[]
  score               Int?
  notes               String
  signature           String
  documentIds         String // JSON array for SQLite compatibility
}

model SafetyIncident {
  id                        String              @id @default(cuid())
  healthAndSafetyPlan       HealthAndSafetyPlan @relation(fields: [planId], references: [id])
  planId                    String
  date                      DateTime
  time                      String
  location                  String
  type                      String
  description               String
  involved                  String // JSON array for SQLite compatibility
  witnesses                 String // JSON array for SQLite compatibility
  injuries                  Json[]
  immediateActions          String
  rootCause                 String?
  preventativeMeasures      String?
  reportedById              String
  reportedDate              DateTime
  reportNumber              String
  status                    String
  investigationFindings     String?
  correctiveActions         Json[]
  documentIds               String // JSON array for SQLite compatibility
  reportedToAuthorities     Boolean             @default(false)
  reportedToAuthoritiesDate DateTime?
  authorityReference        String?
}

model TrainingRecord {
  id                  String              @id @default(cuid())
  healthAndSafetyPlan HealthAndSafetyPlan @relation(fields: [planId], references: [id])
  planId              String
  trainingType        String
  description         String
  trainer             String
  trainingDate        DateTime
  expiryDate          DateTime?
  attendees           Json[]
  documentIds         String // JSON array for SQLite compatibility
  notes               String?
}

model ToolboxTalk {
  id                  String              @id @default(cuid())
  healthAndSafetyPlan HealthAndSafetyPlan @relation(fields: [planId], references: [id])
  planId              String
  topic               String
  presenterId         String
  date                DateTime
  duration            Int
  location            String
  content             String
  attendees           String // JSON array for SQLite compatibility
  signatures          String // JSON array for SQLite compatibility
  documentIds         String // JSON array for SQLite compatibility
  notes               String?
}

// ======= MARKETING =======

model MarketingCampaign {
  id            String      @id @default(cuid())
  name          String
  development   Development @relation(fields: [developmentId], references: [id])
  developmentId String
  status        String

  description     String
  targetAudience  String
  objectives      String // JSON array for SQLite compatibility
  successCriteria String // JSON array for SQLite compatibility

  startDate      DateTime
  endDate        DateTime?
  plannedEndDate DateTime

  budget      Float
  actualSpend Float @default(0)

  performance Json

  createdById   String
  assignedToIds String // JSON array for SQLite compatibility
  approvedById  String?
  created       DateTime @default(now())
  updated       DateTime @updatedAt
  notes         String?
  tags          String // JSON array for SQLite compatibility

  channels       MarketingChannel[]
  activities     MarketingActivity[]
  creativeAssets CreativeAsset[]
  leads          Lead[]
}

model MarketingChannel {
  id         String            @id @default(cuid())
  campaign   MarketingCampaign @relation(fields: [campaignId], references: [id])
  campaignId String
  name       String
  type       String
  status     String

  budget      Float
  actualSpend Float @default(0)

  impressions       Int   @default(0)
  clicks            Int?
  inquiries         Int   @default(0)
  cost              Float @default(0)
  costPerInquiry    Float @default(0)
  costPerImpression Float @default(0)

  startDate     DateTime
  endDate       DateTime?
  trackingCodes String // JSON array for SQLite compatibility
  trackingUrls  String // JSON array for SQLite compatibility

  platform        String?
  targetAudience  String?
  audienceSize    Int?
  geographicFocus String // JSON array for SQLite compatibility

  notes String?
  tags  String // JSON array for SQLite compatibility

  creativeAssets CreativeAsset[]
  activities     MarketingActivity[]
}

model MarketingActivity {
  id          String            @id @default(cuid())
  campaign    MarketingCampaign @relation(fields: [campaignId], references: [id])
  campaignId  String
  channel     MarketingChannel  @relation(fields: [channelId], references: [id])
  channelId   String
  name        String
  description String
  type        String
  status      String

  plannedStartDate DateTime
  plannedEndDate   DateTime
  actualStartDate  DateTime?
  actualEndDate    DateTime?

  budget      Float
  actualSpend Float @default(0)

  assignedToIds   String // JSON array for SQLite compatibility
  externalVendors String // JSON array for SQLite compatibility

  metrics Json?
  results String?

  notes   String?
  created DateTime @default(now())
  updated DateTime @updatedAt

  creativeAssets CreativeAsset[]
}

model CreativeAsset {
  id          String  @id @default(cuid())
  name        String
  type        String
  url         String
  fileType    String
  description String?

  usedIn      Json
  impressions Int?
  clicks      Int?

  createdBy     String
  designer      String?
  agency        String?
  creationDate  DateTime
  expiryDate    DateTime?
  versionNumber String

  status            String
  approvedById      String?
  approvedDate      DateTime?
  rightsInformation String?
  usage             String
  usageRights       String?

  tags         String // JSON array for SQLite compatibility
  dimensions   String?
  size         Int?
  thumbnailUrl String?

  campaigns  MarketingCampaign[]
  channels   MarketingChannel[]
  activities MarketingActivity[]
}

model Lead {
  id          String             @id @default(cuid())
  source      String
  campaign    MarketingCampaign? @relation(fields: [campaignId], references: [id])
  campaignId  String?
  channel     String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmContent  String?
  utmTerm     String?

  firstName String
  lastName  String
  email     String
  phone     String?
  address   String?

  status        String
  type          String
  priorityScore Int     @default(0)
  assignedTo    User?   @relation("AssignedLeads", fields: [assignedToId], references: [id])
  assignedToId  String?

  interestedInDevelopmentIds String // JSON array for SQLite compatibility
  interestedInUnitIds        String // JSON array for SQLite compatibility
  propertyType               String // JSON array for SQLite compatibility
  bedrooms                   Int[]
  budget                     Json?
  desiredMoveInDate          DateTime?

  firstContactDate DateTime  @default(now())
  lastContactDate  DateTime?
  nextFollowUpDate DateTime?
  documentIds      String // JSON array for SQLite compatibility
  notes            String // JSON array for SQLite compatibility

  convertedToSaleId String?
  conversionDate    DateTime?

  created DateTime @default(now())
  updated DateTime @updatedAt
  tags    String // JSON array for SQLite compatibility

  statusHistory LeadStatusHistory[]
  interactions  LeadInteraction[]
  viewings      Viewing[]
}

model LeadStatusHistory {
  id        String   @id @default(cuid())
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    String
  status    String
  timestamp DateTime @default(now())
  note      String?
  userId    String
}

model LeadInteraction {
  id        String   @id @default(cuid())
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    String
  type      String
  direction String
  channel   String
  date      DateTime @default(now())
  userId    String

  subject     String?
  content     String
  duration    Int?
  documentIds String // JSON array for SQLite compatibility
  location    String?

  outcome              String?
  followUpRequired     Boolean   @default(false)
  followUpDate         DateTime?
  followUpAssignedToId String?

  sentiment String?
  tags      String // JSON array for SQLite compatibility
}

model Viewing {
  id            String      @id @default(cuid())
  lead          Lead        @relation(fields: [leadId], references: [id])
  leadId        String
  development   Development @relation(fields: [developmentId], references: [id])
  developmentId String
  units         Unit[]

  date      DateTime
  startTime String
  endTime   String
  duration  Int
  type      String
  status    String

  hostId    String
  attendees Json[]

  location                String
  meetingPoint            String?
  virtualMeetingLink      String?
  privateParkingAvailable Boolean @default(false)
  specialRequirements     String?

  feedback Json?
  followUp Json

  reminderSent         Boolean   @default(false)
  reminderSentDate     DateTime?
  confirmationSent     Boolean   @default(false)
  confirmationSentDate DateTime?

  created     DateTime @default(now())
  updated     DateTime @updatedAt
  createdById String
  notes       String?
}

// ======= SLP (Single Legal Pack) MODELS =======

model SLPProject {
  id              String           @id @default(uuid())
  name            String
  description     String?
  developerId     String
  status          ProjectStatus    @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  slpComponents   SLPComponent[]
  transactions    SLPTransaction[]
}

model SLPComponent {
  id              String           @id @default(uuid())
  projectId       String
  name            String
  description     String
  required        Boolean          @default(true)
  status          ComponentStatus  @default(PENDING)
  uploadedBy      String?
  uploadedAt      DateTime?
  reviewedBy      String?
  reviewedAt      DateTime?
  documentId      String?
  documentUrl     String?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  project         SLPProject       @relation(fields: [projectId], references: [id])
  changeHistory   SLPHistory[]
}

model SLPHistory {
  id              String           @id @default(uuid())
  componentId     String
  action          String
  performedBy     String
  performedAt     DateTime         @default(now())
  oldStatus       ComponentStatus?
  newStatus       ComponentStatus?
  notes           String?
  
  component       SLPComponent     @relation(fields: [componentId], references: [id])
}

model SLPTransaction {
  id              String           @id @default(uuid())
  projectId       String
  buyerId         String
  status          TransactionStatus @default(PENDING)
  startedAt       DateTime         @default(now())
  completedAt     DateTime?
  
  project         SLPProject       @relation(fields: [projectId], references: [id])
  milestones      SLPMilestone[]
  participants    SLPParticipant[]
}

model SLPMilestone {
  id              String           @id @default(uuid())
  transactionId   String
  name            String
  description     String?
  status          MilestoneStatus  @default(PENDING)
  dueDate         DateTime?
  completedAt     DateTime?
  
  transaction     SLPTransaction   @relation(fields: [transactionId], references: [id])
}

model SLPParticipant {
  id              String           @id @default(uuid())
  transactionId   String
  userId          String
  role            ParticipantRole
  joinedAt        DateTime         @default(now())
  
  transaction     SLPTransaction   @relation(fields: [transactionId], references: [id])
}

// ======= INVOICE MANAGEMENT =======

model Invoice {
  id              String        @id @default(cuid())
  number          String        @unique
  type            InvoiceType
  status          InvoiceStatus @default(DRAFT)
  
  // Client/Vendor Information
  clientId        String?
  clientName      String
  clientEmail     String?
  clientAddress   String?
  
  // Project Association
  projectId       String?
  project         Development?  @relation("InvoiceProject", fields: [projectId], references: [id])
  developmentId   String?
  development     Development?  @relation("InvoiceDevelopment", fields: [developmentId], references: [id])
  
  // Financial Details
  subtotal        Float
  taxRate         Float?
  taxAmount       Float?
  totalAmount     Float
  currency        CurrencyCode  @default(EUR)
  
  // Dates
  issueDate       DateTime      @default(now())
  dueDate         DateTime
  paidDate        DateTime?
  
  // Content
  description     String
  notes           String?
  termsConditions String?
  
  // Payment Information
  paymentMethod   PaymentMethod?
  paymentReference String?
  
  // Metadata
  createdBy       String
  createdById     User?         @relation("InvoiceCreator", fields: [createdBy], references: [id])
  approvedBy      String?
  approvedById    User?         @relation("InvoiceApprover", fields: [approvedBy], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  lineItems       InvoiceLineItem[]
  payments        InvoicePayment[]
  documents       Document[]    @relation("InvoiceDocuments")
  
  @@map("invoices")
}

model InvoiceLineItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  
  description String
  quantity    Float
  unitPrice   Float
  lineTotal   Float
  
  // Optional categorization
  category    String?
  taxRate     Float?
  
  @@map("invoice_line_items")
}

model InvoicePayment {
  id              String          @id @default(cuid())
  invoice         Invoice         @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId       String
  
  amount          Float
  currency        CurrencyCode    @default(EUR)
  paymentDate     DateTime        @default(now())
  paymentMethod   PaymentMethod
  
  reference       String?
  notes           String?
  
  // Status tracking
  status          TransactionStatus @default(COMPLETED)
  
  // Metadata
  recordedBy      String
  recordedById    User?           @relation("PaymentRecorder", fields: [recordedBy], references: [id])
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("invoice_payments")
}

// ======= UserRole enum mapping =======
model UserRoleMapping {
  id     String @id @default(cuid())
  userId String
  role   String

  @@unique([userId, role])
}