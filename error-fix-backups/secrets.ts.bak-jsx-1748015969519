import { SecretsManagerClient, GetSecretValueCommand } from '@aws-sdk/client-secrets-manager';
import { config } from './env';

// AWS Secrets Manager client
const secretsClient = new SecretsManagerClient({
  region: config.aws.region,
  credentials: {
    accessKeyId: config.aws.accessKeyId,
    secretAccessKey: config.aws.secretAccessKey,
  },
});

// Cache for secrets
const secretsCache = new Map<string, { value: any; expiresAt: number }>();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutes

/**
 * Retrieve a secret from AWS Secrets Manager with caching
 */
export async function getSecret(secretName: string): Promise<any> {
  // Check cache first
  const cached = secretsCache.get(secretName);
  if (cached && cached.expiresAt > Date.now()) {
    return cached.value;
  }

  try {
    const command = new GetSecretValueCommand({ SecretId: secretName });
    const response = await secretsClient.send(command);
    
    let secretValue: any;
    if (response.SecretString) {
      try {
        secretValue = JSON.parse(response.SecretString);
      } catch {
        secretValue = response.SecretString;
      }
    } else if (response.SecretBinary) {
      const buff = Buffer.from(response.SecretBinary);
      secretValue = buff.toString('utf-8');
    }
    
    // Cache the secret
    secretsCache.set(secretName, {
      value: secretValue,
      expiresAt: Date.now() + CACHE_TTL,
    });
    
    return secretValue;
  } catch (error) {
    console.error(`Failed to retrieve secret ${secretName}:`, error);
    throw error;
  }
}

/**
 * Clear the secrets cache
 */
export function clearSecretsCache(): void {
  secretsCache.clear();
}

/**
 * Get database credentials from Secrets Manager
 */
export async function getDatabaseCredentials() {
  if (!config.isProduction) {
    return {
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD,
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      database: process.env.DB_NAME,
    };
  }
  
  return getSecret('prop-ie/database/credentials');
}

/**
 * Get API keys from Secrets Manager
 */
export async function getApiKeys() {
  if (!config.isProduction) {
    return {
      stripe: process.env.STRIPE_SECRET_KEY,
      google: {
        clientId: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      },
    };
  }
  
  return getSecret('prop-ie/api-keys');
}