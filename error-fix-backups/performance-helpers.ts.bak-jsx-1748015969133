/**
 * Performance testing utilities
 */

import { render } from '@testing-library/react';
import React from 'react';

// Measure component render time
export const measureRender = (component: () => React.ReactElement) => {
  let renderCount = 0;
  let startTime = 0;
  let endTime = 0;
  
  const MeasuredComponent = () => {
    React.useEffect(() => {
      renderCount++;
      if (renderCount === 1) {
        startTime = performance.now();
      }
      endTime = performance.now();
    });
    
    return component();
  };
  
  const { rerender } = render(<MeasuredComponent />);
  
  return {
    duration: endTime - startTime,
    reRenders: renderCount - 1,
    rerender: () => rerender(<MeasuredComponent />),
  };
};

// Measure async operation time
export const measureAsync = async <T>(operation: () => Promise<T>) => {
  const startTime = performance.now();
  const result = await operation();
  const endTime = performance.now();
  
  return {
    result,
    duration: endTime - startTime,
  };
};

// Memory usage tracking
export const trackMemoryUsage = (duration: number = 5000) => {
  const measurements: NodeJS.MemoryUsage[] = [];
  const interval = 100; // Sample every 100ms
  
  const intervalId = setInterval(() => {
    measurements.push(process.memoryUsage());
  }, interval);
  
  return new Promise<{
    measurements: NodeJS.MemoryUsage[];
    analysis: {
      heapGrowth: number;
      externalGrowth: number;
      averageHeapUsed: number;
    };
  }>((resolve) => {
    setTimeout(() => {
      clearInterval(intervalId);
      
      const first = measurements[0];
      const last = measurements[measurements.length - 1];
      
      const analysis = {
        heapGrowth: last.heapUsed - first.heapUsed,
        externalGrowth: last.external - first.external,
        averageHeapUsed: measurements.reduce((sum, m) => sum + m.heapUsed, 0) / measurements.length,
      };
      
      resolve({ measurements, analysis });
    }, duration);
  });
};

// Performance observer wrapper
export const observePerformance = (entryTypes: string[]) => {
  const entries: PerformanceEntry[] = [];
  
  const observer = new PerformanceObserver((list) => {
    entries.push(...list.getEntries());
  });
  
  observer.observe({ entryTypes });
  
  return {
    getEntries: () => entries,
    stop: () => observer.disconnect(),
  };
};

// Network request timing
export const measureNetworkRequest = async (url: string, options?: RequestInit) => {
  const startTime = performance.now();
  const response = await fetch(url, options);
  const endTime = performance.now();
  
  const size = parseInt(response.headers.get('content-length') || '0');
  
  return {
    duration: endTime - startTime,
    status: response.status,
    size,
    throughput: size / ((endTime - startTime) / 1000), // bytes per second
  };
};

// React profiler wrapper
export const ProfilerWrapper: React.FC<{
  id: string;
  onRender: (id: string, phase: string, actualDuration: number) => void;
  children: React.ReactNode;
}> = ({ id, onRender, children }) => {
  return (
    <React.Profiler id={id} onRender={onRender}>
      {children}
    </React.Profiler>
  );
};

// Bundle size analyzer mock
export const analyzeBundleSize = () => {
  // This would be replaced with actual webpack-bundle-analyzer data
  return {
    totalSize: 1.2 * 1024 * 1024, // 1.2MB
    chunks: {
      main: 250 * 1024,
      vendor: 500 * 1024,
      runtime: 50 * 1024,
    },
    recommendations: [
      'Consider code splitting for large components',
      'Lazy load non-critical features',
      'Use dynamic imports for route-based splitting',
    ],
  };
};

// Web vitals measurement
export const measureWebVitals = () => {
  const vitals = {
    lcp: 0, // Largest Contentful Paint
    fid: 0, // First Input Delay
    cls: 0, // Cumulative Layout Shift
    fcp: 0, // First Contentful Paint
    ttfb: 0, // Time to First Byte
  };
  
  // LCP
  new PerformanceObserver((list) => {
    const entries = list.getEntries();
    vitals.lcp = entries[entries.length - 1].startTime;
  }).observe({ entryTypes: ['largest-contentful-paint'] });
  
  // FID
  new PerformanceObserver((list) => {
    const entries = list.getEntries();
    vitals.fid = entries[0].processingStart - entries[0].startTime;
  }).observe({ entryTypes: ['first-input'] });
  
  // CLS
  new PerformanceObserver((list) => {
    for (const entry of list.getEntries()) {
      if (!(entry as any).hadRecentInput) {
        vitals.cls += (entry as any).value;
      }
    }
  }).observe({ entryTypes: ['layout-shift'] });
  
  // FCP
  new PerformanceObserver((list) => {
    vitals.fcp = list.getEntries()[0].startTime;
  }).observe({ entryTypes: ['paint'] });
  
  // TTFB
  new PerformanceObserver((list) => {
    const navEntry = list.getEntries()[0] as PerformanceNavigationTiming;
    vitals.ttfb = navEntry.responseStart - navEntry.requestStart;
  }).observe({ entryTypes: ['navigation'] });
  
  return vitals;
};

// Database query performance
export const measureQuery = async (queryFn: () => Promise<any>) => {
  const startTime = process.hrtime.bigint();
  const result = await queryFn();
  const endTime = process.hrtime.bigint();
  
  const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds
  
  return {
    result,
    duration,
    slow: duration > 100, // Flag slow queries over 100ms
  };
};

// Cache hit rate measurement
export const measureCachePerformance = () => {
  let hits = 0;
  let misses = 0;
  
  return {
    recordHit: () => hits++,
    recordMiss: () => misses++,
    getStats: () => ({
      hits,
      misses,
      total: hits + misses,
      hitRate: hits / (hits + misses) || 0,
    }),
    reset: () => {
      hits = 0;
      misses = 0;
    },
  };
};