'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { 
  Home, 
  Bed, 
  Bath, 
  Square, 
  Check, 
  ChevronRight, 
  Lock, 
  ShoppingBag 
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/context/AuthContext';
import { BuyerJourney } from './BuyerJourney';

interface UnitDetailsProps {
  unitKey: string;
  unitData: {
    name: string;
    price: string;
    area: string;
    bedrooms: number;
    bathrooms: number;
    available: number;
    features: string[];
    schedule: Record<string, string>;
  };
  developmentId: string;
}

export function UnitDetails({ unitKey, unitData, developmentId }: UnitDetailsProps) {
  const { isAuthenticated, user } = useAuth();
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isReserved, setIsReserved] = useState(false);
  const [transactionId, setTransactionId] = useState<string | null>(null);

  const isSoldOut = unitData.available <= 0;
  const isVerified = isAuthenticated && user?.emailVerified;

  const handleBuyNow = () => {
    setIsDialogOpen(true);
  };

  const handleReservationComplete = (txnId: string) => {
    setTransactionId(txnId);
    setIsReserved(true);

    // In a real app, we would also update the available units count
    // For demo purposes, we're just showing the UI changes
  };

  return (
    <>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>{unitData.name} - Details</CardTitle>
          <div className="flex items-center mt-2">
            <Badge variant={unitData.available > 0 ? 'default' : 'secondary'}>
              {unitData.available > 0 ? `${unitData.available} Available` : 'Sold Out'}
            </Badge>
            <span className="ml-auto font-semibold text-lg">{unitData.price}</span>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-8">
            <div>
              <div className="aspect-w-16 aspect-h-12 mb-4">
                <div className="bg-gray-200 rounded-lg p-8 text-center">
                  <Home className="h-16 w-16 mx-auto text-gray-400" />
                </div>
              </div>

              <div className="flex items-center gap-4 text-sm mb-4">
                <div className="flex items-center gap-1">
                  <Bed className="h-4 w-4" />
                  <span>{unitData.bedrooms}</span>
                </div>
                <div className="flex items-center gap-1">
                  <Bath className="h-4 w-4" />
                  <span>{unitData.bathrooms}</span>
                </div>
                <div className="flex items-center gap-1">
                  <Square className="h-4 w-4" />
                  <span>{unitData.area}</span>
                </div>
              </div>

              <div className="space-y-2">
                <h4 className="font-semibold">Features:</h4>
                <ul className="space-y-1">
                  {unitData.features.map((feature, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <Check className="h-4 w-4 text-green-600" />
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            <div>
              <h3 className="font-semibold mb-4">Schedule of Accommodation</h3>
              <div className="space-y-3 mb-6">
                {Object.entries(unitData.schedule).map(([room, size]) => (
                  <div key={room} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                    <span className="font-medium">{room}</span>
                    <span className="text-gray-600">{size}</span>
                  </div>
                ))}
              </div>

              {isReserved ? (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                  <div className="flex items-center">
                    <Check className="h-5 w-5 text-green-600 mr-2" />
                    <p className="font-medium text-green-800">Unit Reserved Successfully!</p>
                  </div>
                  <p className="text-green-700 text-sm mt-1">Transaction ID: {transactionId}</p>
                </div>
              ) : (
                <Button 
                  onClick={handleBuyNow} 
                  disabled={isSoldOut} 
                  className="w-full" 
                  size="lg"
                >
                  {isSoldOut ? (
                    'Sold Out'
                  ) : (
                    <>
                      Buy It Now
                      <ShoppingBag className="ml-2 h-5 w-5" />
                    </>
                  )}
                </Button>
              )}

              <p className="text-sm text-gray-600 mt-3 flex items-center justify-center">
                <Lock className="h-4 w-4 mr-1" />
                Secure online purchase process
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Complete Your Purchase</DialogTitle>
          </DialogHeader>

          <BuyerJourney 
            developmentId={developmentId}
            unit={{
              key: unitKey,
              name: unitData.name,
              price: unitData.price,
              bedrooms: unitData.bedrooms,
              bathrooms: unitData.bathrooms,
              area: unitData.area,
              features: unitData.features,
              available: unitData.available
            }}
            onComplete={handleReservationComplete}
          />
        </DialogContent>
      </Dialog>
    </>
  );
}