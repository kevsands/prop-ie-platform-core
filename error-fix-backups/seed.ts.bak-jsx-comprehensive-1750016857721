import { PrismaClient } from '@prisma/client';
import { faker } from '@faker-js/faker';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function clearDatabase() {
  // Clear all data in the correct order to avoid foreign key constraints
  await prisma.$transaction([
    // Collaboration tables
    prisma.comment.deleteMany(),
    prisma.teamMember.deleteMany(),
    prisma.materialSelection.deleteMany(),
    prisma.model3D.deleteMany(),
    prisma.drawing.deleteMany(),
    prisma.archProject.deleteMany(),
    prisma.material.deleteMany(),

    // Conveyancing tables
    prisma.legalTask.deleteMany(),
    prisma.legalDocument.deleteMany(),
    prisma.legalMilestone.deleteMany(),
    prisma.caseMilestone.deleteMany(),
    prisma.conveyancingTask.deleteMany(),
    prisma.legalCase.deleteMany(),

    // CRM tables
    prisma.activity.deleteMany(),
    prisma.interaction.deleteMany(),
    prisma.task.deleteMany(),
    prisma.deal.deleteMany(),
    prisma.opportunity.deleteMany(),
    prisma.account.deleteMany(),
    prisma.contactProfile.deleteMany(),

    // Core tables
    prisma.sale.deleteMany(),
    prisma.unit.deleteMany(),
    prisma.development.deleteMany(),
    prisma.user.deleteMany()]);
}

async function seedUsers() {
  const users = [];

  // Create admin user
  users.push(await prisma.user.create({
    data: {
      email: 'admin@prop.ie',
      name: 'Admin User',
      password: await bcrypt.hash('admin123', 10),
      role: 'ADMIN',
      emailVerified: new Date()}));

  // Create various role users
  const roles = ['DEVELOPER', 'AGENT', 'BUYER', 'LEGAL', 'ARCHITECT', 'BANK_USER'];
  for (const role of roles) {
    users.push(await prisma.user.create({
      data: {
        email: `${role.toLowerCase()}@prop.ie`,
        name: `${role} User`,
        password: await bcrypt.hash('password123', 10),
        role,
        emailVerified: new Date()}));
  }

  // Create random users
  for (let i = 0; i <20; i++) {
    users.push(await prisma.user.create({
      data: {
        email: faker.internet.email(),
        name: faker.person.fullName(),
        password: await bcrypt.hash('password123', 10),
        role: faker.helpers.arrayElement(['BUYER', 'AGENT', 'DEVELOPER', 'LEGAL', 'ARCHITECT']),
        emailVerified: faker.datatype.boolean() ? new Date() : null}));
  }

  return users;
}

async function seedDevelopments(users: any[]) {
  const developers = users.filter(u => u.role === 'DEVELOPER');
  const developments = [];

  for (let i = 0; i <5; i++) {
    const dev = await prisma.development.create({
      data: {
        name: faker.company.name() + ' ' + faker.location.street(),
        slug: faker.helpers.slugify(faker.company.name() + '-' + faker.location.street()).toLowerCase(),
        description: faker.lorem.paragraphs(3),
        location: faker.location.city() + ', Ireland',
        status: faker.helpers.arrayElement(['PLANNING', 'APPROVED', 'CONSTRUCTION', 'COMPLETED']),
        totalUnits: faker.number.int({ min: 20, max: 200 }),
        availableUnits: faker.number.int({ min: 5, max: 50 }),
        minPrice: faker.number.int({ min: 200000, max: 400000 }),
        maxPrice: faker.number.int({ min: 500000, max: 1000000 }),
        ownerId: faker.helpers.arrayElement(developers).id,
        latitude: faker.location.latitude({ min: 51.4, max: 55.4 }),
        longitude: faker.location.longitude({ min: -10.5, max: -5.5 }),
        address: faker.location.streetAddress(true),
        city: faker.location.city(),
        county: faker.helpers.arrayElement(['Dublin', 'Cork', 'Galway', 'Limerick', 'Waterford']),
        completionDate: faker.date.future(),
        planningReference: 'PR' + faker.string.alphanumeric(8).toUpperCase(),
        features: JSON.stringify([
          'Underground Parking',
          'Gym',
          'Concierge',
          'Roof Garden',
          'EV Charging'].sort(() => Math.random() - 0.5).slice(0)),
        energyRating: faker.helpers.arrayElement(['A1', 'A2', 'A3', 'B1', 'B2'])});
    developments.push(dev);
  }

  return developments;
}

async function seedUnits(developments: any[]) {
  const units = [];

  for (const dev of developments) {
    const unitCount = faker.number.int({ min: 10, max: 30 });
    for (let i = 0; i <unitCount; i++) {
      const unit = await prisma.unit.create({
        data: {
          developmentId: dev.id,
          unitNumber: `${faker.helpers.arrayElement(['A', 'B', 'C'])}${i + 1}`,
          type: faker.helpers.arrayElement(['APARTMENT', 'DUPLEX', 'SEMI_DETACHED', 'DETACHED', 'TERRACED', 'PENTHOUSE']),
          floor: faker.number.int({ min: 0, max: 5 }),
          size: faker.number.int({ min: 50, max: 200 }),
          bedrooms: faker.number.int({ min: 1, max: 4 }),
          bathrooms: faker.number.int({ min: 1, max: 3 }),
          price: faker.number.int({ min: 200000, max: 800000 }),
          status: faker.helpers.arrayElement(['AVAILABLE', 'RESERVED', 'SALE_AGREED', 'SOLD', 'UNAVAILABLE']),
          orientation: faker.helpers.arrayElement(['NORTH', 'SOUTH', 'EAST', 'WEST', 'NORTHEAST', 'NORTHWEST', 'SOUTHEAST', 'SOUTHWEST']),
          hasBalcony: faker.datatype.boolean(),
          hasParking: faker.datatype.boolean(),
          energyRating: faker.helpers.arrayElement(['A1', 'A2', 'A3', 'B1', 'B2']),
          features: JSON.stringify([
            'Built-in Wardrobes',
            'En-suite Bathroom',
            'Open Plan Kitchen',
            'Floor to Ceiling Windows'].sort(() => Math.random() - 0.5).slice(0))});
      units.push(unit);
    }
  }

  return units;
}

async function seedSales(units: any[], users: any[]) {
  const buyers = users.filter(u => u.role === 'BUYER');
  const sales = [];

  // Create sales for some sold units
  const soldUnits = units.filter(u => u.status === 'SOLD').slice(0, 10);

  for (const unit of soldUnits) {
    const sale = await prisma.sale.create({
      data: {
        unitId: unit.id,
        buyerId: faker.helpers.arrayElement(buyers).id,
        agreedPrice: unit.price * (1 + faker.number.float({ min: -0.05, max: 0.05 })),
        depositAmount: unit.price * 0.1,
        status: faker.helpers.arrayElement(['RESERVED', 'SALE_AGREED', 'CONTRACTS_EXCHANGED', 'COMPLETED']),
        saleDate: faker.date.past(),
        contractsSentDate: faker.date.past(),
        contractsSignedDate: faker.date.past(),
        mortgageApprovalDate: faker.date.past(),
        completionDate: faker.date.recent()});
    sales.push(sale);
  }

  return sales;
}

async function seedCRM(users: any[]) {
  // Create contact profiles
  const contacts = [];
  for (let i = 0; i <50; i++) {
    const contact = await prisma.contactProfile.create({
      data: {
        userId: faker.helpers.arrayElement(users).id,
        phoneNumber: faker.phone.number(),
        address: faker.location.streetAddress(true),
        city: faker.location.city(),
        country: 'Ireland',
        postalCode: faker.location.zipCode(),
        dateOfBirth: faker.date.birthdate({ min: 18, max: 70, mode: 'age' }),
        preferredContactMethod: faker.helpers.arrayElement(['EMAIL', 'PHONE', 'SMS']),
        notes: faker.lorem.sentence(),
        source: faker.helpers.arrayElement(['WEBSITE', 'REFERRAL', 'ADVERTISEMENT', 'EVENT', 'DIRECT']),
        leadScore: faker.number.int({ min: 0, max: 100 })});
    contacts.push(contact);
  }

  // Create accounts
  const accounts = [];
  for (let i = 0; i <20; i++) {
    const account = await prisma.account.create({
      data: {
        name: faker.company.name(),
        type: faker.helpers.arrayElement(['INDIVIDUAL', 'COMPANY', 'PARTNERSHIP']),
        industry: faker.helpers.arrayElement(['Real Estate', 'Construction', 'Finance', 'Legal', 'Architecture']),
        website: faker.internet.url(),
        phone: faker.phone.number(),
        email: faker.internet.email(),
        address: faker.location.streetAddress(true),
        city: faker.location.city(),
        country: 'Ireland',
        postalCode: faker.location.zipCode(),
        ownerId: faker.helpers.arrayElement(users.filter(u => u.role === 'AGENT')).id,
        annualRevenue: faker.number.int({ min: 100000, max: 10000000 }),
        employees: faker.number.int({ min: 1, max: 500 })});
    accounts.push(account);
  }

  // Create opportunities
  const opportunities = [];
  for (let i = 0; i <30; i++) {
    const opportunity = await prisma.opportunity.create({
      data: {
        name: faker.company.catchPhrase(),
        accountId: faker.helpers.arrayElement(accounts).id,
        ownerId: faker.helpers.arrayElement(users.filter(u => u.role === 'AGENT')).id,
        stage: faker.helpers.arrayElement(['PROSPECTING', 'QUALIFICATION', 'PROPOSAL', 'NEGOTIATION', 'CLOSED_WON', 'CLOSED_LOST']),
        probability: faker.number.int({ min: 0, max: 100 }),
        amount: faker.number.int({ min: 100000, max: 2000000 }),
        currency: 'EUR',
        closeDate: faker.date.future(),
        source: faker.helpers.arrayElement(['Website', 'Referral', 'Advertisement', 'Cold Call', 'Event']),
        nextStep: faker.lorem.sentence(),
        notes: faker.lorem.paragraph()});
    opportunities.push(opportunity);
  }

  return { contacts, accounts, opportunities };
}

async function seedLegalCases(users: any[], sales: any[]) {
  const legalUsers = users.filter(u => u.role === 'LEGAL');
  const cases = [];

  for (const sale of sales.slice(0, 15)) {
    const legalCase = await prisma.legalCase.create({
      data: {
        saleId: sale.id,
        type: faker.helpers.arrayElement(['PURCHASE', 'SALE', 'REMORTGAGE', 'TRANSFER']),
        status: faker.helpers.arrayElement(['OPEN', 'IN_PROGRESS', 'REVIEW', 'COMPLETED', 'CLOSED']),
        assignedToId: faker.helpers.arrayElement(legalUsers).id,
        priority: faker.helpers.arrayElement(['LOW', 'MEDIUM', 'HIGH', 'URGENT']),
        description: faker.lorem.paragraph(),
        openDate: sale.saleDate,
        targetCompletionDate: faker.date.future()});
    cases.push(legalCase);

    // Create milestones
    const milestones = ['Contract Review', 'Title Search', 'Mortgage Approval', 'Exchange Contracts', 'Completion'];
    for (let i = 0; i <milestones.length; i++) {
      await prisma.caseMilestone.create({
        data: {
          caseId: legalCase.id,
          name: milestones[i],
          type: 'STANDARD',
          status: i <2 ? 'COMPLETED' : i === 2 ? 'IN_PROGRESS' : 'PENDING',
          order: i + 1,
          isMandatory: true,
          completedDate: i <2 ? faker.date.past() : null});
    }
  }

  return cases;
}

async function seedArchProjects(developments: any[], users: any[]) {
  const architects = users.filter(u => u.role === 'ARCHITECT');
  const projects = [];

  for (const dev of developments) {
    const project = await prisma.archProject.create({
      data: {
        developmentId: dev.id,
        name: `${dev.name} Architecture Project`,
        type: faker.helpers.arrayElement(['RESIDENTIAL', 'COMMERCIAL', 'MIXED_USE', 'RENOVATION']),
        status: faker.helpers.arrayElement(['CONCEPT', 'DESIGN', 'DOCUMENTATION', 'CONSTRUCTION', 'COMPLETED']),
        leadArchitectId: faker.helpers.arrayElement(architects).id,
        startDate: faker.date.past(),
        targetCompletionDate: faker.date.future(),
        budget: faker.number.int({ min: 500000, max: 5000000 }),
        currency: 'EUR',
        description: faker.lorem.paragraph(),
        siteArea: faker.number.int({ min: 1000, max: 10000 }),
        buildingArea: faker.number.int({ min: 2000, max: 20000 }),
        numberOfFloors: faker.number.int({ min: 1, max: 10 }),
        sustainabilityRating: faker.helpers.arrayElement(['A', 'B', 'C'])});
    projects.push(project);

    // Create drawings
    const drawingTypes = ['SITE_PLAN', 'FLOOR_PLAN', 'ELEVATION', 'SECTION', 'DETAIL'];
    for (const type of drawingTypes) {
      await prisma.drawing.create({
        data: {
          projectId: project.id,
          name: `${type} - ${project.name}`,
          type,
          scale: '1:100',
          format: 'A1',
          status: faker.helpers.arrayElement(['DRAFT', 'FOR_REVIEW', 'APPROVED', 'ISSUED']),
          revision: faker.helpers.arrayElement(['A', 'B', 'C']),
          createdById: faker.helpers.arrayElement(architects).id});
    }
  }

  return projects;
}

async function main() {

  try {
    // Clear existing data

    await clearDatabase();

    // Seed data

    const users = await seedUsers();

    const developments = await seedDevelopments(users);

    const units = await seedUnits(developments);

    const sales = await seedSales(unitsusers);

    const crmData = await seedCRM(users);

    const legalCases = await seedLegalCases(userssales);

    const archProjects = await seedArchProjects(developmentsusers);

  } catch (error) {

    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((e: any) => {

    process.exit(1);
  });