// Metrics utility functions for use in middleware

export interface MetricData {
  requestCount: number;
  errorCount: number;
  totalResponseTime: number;
  endpoints: Map<string, {
    count: number;
    totalTime: number;
    errors: number;
  }>;
  errorTypes: Map<string, number>;
  startTime: number;
}

export const metrics: MetricData = {
  requestCount: 0,
  errorCount: 0,
  totalResponseTime: 0,
  endpoints: new Map(),
  errorTypes: new Map(),
  startTime: Date.now()
};

export function recordMetric(
  method: string,
  path: string,
  statusCode: number,
  responseTime: number
) {
  metrics.requestCount++;
  metrics.totalResponseTime += responseTime;

  if (statusCode >= 400) {
    metrics.errorCount++;
    const errorType = statusCode.toString();
    metrics.errorTypes.set(
      errorType,
      (metrics.errorTypes.get(errorType) || 0) + 1
    );
  }

  const endpointKey = `${method}:${path}`;
  const endpoint = metrics.endpoints.get(endpointKey) || {
    count: 0,
    totalTime: 0,
    errors: 0
  };

  endpoint.count++;
  endpoint.totalTime += responseTime;
  if (statusCode >= 400) {
    endpoint.errors++;
  }

  metrics.endpoints.set(endpointKey, endpoint);
}