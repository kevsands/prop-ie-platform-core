"use client";

import React, { useState, useCallback } from 'react';
import { FiPlus, FiImage, FiFolder } from 'react-icons/fi';
import MediaUpload, { MediaFile } from './MediaUpload';
import MediaGallery from './MediaGallery';

export interface MediaCategory {
  id: string;
  name: string;
  files: MediaFile[];
}

export interface MediaManagerProps {
  categories?: MediaCategory[];
  defaultCategory?: string;
  onAddMedia?: (files: MediaFile[], categoryId: string) => void;
  onRemoveMedia?: (fileId: string, categoryId: string) => void;
  onAddCategory?: (category: MediaCategory) => void;
  onRemoveCategory?: (categoryId: string) => void;
  maxFiles?: number;
  maxSizeInMB?: number;
  allowedTypes?: string[];
  title?: string;
  className?: string;
}

const MediaManager: React.FC<MediaManagerProps> = ({
  categories = [
    { id: 'development-images', name: 'Development Images', files: [] },
    { id: 'floor-plans', name: 'Floor Plans', files: [] },
    { id: 'brochures', name: 'Brochures', files: [] }
  ],
  defaultCategory = 'development-images',
  onAddMedia,
  onRemoveMedia,
  onAddCategory,
  onRemoveCategory,
  maxFiles = 20,
  maxSizeInMB = 10,
  allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'],
  title = 'Media Management',
  className = ''}) => {
  const [activeCategory, setActiveCategory] = useState<string>(defaultCategory);
  const [uploadOpen, setUploadOpen] = useState<boolean>(false);
  const [mediaFiles, setMediaFiles] = useState<MediaFile[]>([]);
  const [newCategoryName, setNewCategoryName] = useState<string>('');
  const [showCategoryForm, setShowCategoryForm] = useState<boolean>(false);
  
  // Get active category files
  const getActiveCategoryFiles = (): MediaFile[] => {
    const category = categories.find(cat => cat.id === activeCategory);
    return category?.files || [];
  };
  
  // Handle file upload
  const handleUploadFiles = useCallback((files: MediaFile[]) => {
    setMediaFiles(files);
  }, []);
  
  // Handle save files to category
  const handleSaveFiles = useCallback(() => {
    if (onAddMedia && mediaFiles.length > 0) {
      onAddMedia(mediaFiles, activeCategory);
      setMediaFiles([]);
      setUploadOpen(false);
    }
  }, [mediaFiles, activeCategory, onAddMedia]);
  
  // Handle remove file
  const handleRemoveFile = useCallback((fileId: string) => {
    if (onRemoveMedia) {
      onRemoveMedia(fileId, activeCategory);
    }
  }, [activeCategory, onRemoveMedia]);
  
  // Handle add category
  const handleAddCategory = useCallback(() => {
    if (onAddCategory && newCategoryName.trim() !== '') {
      const newCategory: MediaCategory = {
        id: `category-${Date.now()}`,
        name: newCategoryName.trim(),
        files: []
      };
      onAddCategory(newCategory);
      setNewCategoryName('');
      setShowCategoryForm(false);
    }
  }, [newCategoryName, onAddCategory]);
  
  return (
    <div className={`media-manager ${className}`}>
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="border-b border-gray-200 p-4">
          <h2 className="text-xl font-semibold text-gray-900">{title}</h2>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-4 min-h-[500px]">
          {/* Category Sidebar */}
          <div className="md:col-span-1 border-r border-gray-200 bg-gray-50 p-4">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-gray-700">Categories</h3>
              <button
                type="button"
                onClick={() => setShowCategoryForm(!showCategoryForm)}
                className="text-[#2B5273] hover:text-[#1E3142]"
              >
                <FiPlus size={20} />
              </button>
            </div>
            
            {/* Add Category Form */}
            {showCategoryForm && (
              <div className="mb-4 p-3 bg-white rounded-md shadow-sm">
                <label htmlFor="category-name" className="block text-sm font-medium text-gray-700 mb-1">
                  Category Name
                </label>
                <input
                  type="text"
                  id="category-name"
                  value={newCategoryName}
                  onChange={(e) => setNewCategoryName(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#2B5273] focus:border-transparent"
                  placeholder="Enter category name"
                />
                <div className="mt-3 flex space-x-2">
                  <button
                    type="button"
                    onClick={handleAddCategory}
                    className="px-3 py-1 bg-[#2B5273] text-white rounded-md hover:bg-[#1E3142] text-sm"
                  >
                    Add
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setShowCategoryForm(false);
                      setNewCategoryName('');
                    }}
                    className="px-3 py-1 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 text-sm"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            )}
            
            {/* Category List */}
            <nav className="space-y-1">
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => {
                    setActiveCategory(category.id);
                    setUploadOpen(false);
                  }}
                  className={`flex items-center px-3 py-2 text-sm font-medium rounded-md w-full ${
                    activeCategory === category.id
                      ? 'bg-[#2B5273] text-white'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  {category.id === 'floor-plans' ? (
                    <FiFolder className="mr-3 h-5 w-5" />
                  ) : (
                    <FiImage className="mr-3 h-5 w-5" />
                  )}
                  <span className="truncate">
                    {category.name} {category.files.length > 0 && `(${category.files.length})`}
                  </span>
                </button>
              ))}
            </nav>
          </div>
          
          {/* Main Content Area */}
          <div className="md:col-span-3 p-6">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-lg font-medium text-gray-700">
                {categories.find(cat => cat.id === activeCategory)?.name || 'Media Files'}
              </h3>
              <button
                type="button"
                onClick={() => setUploadOpen(!uploadOpen)}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-[#2B5273] hover:bg-[#1E3142] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#2B5273]"
              >
                <FiPlus className="mr-2" />
                Add Media
              </button>
            </div>
            
            {/* Upload Section */}
            {uploadOpen && (
              <div className="mb-6 p-4 border border-gray-200 rounded-md bg-gray-50">
                <MediaUpload
                  files={mediaFiles}
                  onFilesChange={handleUploadFiles}
                  maxFiles={maxFiles}
                  maxSizeInMB={maxSizeInMB}
                  allowedTypes={allowedTypes}
                  label={`Upload media to "${categories.find(cat => cat.id === activeCategory)?.name}"`}
                />
                
                <div className="mt-4 flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => {
                      setUploadOpen(false);
                      setMediaFiles([]);
                    }}
                    className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#2B5273]"
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    onClick={handleSaveFiles}
                    disabled={mediaFiles.length === 0}
                    className={`px-4 py-2 rounded-md shadow-sm text-sm font-medium text-white ${
                      mediaFiles.length === 0
                        ? 'bg-gray-400 cursor-not-allowed'
                        : 'bg-[#2B5273] hover:bg-[#1E3142] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#2B5273]'
                    }`}
                  >
                    Save Media
                  </button>
                </div>
              </div>
            )}
            
            {/* Gallery Section */}
            <MediaGallery
              files={getActiveCategoryFiles()}
              onRemove={handleRemoveFile}
              layout="grid"
              imageSize="md"
              title=""
              emptyMessage={`No files in ${categories.find(cat => cat.id === activeCategory)?.name}. Click "Add Media" to upload.`}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default MediaManager;