/**
 * Property Handover System
 * Manages the final handover process from developer to buyer
 */

import { EventEmitter } from 'events';
import { prisma } from '@/lib/prisma';
import { transactionEngine, TransactionState, DocumentType } from './index';
import { documentManager, DocumentCategory } from './document-manager';

export enum HandoverStatus {
  SCHEDULED = 'SCHEDULED',
  PRE_HANDOVER_INSPECTION = 'PRE_HANDOVER_INSPECTION',
  DOCUMENTATION_PENDING = 'DOCUMENTATION_PENDING',
  READY_FOR_HANDOVER = 'READY_FOR_HANDOVER',
  IN_PROGRESS = 'IN_PROGRESS',
  COMPLETED = 'COMPLETED',
  DELAYED = 'DELAYED'
}

export interface HandoverAppointment {
  id: string;
  transactionId: string;
  propertyId: string;
  buyerId: string;
  developerId: string;
  scheduledDate: Date;
  duration: number; // minutes
  status: HandoverStatus;
  attendees: HandoverAttendee[];
  checklist: HandoverChecklistItem[];
  documents: HandoverDocument[];
  keys: KeySet[];
  meterReadings: MeterReading[];
  completedAt?: Date;
  notes?: string;
  metadata?: Record<string, any>;
}

export interface HandoverAttendee {
  id: string;
  name: string;
  role: 'BUYER' | 'DEVELOPER' | 'AGENT' | 'SOLICITOR';
  email: string;
  phone?: string;
  attended: boolean;
  signature?: string;
  signedAt?: Date;
}

export interface HandoverChecklistItem {
  id: string;
  category: string;
  item: string;
  checked: boolean;
  checkedBy?: string;
  checkedAt?: Date;
  notes?: string;
  required: boolean;
}

export interface HandoverDocument {
  id: string;
  documentId: string;
  type: string;
  name: string;
  delivered: boolean;
  deliveredAt?: Date;
  acknowledgedBy?: string;
}

export interface KeySet {
  id: string;
  type: 'MAIN_DOOR' | 'APARTMENT' | 'MAILBOX' | 'GARAGE' | 'OTHER';
  quantity: number;
  serialNumbers?: string[];
  issuedTo?: string;
  issuedAt?: Date;
}

export interface MeterReading {
  id: string;
  type: 'ELECTRICITY' | 'GAS' | 'WATER';
  meterId: string;
  reading: number;
  readingDate: Date;
  recordedBy: string;
  photo?: string;
}

export interface WelcomePack {
  id: string;
  transactionId: string;
  deliveredAt: Date;
  contents: WelcomePackItem[];
  digitalVersion?: string;
}

export interface WelcomePackItem {
  type: string;
  description: string;
  included: boolean;
  documentId?: string;
}

export class HandoverSystem extends EventEmitter {
  private static instance: HandoverSystem;

  private constructor() {
    super();
  }

  static getInstance(): HandoverSystem {
    if (!HandoverSystem.instance) {
      HandoverSystem.instance = new HandoverSystem();
    }
    return HandoverSystem.instance;
  }

  /**
   * Schedule handover appointment
   */
  async scheduleHandover(
    transactionId: string,
    propertyId: string,
    scheduledDate: Date,
    attendees: Omit<HandoverAttendee, 'id' | 'attended' | 'signature' | 'signedAt'>[]
  ): Promise<HandoverAppointment> {
    const appointment = await prisma.handoverAppointment.create({
      data: {
        transactionId,
        propertyId,
        buyerId: await this.getBuyerId(transactionId),
        developerId: await this.getDeveloperId(transactionId),
        scheduledDate,
        duration: 60, // Default 1 hour
        status: HandoverStatus.SCHEDULED,
        attendees: attendees.map(a => ({ ...a, attended: false })),
        checklist: this.getDefaultChecklist(),
        documents: [],
        keys: this.getDefaultKeySet(),
        meterReadings: []
      }
    });

    // Update transaction state
    await transactionEngine.updateState(
      transactionId,
      TransactionState.HANDOVER_SCHEDULED,
      'system',
      { appointmentId: appointment.id }
    );

    this.emit('handover_scheduled', {
      transactionId,
      appointment
    });

    // Send notifications
    await this.sendHandoverNotifications(appointment);

    return appointment as any;
  }

  /**
   * Start pre-handover inspection
   */
  async startPreHandoverInspection(appointmentId: string): Promise<HandoverAppointment> {
    const appointment = await this.updateHandoverStatus(
      appointmentId,
      HandoverStatus.PRE_HANDOVER_INSPECTION
    );

    this.emit('pre_handover_inspection_started', {
      appointmentId,
      appointment
    });

    return appointment;
  }

  /**
   * Complete checklist item
   */
  async completeChecklistItem(
    appointmentId: string,
    itemId: string,
    checkedBy: string,
    notes?: string
  ): Promise<HandoverChecklistItem> {
    const appointment = await this.getAppointment(appointmentId);
    if (!appointment) {
      throw new Error('Appointment not found');
    }

    const itemIndex = appointment.checklist.findIndex(i => i.id === itemId);
    if (itemIndex === -1) {
      throw new Error('Checklist item not found');
    }

    appointment.checklist[itemIndex] = {
      ...appointment.checklist[itemIndex],
      checked: true,
      checkedBy,
      checkedAt: new Date(),
      notes
    };

    await prisma.handoverAppointment.update({
      where: { id: appointmentId },
      data: { checklist: appointment.checklist as any }
    });

    // Check if all required items are complete
    await this.checkHandoverReadiness(appointmentId);

    return appointment.checklist[itemIndex];
  }

  /**
   * Add meter reading
   */
  async addMeterReading(
    appointmentId: string,
    reading: Omit<MeterReading, 'id'>
  ): Promise<MeterReading> {
    const appointment = await this.getAppointment(appointmentId);
    if (!appointment) {
      throw new Error('Appointment not found');
    }

    const newReading = { id: crypto.randomUUID(), ...reading };
    appointment.meterReadings.push(newReading);

    await prisma.handoverAppointment.update({
      where: { id: appointmentId },
      data: { meterReadings: appointment.meterReadings as any }
    });

    // Upload photo if provided
    if (reading.photo) {
      await documentManager.uploadDocument({
        transactionId: appointment.transactionId,
        file: Buffer.from(reading.photo, 'base64'),
        filename: `meter_${reading.type}_${reading.meterId}.jpg`,
        type: DocumentType.COMPLETION_CERT,
        category: DocumentCategory.PROPERTY,
        uploadedBy: reading.recordedBy,
        metadata: { meterReading: newReading }
      });
    }

    this.emit('meter_reading_added', {
      appointmentId,
      reading: newReading
    });

    return newReading;
  }

  /**
   * Issue keys
   */
  async issueKeys(
    appointmentId: string,
    keySetId: string,
    issuedTo: string
  ): Promise<KeySet> {
    const appointment = await this.getAppointment(appointmentId);
    if (!appointment) {
      throw new Error('Appointment not found');
    }

    const keyIndex = appointment.keys.findIndex(k => k.id === keySetId);
    if (keyIndex === -1) {
      throw new Error('Key set not found');
    }

    appointment.keys[keyIndex] = {
      ...appointment.keys[keyIndex],
      issuedTo,
      issuedAt: new Date()
    };

    await prisma.handoverAppointment.update({
      where: { id: appointmentId },
      data: { keys: appointment.keys as any }
    });

    this.emit('keys_issued', {
      appointmentId,
      keySet: appointment.keys[keyIndex]
    });

    return appointment.keys[keyIndex];
  }

  /**
   * Deliver document
   */
  async deliverDocument(
    appointmentId: string,
    documentId: string,
    acknowledgedBy: string
  ): Promise<HandoverDocument> {
    const appointment = await this.getAppointment(appointmentId);
    if (!appointment) {
      throw new Error('Appointment not found');
    }

    const docIndex = appointment.documents.findIndex(d => d.documentId === documentId);
    if (docIndex === -1) {
      throw new Error('Document not found in handover list');
    }

    appointment.documents[docIndex] = {
      ...appointment.documents[docIndex],
      delivered: true,
      deliveredAt: new Date(),
      acknowledgedBy
    };

    await prisma.handoverAppointment.update({
      where: { id: appointmentId },
      data: { documents: appointment.documents as any }
    });

    return appointment.documents[docIndex];
  }

  /**
   * Complete handover
   */
  async completeHandover(
    appointmentId: string,
    completedBy: string,
    notes?: string
  ): Promise<HandoverAppointment> {
    const appointment = await this.getAppointment(appointmentId);
    if (!appointment) {
      throw new Error('Appointment not found');
    }

    // Verify all requirements are met
    const { ready, missing } = await this.verifyHandoverRequirements(appointmentId);
    if (!ready) {
      throw new Error(`Cannot complete handover. Missing: ${missing.join(', ')}`);
    }

    // Get buyer signature
    await this.recordAttendeeSignature(
      appointmentId,
      appointment.buyerId,
      'buyer-signature-data'
    );

    // Update appointment
    const completed = await prisma.handoverAppointment.update({
      where: { id: appointmentId },
      data: {
        status: HandoverStatus.COMPLETED,
        completedAt: new Date(),
        notes
      }
    });

    // Update transaction state
    await transactionEngine.updateState(
      appointment.transactionId,
      TransactionState.HANDOVER_COMPLETE,
      completedBy,
      { appointmentId }
    );

    // Generate handover certificate
    await this.generateHandoverCertificate(appointmentId);

    // Trigger welcome pack delivery
    await this.triggerWelcomePack(appointment.transactionId);

    this.emit('handover_completed', {
      appointmentId,
      transactionId: appointment.transactionId
    });

    return completed as any;
  }

  /**
   * Record attendee signature
   */
  async recordAttendeeSignature(
    appointmentId: string,
    attendeeId: string,
    signature: string
  ): Promise<HandoverAttendee> {
    const appointment = await this.getAppointment(appointmentId);
    if (!appointment) {
      throw new Error('Appointment not found');
    }

    const attendeeIndex = appointment.attendees.findIndex(a => a.id === attendeeId);
    if (attendeeIndex === -1) {
      throw new Error('Attendee not found');
    }

    appointment.attendees[attendeeIndex] = {
      ...appointment.attendees[attendeeIndex],
      attended: true,
      signature,
      signedAt: new Date()
    };

    await prisma.handoverAppointment.update({
      where: { id: appointmentId },
      data: { attendees: appointment.attendees as any }
    });

    return appointment.attendees[attendeeIndex];
  }

  /**
   * Generate handover certificate
   */
  private async generateHandoverCertificate(appointmentId: string): Promise<void> {
    const appointment = await this.getAppointment(appointmentId);
    if (!appointment) return;

    const certificate = `
      PROPERTY HANDOVER CERTIFICATE
      
      Property: ${appointment.propertyId}
      Date: ${appointment.completedAt}
      
      Buyer: ${appointment.buyerId}
      Developer: ${appointment.developerId}
      
      Keys Issued: ${appointment.keys.filter(k => k.issuedTo).length}
      Documents Delivered: ${appointment.documents.filter(d => d.delivered).length}
      Meter Readings Recorded: ${appointment.meterReadings.length}
      
      This certifies that the property has been handed over to the buyer
      in accordance with the terms of the purchase agreement.
      
      Signatures:
      Buyer: ${appointment.attendees.find(a => a.role === 'BUYER')?.signature ? 'Signed' : 'Pending'}
      Developer: ${appointment.attendees.find(a => a.role === 'DEVELOPER')?.signature ? 'Signed' : 'Pending'}
    `;

    await documentManager.uploadDocument({
      transactionId: appointment.transactionId,
      file: Buffer.from(certificate),
      filename: `handover_certificate_${appointmentId}.pdf`,
      type: DocumentType.COMPLETION_CERT,
      category: DocumentCategory.TRANSACTION,
      uploadedBy: 'system',
      metadata: { appointmentId }
    });
  }

  /**
   * Trigger welcome pack delivery
   */
  private async triggerWelcomePack(transactionId: string): Promise<void> {
    const welcomePack = await prisma.welcomePack.create({
      data: {
        transactionId,
        deliveredAt: new Date(),
        contents: this.getWelcomePackContents()
      }
    });

    // Create digital welcome pack
    await this.createDigitalWelcomePack(transactionId, welcomePack.id);

    this.emit('welcome_pack_triggered', {
      transactionId,
      welcomePackId: welcomePack.id
    });
  }

  /**
   * Create digital welcome pack
   */
  private async createDigitalWelcomePack(
    transactionId: string,
    welcomePackId: string
  ): Promise<void> {
    const packContents = [
      { type: 'USER_MANUAL', file: 'home-user-manual.pdf' },
      { type: 'WARRANTY_DOCS', file: 'warranties.pdf' },
      { type: 'MAINTENANCE_GUIDE', file: 'maintenance-guide.pdf' },
      { type: 'EMERGENCY_CONTACTS', file: 'emergency-contacts.pdf' },
      { type: 'COMMUNITY_INFO', file: 'community-information.pdf' }
    ];

    for (const content of packContents) {
      await documentManager.createFromTemplate(
        content.type,
        transactionId,
        { transactionId },
        'system'
      );
    }
  }

  /**
   * Helper methods
   */

  private async getAppointment(appointmentId: string): Promise<HandoverAppointment | null> {
    return prisma.handoverAppointment.findUnique({
      where: { id: appointmentId }
    }) as any;
  }

  private async updateHandoverStatus(
    appointmentId: string,
    status: HandoverStatus
  ): Promise<HandoverAppointment> {
    return prisma.handoverAppointment.update({
      where: { id: appointmentId },
      data: { status }
    }) as any;
  }

  private async getBuyerId(transactionId: string): Promise<string> {
    const transaction = await transactionEngine.getTransaction(transactionId);
    if (!transaction) throw new Error('Transaction not found');
    return transaction.buyerId;
  }

  private async getDeveloperId(transactionId: string): Promise<string> {
    const transaction = await transactionEngine.getTransaction(transactionId);
    if (!transaction) throw new Error('Transaction not found');
    return transaction.developerId;
  }

  private async checkHandoverReadiness(appointmentId: string): Promise<void> {
    const { ready, missing } = await this.verifyHandoverRequirements(appointmentId);
    
    if (ready) {
      await this.updateHandoverStatus(appointmentId, HandoverStatus.READY_FOR_HANDOVER);
      this.emit('handover_ready', { appointmentId });
    }
  }

  private async verifyHandoverRequirements(appointmentId: string): Promise<{
    ready: boolean;
    missing: string[];
  }> {
    const appointment = await this.getAppointment(appointmentId);
    if (!appointment) {
      return { ready: false, missing: ['Appointment not found'] };
    }

    const missing: string[] = [];

    // Check required checklist items
    const requiredItems = appointment.checklist.filter(i => i.required && !i.checked);
    if (requiredItems.length > 0) {
      missing.push(`${requiredItems.length} checklist items`);
    }

    // Check meter readings
    const requiredMeters = ['ELECTRICITY', 'WATER'];
    const recordedMeters = appointment.meterReadings.map(r => r.type);
    const missingMeters = requiredMeters.filter(m => !recordedMeters.includes(m as any));
    if (missingMeters.length > 0) {
      missing.push(`Meter readings: ${missingMeters.join(', ')}`);
    }

    // Check key issuance
    const unissuedKeys = appointment.keys.filter(k => !k.issuedTo);
    if (unissuedKeys.length > 0) {
      missing.push(`${unissuedKeys.length} key sets`);
    }

    // Check document delivery
    const undeliveredDocs = appointment.documents.filter(d => !d.delivered);
    if (undeliveredDocs.length > 0) {
      missing.push(`${undeliveredDocs.length} documents`);
    }

    return {
      ready: missing.length === 0,
      missing
    };
  }

  private async sendHandoverNotifications(appointment: HandoverAppointment): Promise<void> {
    // Send notifications to all attendees
    for (const attendee of appointment.attendees) {
      console.log(`Sending handover notification to ${attendee.email}`);
      // Implement email/SMS notification
    }
  }

  private getDefaultChecklist(): HandoverChecklistItem[] {
    return [
      {
        id: crypto.randomUUID(),
        category: 'General',
        item: 'Property cleaned and ready',
        checked: false,
        required: true
      },
      {
        id: crypto.randomUUID(),
        category: 'General',
        item: 'All snagging items resolved',
        checked: false,
        required: true
      },
      {
        id: crypto.randomUUID(),
        category: 'Utilities',
        item: 'Electricity connected and working',
        checked: false,
        required: true
      },
      {
        id: crypto.randomUUID(),
        category: 'Utilities',
        item: 'Water supply connected',
        checked: false,
        required: true
      },
      {
        id: crypto.randomUUID(),
        category: 'Utilities',
        item: 'Heating system operational',
        checked: false,
        required: true
      },
      {
        id: crypto.randomUUID(),
        category: 'Security',
        item: 'All locks functioning',
        checked: false,
        required: true
      },
      {
        id: crypto.randomUUID(),
        category: 'Security',
        item: 'Alarm system demonstrated',
        checked: false,
        required: false
      },
      {
        id: crypto.randomUUID(),
        category: 'Appliances',
        item: 'All appliances demonstrated',
        checked: false,
        required: true
      },
      {
        id: crypto.randomUUID(),
        category: 'Documentation',
        item: 'User manuals provided',
        checked: false,
        required: true
      },
      {
        id: crypto.randomUUID(),
        category: 'Documentation',
        item: 'Warranties provided',
        checked: false,
        required: true
      }
    ];
  }

  private getDefaultKeySet(): KeySet[] {
    return [
      {
        id: crypto.randomUUID(),
        type: 'MAIN_DOOR',
        quantity: 2,
        serialNumbers: []
      },
      {
        id: crypto.randomUUID(),
        type: 'APARTMENT',
        quantity: 2,
        serialNumbers: []
      },
      {
        id: crypto.randomUUID(),
        type: 'MAILBOX',
        quantity: 1,
        serialNumbers: []
      }
    ];
  }

  private getWelcomePackContents(): WelcomePackItem[] {
    return [
      {
        type: 'USER_MANUAL',
        description: 'Property user manual and guides',
        included: true
      },
      {
        type: 'WARRANTY_DOCS',
        description: 'Warranty documentation for appliances and systems',
        included: true
      },
      {
        type: 'MAINTENANCE_GUIDE',
        description: 'Property maintenance schedule and tips',
        included: true
      },
      {
        type: 'EMERGENCY_CONTACTS',
        description: 'Emergency and utility contact information',
        included: true
      },
      {
        type: 'COMMUNITY_INFO',
        description: 'Local area and community information',
        included: true
      },
      {
        type: 'GIFT_VOUCHERS',
        description: 'Welcome gift vouchers',
        included: false
      }
    ];
  }

  /**
   * Get handover statistics
   */
  async getHandoverStatistics(developerId: string): Promise<{
    totalHandovers: number;
    completedToday: number;
    scheduledThisWeek: number;
    averageDuration: number;
    satisfactionScore: number;
  }> {
    const handovers = await prisma.handoverAppointment.findMany({
      where: { developerId }
    });

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const completedToday = handovers.filter(h => 
      h.completedAt && h.completedAt >= today
    ).length;

    const weekEnd = new Date(today);
    weekEnd.setDate(weekEnd.getDate() + 7);

    const scheduledThisWeek = handovers.filter(h =>
      h.scheduledDate >= today && h.scheduledDate <= weekEnd
    ).length;

    const completedHandovers = handovers.filter(h => h.completedAt);
    
    const totalDuration = completedHandovers.reduce((sum, h) => {
      if (h.completedAt) {
        return sum + (h.completedAt.getTime() - h.scheduledDate.getTime());
      }
      return sum;
    }, 0);

    const averageDuration = completedHandovers.length > 0
      ? totalDuration / completedHandovers.length / (1000 * 60) // minutes
      : 0;

    // Mock satisfaction score
    const satisfactionScore = 4.5;

    return {
      totalHandovers: handovers.length,
      completedToday,
      scheduledThisWeek,
      averageDuration,
      satisfactionScore
    };
  }
}

// Export singleton instance
export const handoverSystem = HandoverSystem.getInstance();