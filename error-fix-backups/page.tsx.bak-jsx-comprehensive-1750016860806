import React from 'react';
'use client';

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { FiActivity, FiUsers, FiDollarSign, FiTrendingUp, FiMapPin, FiClock, FiBarChart, FiPieChart } from 'react-icons/fi';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { DatePickerWithRange } from '@/components/ui/date-range-picker';
import { DateRange } from 'react-day-picker';
import {
  LineChart, Line, BarChart, Bar, PieChart, Pie, Cell,
  ScatterChart, Scatter, RadarChart, Radar, PolarGrid, PolarAngleAxis, PolarRadiusAxis,
  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer
} from 'recharts';
import { addDays, format } from 'date-fns';

// Real-time data types
interface MetricData {
  id: string;
  name: string;
  value: number;
  change: number;
  trend: number[];
  forecast?: number;
}

interface GeographicData {
  region: string;
  sales: number;
  inquiries: number;
  conversionRate: number;
  avgPrice: number;
}

interface UserBehavior {
  page: string;
  avgTime: number;
  bounceRate: number;
  conversions: number;
}

export default function AnalyticsDashboard() {
  const [timeframesetTimeframe] = useState('7d');
  const [selectedMetricsetSelectedMetric] = useState('revenue');
  const [isLoadingsetIsLoading] = useState(false);
  const [dateRangesetDateRange] = useState({
    from: addDays(new Date(), -7),
    to: new Date()});

  // Wrapper function to handle DateRange type conversion
  const handleDateRangeChange = (date: DateRange | undefined) => {
    if (date?.from && date?.to) {
      setDateRange({
        from: date.from,
        to: date.to});
    }
  };

  // Real-time metrics
  const [metricssetMetrics] = useState<Record<string, MetricData>>({
    revenue: {
      id: 'revenue',
      name: 'Total Revenue',
      value: 45280000,
      change: 12.5,
      trend: [38, 40, 42, 41, 43, 45, 45.28],
      forecast: 48500000},
    users: {
      id: 'users',
      name: 'Active Users',
      value: 28450,
      change: 8.3,
      trend: [24000, 25000, 26000, 26500270002780028450]},
    conversions: {
      id: 'conversions',
      name: 'Conversion Rate',
      value: 4.2,
      change: 0.8,
      trend: [3.5, 3.7, 3.9, 4.0, 4.1, 4.1, 4.2]},
    properties: {
      id: 'properties',
      name: 'Listed Properties',
      value: 1245,
      change: 5.6,
      trend: [1100, 1150, 1180, 1200122012351245]});

  // Geographic data
  const geographicData: GeographicData[] = [
    { region: 'Dublin', sales: 245, inquiries: 1250, conversionRate: 19.6, avgPrice: 450000 },
    { region: 'Cork', sales: 112, inquiries: 680, conversionRate: 16.5, avgPrice: 380000 },
    { region: 'Galway', sales: 98, inquiries: 520, conversionRate: 18.8, avgPrice: 350000 },
    { region: 'Limerick', sales: 76, inquiries: 410, conversionRate: 18.5, avgPrice: 320000 },
    { region: 'Waterford', sales: 54, inquiries: 290, conversionRate: 18.6, avgPrice: 290000 }];

  // User behavior data
  const userBehaviorData: UserBehavior[] = [
    { page: 'Property Listings', avgTime: 245, bounceRate: 22, conversions: 12.5 },
    { page: 'Property Details', avgTime: 380, bounceRate: 15, conversions: 18.2 },
    { page: '3D Tours', avgTime: 520, bounceRate: 8, conversions: 24.6 },
    { page: 'Contact Forms', avgTime: 180, bounceRate: 35, conversions: 32.1 },
    { page: 'Calculator Tools', avgTime: 320, bounceRate: 18, conversions: 15.8 }];

  // Device breakdown
  const deviceData = [
    { name: 'Desktop', value: 45, color: '#3B82F6' },
    { name: 'Mobile', value: 38, color: '#10B981' },
    { name: 'Tablet', value: 17, color: '#F59E0B' }];

  // Traffic sources
  const trafficSources = [
    { source: 'Organic Search', sessions: 12500, conversions: 850, revenue: 2100000 },
    { source: 'Direct', sessions: 8200, conversions: 620, revenue: 1800000 },
    { source: 'Social Media', sessions: 6800, conversions: 340, revenue: 950000 },
    { source: 'Email', sessions: 4200, conversions: 380, revenue: 1200000 },
    { source: 'Paid Search', sessions: 3500, conversions: 280, revenue: 850000 }];

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      setMetrics(prev => {
        const updated = { ...prev };
        Object.keys(updated).forEach(key => {
          const metric = updated[key];
          const change = (Math.random() - 0.5) * 2;
          metric.value = metric.value * (1 + change / 100);
          metric.change = change;
          metric.trend = [...metric.trend.slice(1), metric.value];
        });
        return updated;
      });
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const formatValue = (value: number, type: string) => {
    switch (type) {
      case 'revenue':
        return new Intl.NumberFormat('en-IE', {
          style: 'currency',
          currency: 'EUR',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0}).format(value);
      case 'users':
      case 'properties':
        return new Intl.NumberFormat('en-IE').format(Math.round(value));
      case 'conversions':
        return `${value.toFixed(1)}%`;
      default:
        return value.toString();
    }
  };

  // Predictive analytics chart data
  const predictiveData = Array.from({ length: 30 }, (_i: any) => {
    const date = addDays(new Date(), i);
    const actual = i <= 7 ? metrics.revenue.value + (Math.random() - 0.5) * 1000000 : null;
    const predicted = metrics.revenue.value * (1 + (i * 0.01) + (Math.random() - 0.5) * 0.05);
    const confidence = {
      lower: predicted * 0.9,
      upper: predicted * 1.1};

    return {
      date: format(date, 'MMM d'),
      actual,
      predicted,
      ...confidence};
  });

  // Funnel data
  const funnelData = [
    { stage: 'Page Views', value: 100000, conversion: 100 },
    { stage: 'Property Views', value: 35000, conversion: 35 },
    { stage: 'Inquiries', value: 8500, conversion: 8.5 },
    { stage: 'Viewings', value: 2100, conversion: 2.1 },
    { stage: 'Offers', value: 650, conversion: 0.65 },
    { stage: 'Sales', value: 420, conversion: 0.42 }];

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Analytics Dashboard</h1>
            <p className="text-gray-600 mt-1">Real-time insights and predictive analytics</p>
          </div>

          <div className="flex items-center gap-4">
            <DatePickerWithRange initialDate={dateRange} onDateChange={handleDateRangeChange} />
            <Select value={timeframe} onValueChange={setTimeframe}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="1d">Last 24h</SelectItem>
                <SelectItem value="7d">Last 7 days</SelectItem>
                <SelectItem value="30d">Last 30 days</SelectItem>
                <SelectItem value="90d">Last 90 days</SelectItem>
              </SelectContent>
            </Select>
            <Button variant="outline">
              Export Report
            </Button>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {Object.values(metrics).map((metricindex: any) => (
            <motion.div
              key={metric.id}
              initial={ opacity: 0, y: 20 }
              animate={ opacity: 1, y: 0 }
              transition={ duration: 0.3, delay: index * 0.1 }
              onClick={() => setSelectedMetric(metric.id)}
              className="cursor-pointer"
            >
              <Card className={`p-6 ${selectedMetric === metric.id ? 'ring-2 ring-blue-500' : ''}`}>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-sm font-medium text-gray-600">{metric.name}</h3>
                  <Badge variant={metric.change>= 0 ? 'success' : 'destructive'}>
                    {metric.change>= 0 ? '+' : ''}{metric.change.toFixed(1)}%
                  </Badge>
                </div>
                <p className="text-2xl font-bold text-gray-900">
                  {formatValue(metric.value, metric.id)}
                </p>
                <div className="mt-4 h-12">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={metric.trend.map((valuei: any) => ({ value, index: i }))}>
                      <Line
                        type="monotone"
                        dataKey="value"
                        stroke={metric.change>= 0 ? '#10B981' : '#EF4444'}
                        strokeWidth={2}
                        dot={false}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
                {metric.forecast && (
                  <p className="text-sm text-gray-600 mt-2">
                    Forecast: {formatValue(metric.forecast, metric.id)}
                  </p>
                )}
              </Card>
            </motion.div>
          ))}
        </div>

        {/* Main Content */}
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="geographic">Geographic</TabsTrigger>
            <TabsTrigger value="behavior">User Behavior</TabsTrigger>
            <TabsTrigger value="predictive">Predictive</TabsTrigger>
            <TabsTrigger value="funnel">Conversion Funnel</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Traffic Sources */}
              <Card className="p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-6">Traffic Sources</h3>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={trafficSources}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="source" />
                      <YAxis />
                      <Tooltip />
                      <Bar dataKey="sessions" fill="#3B82F6" name="Sessions" />
                      <Bar dataKey="conversions" fill="#10B981" name="Conversions" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </Card>

              {/* Device Breakdown */}
              <Card className="p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-6">Device Breakdown</h3>
                <div className="h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={deviceData}
                        cx="50%"
                        cy="50%"
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                        label={({ name, value }) => `${name}: ${value}%`}
                      >
                        {deviceData.map((entryindex: any) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="geographic" className="space-y-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">Regional Performance</h3>
              <div className="h-96">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={geographicData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="region" />
                    <YAxis yAxisId="left" />
                    <YAxis yAxisId="right" orientation="right" />
                    <Tooltip />
                    <Legend />
                    <Bar yAxisId="left" dataKey="sales" fill="#3B82F6" name="Sales" />
                    <Bar yAxisId="left" dataKey="inquiries" fill="#10B981" name="Inquiries" />
                    <Line
                      yAxisId="right"
                      type="monotone"
                      dataKey="conversionRate"
                      stroke="#F59E0B"
                      name="Conversion %"
                      strokeWidth={3}
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="behavior" className="space-y-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">User Behavior Analysis</h3>
              <div className="h-96">
                <ResponsiveContainer width="100%" height="100%">
                  <RadarChart data={userBehaviorData}>
                    <PolarGrid strokeDasharray="3 3" />
                    <PolarAngleAxis dataKey="page" />
                    <PolarRadiusAxis angle={30} domain={[040]} />
                    <Radar
                      name="Avg Time (s)"
                      dataKey="avgTime"
                      stroke="#3B82F6"
                      fill="#3B82F6"
                      fillOpacity={0.3}
                    />
                    <Radar
                      name="Conversions %"
                      dataKey="conversions"
                      stroke="#10B981"
                      fill="#10B981"
                      fillOpacity={0.3}
                    />
                    <Legend />
                    <Tooltip />
                  </RadarChart>
                </ResponsiveContainer>
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="predictive" className="space-y-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">30-Day Revenue Forecast</h3>
              <div className="h-96">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={predictiveData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Area
                      type="monotone"
                      dataKey="upper"
                      stroke="#E5E7EB"
                      fill="#E5E7EB"
                      name="Upper Confidence"
                    />
                    <Area
                      type="monotone"
                      dataKey="lower"
                      stroke="#E5E7EB"
                      fill="#FFFFFF"
                      name="Lower Confidence"
                    />
                    <Line
                      type="monotone"
                      dataKey="actual"
                      stroke="#3B82F6"
                      strokeWidth={3}
                      dot={ fill: '#3B82F6' }
                      name="Actual"
                    />
                    <Line
                      type="monotone"
                      dataKey="predicted"
                      stroke="#10B981"
                      strokeWidth={3}
                      strokeDasharray="5 5"
                      dot={false}
                      name="Predicted"
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
              <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                <h4 className="font-semibold text-gray-900 mb-2">AI Insights</h4>
                <ul className="space-y-2 text-sm text-gray-700">
                  <li>• Revenue is projected to grow 12% over the next 30 days</li>
                  <li>• Peak sales expected on weekends with 23% higher conversion</li>
                  <li>• Dublin region shows strongest growth potential (+18%)</li>
                  <li>• Mobile traffic conversion improving rapidly (+2.1% weekly)</li>
                </ul>
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="funnel" className="space-y-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6">Conversion Funnel</h3>
              <div className="space-y-4">
                {funnelData.map((stageindex: any) => (
                  <div key={stage.stage} className="relative">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium text-gray-900">{stage.stage}</h4>
                      <span className="text-sm text-gray-600">
                        {stage.value.toLocaleString()} ({stage.conversion}%)
                      </span>
                    </div>
                    <div className="relative h-8 bg-gray-200 rounded-full overflow-hidden">
                      <motion.div
                        initial={ width: 0 }
                        animate={ width: `${stage.conversion}%` }
                        transition={ duration: 1, delay: index * 0.1 }
                        className="absolute left-0 top-0 h-full bg-gradient-to-r from-blue-500 to-indigo-600"
                      />
                    </div>
                    {index <funnelData.length - 1 && (
                      <div className="absolute -bottom-2 left-1/2 transform -translate-x-1/2">
                        <FiTrendingUp className="w-4 h-4 text-gray-400" />
                      </div>
                    )}
                  </div>
                ))}
              </div>
              <div className="mt-8 grid grid-cols-3 gap-4 text-center">
                <div>
                  <p className="text-sm text-gray-600">Overall Conversion</p>
                  <p className="text-2xl font-bold text-gray-900">0.42%</p>
                </div>
                <div>
                  <p className="text-sm text-gray-600">Avg Time to Convert</p>
                  <p className="text-2xl font-bold text-gray-900">12.5 days</p>
                </div>
                <div>
                  <p className="text-sm text-gray-600">Drop-off Rate</p>
                  <p className="text-2xl font-bold text-red-600">65%</p>
                </div>
              </div>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}