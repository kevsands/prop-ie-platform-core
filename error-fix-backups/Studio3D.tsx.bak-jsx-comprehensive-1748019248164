'use client';

import React, { Suspense, useRef, useState, useCallback, useMemo } from 'react';
import { Canvas, useThree, useLoader } from '@react-three/fiber';
import { OrbitControls, PerspectiveCamera, Environment, ContactShadows, Html } from '@react-three/drei';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import * as THREE from 'three';
import { Button } from '@/components/ui/button';
import { Camera, RotateCw, ZoomIn, ZoomOut, Download } from 'lucide-react';
import { toast } from '@/components/ui/use-toast';

// Add Three.js type support
import '@/types/three-extensions';

interface Studio3DProps {
  modelUrl: string;
  customizations: Record<string, any>;
  onCustomizationChange: (category: string, value: any) => void;
  availableOptions: CustomizationOption[];
}

interface CustomizationOption {
  id: string;
  category: string;
  name: string;
  price: number;
  materials?: MaterialOption[];
}

interface MaterialOption {
  id: string;
  name: string;
  texture?: string;
  color?: string;
  metalness?: number;
  roughness?: number;
}

// Customizable Room Component
function Room({ modelUrl, customizations }: { modelUrl: string; customizations: Record<string, any> }) {
  const gltf = useLoader(GLTFLoader, modelUrl);
  const { scene } = useThree();

  // Apply customizations to the model
  React.useEffect(() => {
    gltf.scene.traverse((child) => {
      if (child instanceof THREE.Mesh) {
        const meshName = child.name.toLowerCase();

        // Apply floor customization
        if (meshName.includes('floor') && customizations.flooring) {
          const material = new THREE.MeshStandardMaterial({
            color: customizations.flooring.color || '#8B7355',
            roughness: customizations.flooring.roughness || 0.8,
            metalness: customizations.flooring.metalness || 0.1});
          child.material = material;
        }

        // Apply wall customization
        if (meshName.includes('wall') && customizations.walls) {
          const material = new THREE.MeshStandardMaterial({
            color: customizations.walls.color || '#F5F5DC',
            roughness: 0.9,
            metalness: 0.0});
          child.material = material;
        }

        // Apply kitchen customization
        if (meshName.includes('kitchen') && customizations.kitchen) {
          const material = new THREE.MeshStandardMaterial({
            color: customizations.kitchen.color || '#2C3E50',
            roughness: 0.3,
            metalness: 0.7});
          child.material = material;
        }
      }
    });
  }, [gltf, customizations]);

  return <primitive object={gltf.scene} />;
}

// Loading component
function LoadingSpinner() {
  return (
    <Html center>
      <div className="flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
      </div>
    </Html>
  );
}

// Camera Controller Component
function CameraController() {
  const { camera } = useThree();

  const resetCamera = useCallback(() => {
    camera.position.set(5, 3, 5);
    camera.lookAt(0, 0, 0);
  }, [camera]);

  return (
    <div className="absolute top-4 right-4 flex flex-col gap-2 z-10">
      <Button
        size="icon"
        variant="secondary"
        onClick={resetCamera}
        title="Reset Camera"
      >
        <RotateCw className="h-4 w-4" />
      </Button>
    </div>
  );
}

export default function Studio3D({ 
  modelUrl, 
  customizations, 
  onCustomizationChange, 
  availableOptions 
}: Studio3DProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [zoom, setZoom] = useState(1);

  // Take screenshot functionality
  const takeScreenshot = useCallback(() => {
    if (!canvasRef.current) return;

    const link = document.createElement('a');
    link.download = `customization-${Date.now()}.png`;
    link.href = canvasRef.current.toDataURL();
    link.click();

    toast({
      title: "Screenshot saved!",
      description: "Your customization has been saved as an image."});
  }, []);

  // Zoom controls
  const handleZoom = useCallback((direction: 'in' | 'out') => {
    setZoom(prev => {
      const newZoom = direction === 'in' ? prev * 1.2 : prev / 1.2;
      return Math.max(0.5, Math.min(3, newZoom));
    });
  }, []);

  // Memoized canvas content
  const canvasContent = useMemo(() => (
    <>
      <PerspectiveCamera 
        makeDefault 
        position={[5, 3, 5]} 
        fov={50}
        zoom={zoom}
      />
      <OrbitControls 
        enablePan={true}
        enableZoom={true}
        enableRotate={true}
        maxPolarAngle={Math.PI / 2}
        minDistance={3}
        maxDistance={20}
      />

      {/* Lighting setup */}
      <ambientLight intensity={0.5} />
      <directionalLight 
        position={[10, 10, 5]} 
        intensity={1} 
        castShadow
        shadow-mapSize-width={2048}
        shadow-mapSize-height={2048}
      />
      <pointLight position={[-10, -10, -5]} intensity={0.5} />

      {/* Environment for reflections */}
      <Environment preset="apartment" />

      {/* Model */}
      <Suspense fallback={<LoadingSpinner />}>
        <Room modelUrl={modelUrl} customizations={customizations} />
      </Suspense>

      {/* Shadows */}
      <ContactShadows 
        position={[0, -0.01, 0]} 
        opacity={0.3} 
        scale={10} 
        blur={2} 
      />

      <CameraController />
    </>
  ), [modelUrl, customizations, zoom]);

  return (
    <div className="relative w-full h-full min-h-[600px] bg-gray-100 rounded-lg overflow-hidden">
      {/* Control Panel */}
      <div className="absolute top-4 left-4 z-10 flex gap-2">
        <Button
          size="icon"
          variant="secondary"
          onClick={() => handleZoom('in')}
          title="Zoom In"
        >
          <ZoomIn className="h-4 w-4" />
        </Button>
        <Button
          size="icon"
          variant="secondary"
          onClick={() => handleZoom('out')}
          title="Zoom Out"
        >
          <ZoomOut className="h-4 w-4" />
        </Button>
        <Button
          size="icon"
          variant="secondary"
          onClick={takeScreenshot}
          title="Take Screenshot"
        >
          <Camera className="h-4 w-4" />
        </Button>
        <Button
          size="icon"
          variant="secondary"
          onClick={() => {
            const link = document.createElement('a');
            link.href = `/api/customizations/pdf?config=${encodeURIComponent(JSON.stringify(customizations))}`;
            link.download = `customization-${Date.now()}.pdf`;
            link.click();
          }}
          title="Download PDF"
        >
          <Download className="h-4 w-4" />
        </Button>
      </div>

      {/* 3D Canvas */}
      <Canvas
        ref={canvasRef}
        camera={{ position: [5, 3, 5], fov: 50 }}
        gl={{ preserveDrawingBuffer: true }}
        shadows
        onCreated={() => setIsLoading(false)}
        className="touch-none"
      >
        {canvasContent}
      </Canvas>

      {/* Loading overlay */}
      {isLoading && (
        <div className="absolute inset-0 bg-white/80 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading 3D model...</p>
          </div>
        </div>
      )}

      {/* Mobile touch instructions */}
      <div className="absolute bottom-4 left-4 right-4 text-center text-sm text-gray-600 md:hidden">
        <p>Use one finger to rotate, two fingers to zoom</p>
      </div>
    </div>
  );
}