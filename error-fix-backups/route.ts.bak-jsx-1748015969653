import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/auth-server';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

// Extend jsPDF type
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

// GET /api/customization/pdf - Generate PDF for customization
export async function GET(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(req.url);
    const config = searchParams.get('config');
    
    if (!config) {
      return NextResponse.json({ error: 'Configuration required' }, { status: 400 });
    }

    let customization;
    try {
      customization = JSON.parse(decodeURIComponent(config));
    } catch (error) {
      return NextResponse.json({ error: 'Invalid configuration' }, { status: 400 });
    }

    // Create PDF
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(24);
    doc.text('Property Customization Report', 20, 20);
    
    doc.setFontSize(12);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 30);
    doc.text(`Customer: ${session.user.name || session.user.email}`, 20, 37);
    
    // Property Details
    doc.setFontSize(16);
    doc.text('Property Details', 20, 50);
    
    doc.setFontSize(12);
    doc.text(`Property: ${customization.propertyName || 'N/A'}`, 20, 60);
    doc.text(`Base Price: €${customization.basePrice?.toLocaleString() || '0'}`, 20, 67);
    
    // Customization Summary
    doc.setFontSize(16);
    doc.text('Selected Customizations', 20, 85);
    
    // Create table data
    const tableData = [];
    let optionsTotal = 0;
    
    if (customization.options) {
      Object.entries(customization.options).forEach(([category, options]: [string, any]) => {
        if (Array.isArray(options)) {
          options.forEach((option: any) => {
            tableData.push([
              category,
              option.name || 'N/A',
              option.variant || '-',
              option.quantity || 1,
              `€${(option.price || 0).toLocaleString()}`,
            ]);
            optionsTotal += (option.price || 0) * (option.quantity || 1);
          });
        }
      });
    }
    
    // Add table
    if (tableData.length > 0) {
      doc.autoTable({
        startY: 95,
        head: [['Category', 'Option', 'Variant', 'Qty', 'Price']],
        body: tableData,
        theme: 'striped',
        headStyles: { fillColor: [41, 128, 185] },
      });
    }
    
    // Pricing Summary
    const finalY = (doc as any).lastAutoTable?.finalY || 95;
    
    doc.setFontSize(16);
    doc.text('Pricing Summary', 20, finalY + 20);
    
    doc.setFontSize(12);
    doc.text(`Base Price: €${(customization.basePrice || 0).toLocaleString()}`, 20, finalY + 30);
    doc.text(`Customizations: €${optionsTotal.toLocaleString()}`, 20, finalY + 37);
    doc.text(`Subtotal: €${((customization.basePrice || 0) + optionsTotal).toLocaleString()}`, 20, finalY + 44);
    
    const tax = ((customization.basePrice || 0) + optionsTotal) * 0.135;
    doc.text(`VAT (13.5%): €${tax.toLocaleString()}`, 20, finalY + 51);
    
    doc.setFontSize(14);
    doc.setFont(undefined, 'bold');
    const total = (customization.basePrice || 0) + optionsTotal + tax;
    doc.text(`Total: €${total.toLocaleString()}`, 20, finalY + 61);
    
    // Footer
    doc.setFont(undefined, 'normal');
    doc.setFontSize(10);
    doc.text('This is a preliminary quote and subject to final approval.', 20, 280);
    doc.text('Valid for 30 days from the date of generation.', 20, 285);
    
    // Generate PDF buffer
    const pdfBuffer = doc.output('arraybuffer');
    
    // Return PDF as response
    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="customization-${Date.now()}.pdf"`,
      },
    });
  } catch (error) {
    console.error('Error generating PDF:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
}