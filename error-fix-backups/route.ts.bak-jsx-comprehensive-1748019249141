import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/auth-server';
import prisma from '@/lib/prisma';
import { z } from 'zod';
import { sendEmail } from '@/lib/email';
import { generatePDF } from '@/lib/pdf';

// Validation schema
const reservationSchema = z.object({
  unitId: z.string(),
  developmentId: z.string(),
  agreedPrice: z.number().positive(),
  depositAmount: z.number().positive(),
  paymentMethod: z.string(),
  personalInfo: z.object({
    firstName: z.string().min(1),
    lastName: z.string().min(1),
    email: z.string().email(),
    phone: z.string().min(1),
    address: z.string().min(1)
  }),
  kycConsent: z.boolean().refine(val => val === true),
  termsAccepted: z.boolean().refine(val => val === true),
  marketingOptIn: z.boolean()
});

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();

    // Validate request body
    const validatedData = reservationSchema.parse(body);

    // Get user
    const user = await prisma.user.findUnique({
      where: { email: session.user.email }
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // Check if unit is available
    const unit = await prisma.unit.findUnique({
      where: { id: validatedData.unitId },
      include: {
        development: true
      }
    });

    if (!unit || unit.status !== 'AVAILABLE') {
      return NextResponse.json({ error: 'Unit is not available' }, { status: 400 });
    }

    // Generate reference number
    const referenceNumber = `RES-${Date.now()}-${Math.random().toString(36).substring(2, 8).toUpperCase()}`;

    // Create transaction with reservation status
    const transaction = await prisma.transaction.create({
      data: {
        referenceNumber,
        status: 'RESERVATION_PENDING',
        stage: 'RESERVATION',
        type: 'PURCHASE',
        buyerId: user.id,
        developmentId: validatedData.developmentId,
        unitId: validatedData.unitId,
        agreedPrice: validatedData.agreedPrice,
        depositPaid: 0, // Will be updated after payment confirmation
        totalPaid: 0,
        outstandingBalance: validatedData.agreedPrice,
        enquiryDate: new Date(),
        reservationDate: new Date(),
        mortgageRequired: true, // Default, can be updated later
        kycCompleted: false,
        amlCheckCompleted: false,
        sourceOfFundsVerified: false,
        preferredContactMethod: 'email',
        marketingOptIn: validatedData.marketingOptIn,
        gdprConsent: true,
        notes: `Reservation created via online form. Deposit amount: â‚¬${validatedData.depositAmount}`,
        tags: ['online-reservation', 'pending-payment']
      }
    });

    // Create transaction event for audit trail
    await prisma.transactionEvent.create({
      data: {
        transactionId: transaction.id,
        eventType: 'RESERVATION_CREATED',
        description: 'Property reservation initiated',
        metadata: {
          unitId: validatedData.unitId,
          depositAmount: validatedData.depositAmount,
          personalInfo: validatedData.personalInfo
        },
        performedBy: user.id
      }
    });

    // Update unit status to reserved
    await prisma.unit.update({
      where: { id: validatedData.unitId },
      data: { 
        status: 'RESERVED',
        reservedBy: user.id,
        reservedDate: new Date()
      }
    });

    // Create initial tasks for the transaction
    const tasks = [
      {
        transactionId: transaction.id,
        title: 'Complete KYC Verification',
        description: 'Upload required identity and address documents',
        priority: 'HIGH',
        status: 'PENDING',
        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days
        assignedTo: user.id
      },
      {
        transactionId: transaction.id,
        title: 'Pay Remaining Deposit',
        description: 'Complete 10% deposit payment',
        priority: 'HIGH',
        status: 'PENDING',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
        assignedTo: user.id
      },
      {
        transactionId: transaction.id,
        title: 'Review Sales Contract',
        description: 'Review and sign the sales contract',
        priority: 'MEDIUM',
        status: 'PENDING',
        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days
        assignedTo: user.id
      }
    ];

    await prisma.transactionTask.createMany({
      data: tasks
    });

    // Generate reservation agreement PDF
    const agreementPdf = await generatePDF('reservation-agreement', {
      transaction,
      unit,
      buyer: {
        ...user,
        ...validatedData.personalInfo
      },
      depositAmount: validatedData.depositAmount
    });

    // Create document record
    await prisma.transactionDocument.create({
      data: {
        transactionId: transaction.id,
        name: 'Reservation Agreement',
        type: 'RESERVATION_AGREEMENT',
        status: 'GENERATED',
        uploadedBy: user.id,
        fileUrl: agreementPdf.url,
        fileSize: agreementPdf.size,
        mimeType: 'application/pdf'
      }
    });

    // Send confirmation emails
    await sendEmail({
      to: validatedData.personalInfo.email,
      subject: `Property Reservation Confirmation - ${unit.name}`,
      template: 'reservation-confirmation',
      data: {
        buyerName: `${validatedData.personalInfo.firstName} ${validatedData.personalInfo.lastName}`,
        propertyName: unit.name,
        developmentName: unit.development.name,
        reservationRef: referenceNumber,
        depositAmount: validatedData.depositAmount,
        nextSteps: [
          'Complete your booking deposit payment',
          'Upload KYC documents within 3 days',
          'Review and sign the sales contract'
        ],
        agreementUrl: agreementPdf.url
      }
    });

    // Send notification to sales team
    await sendEmail({
      to: process.env.SALES_TEAM_EMAIL || 'sales@prop.ie',
      subject: `New Reservation - ${unit.name}`,
      template: 'new-reservation-notification',
      data: {
        buyerName: `${validatedData.personalInfo.firstName} ${validatedData.personalInfo.lastName}`,
        buyerEmail: validatedData.personalInfo.email,
        buyerPhone: validatedData.personalInfo.phone,
        propertyName: unit.name,
        developmentName: unit.development.name,
        reservationRef: referenceNumber,
        depositAmount: validatedData.depositAmount
      }
    });

    return NextResponse.json({
      id: transaction.id,
      referenceNumber: transaction.referenceNumber,
      status: 'success',
      message: 'Reservation created successfully',
      nextStep: 'payment',
      agreementUrl: agreementPdf.url
    });

  } catch (error) {

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation error', details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Failed to create reservation' },
      { status: 500 }
    );
  }
}

// Get reservation details
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const transactionId = searchParams.get('transactionId');

    if (!transactionId) {
      return NextResponse.json({ error: 'Transaction ID required' }, { status: 400 });
    }

    const transaction = await prisma.transaction.findUnique({
      where: { id: transactionId },
      include: {
        unit: {
          include: {
            development: true,
            customizationOptions: true
          }
        },
        buyer: true,
        events: {
          orderBy: { performedAt: 'desc' },
          take: 10
        },
        documents: {
          where: { type: 'RESERVATION_AGREEMENT' }
        },
        payments: true,
        tasks: {
          where: { status: { not: 'COMPLETED' } },
          orderBy: { dueDate: 'asc' }
        }
      }
    });

    if (!transaction) {
      return NextResponse.json({ error: 'Transaction not found' }, { status: 404 });
    }

    // Check authorization
    if (transaction.buyerId !== (await prisma.user.findUnique({ where: { email: session.user.email } }))?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    return NextResponse.json(transaction);

  } catch (error) {

    return NextResponse.json(
      { error: 'Failed to fetch reservation' },
      { status: 500 }
    );
  }
}