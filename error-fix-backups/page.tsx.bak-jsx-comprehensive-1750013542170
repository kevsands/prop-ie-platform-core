'use client';

import React, { useState } from 'react';
import { 
  Calendar, 
  Clock, 
  CheckCircle, 
  AlertCircle, 
  Target,
  Filter,
  Download,
  ZoomIn,
  ZoomOut,
  Play,
  Pause,
  RotateCcw,
  Building,
  Users,
  FileText,
  AlertTriangle,
  TrendingUp,
  Activity,
  ChevronLeft,
  ChevronRight,
  Plus,
  Eye,
  Settings
} from 'lucide-react';

export default function DeveloperTimelinePage() {
  const [activeView, setActiveView] = useState('gantt');
  const [selectedProjects, setSelectedProjects] = useState(['all']);
  const [timeScale, setTimeScale] = useState('months');
  const [currentDate, setCurrentDate] = useState(new Date());

  // Portfolio timeline data
  const projects = [
    {
      id: 'fg',
      name: 'Fitzgerald Gardens',
      status: 'active',
      progress: 75,
      startDate: '2023-01-15',
      endDate: '2025-03-31',
      phases: [
        { id: 1, name: 'Site Preparation', start: '2023-01-15', end: '2023-06-30', progress: 100, status: 'completed' },
        { id: 2, name: 'Foundation & Structure', start: '2023-04-01', end: '2024-12-31', progress: 85, status: 'in_progress' },
        { id: 3, name: 'Building Envelope', start: '2024-06-01', end: '2025-02-28', progress: 45, status: 'in_progress' },
        { id: 4, name: 'Internal Fit-out', start: '2024-11-01', end: '2025-03-31', progress: 0, status: 'pending' }
      ],
      milestones: [
        { id: 1, name: 'Planning Approval', date: '2023-02-15', status: 'completed' },
        { id: 2, name: 'Foundation Complete', date: '2024-01-30', status: 'completed' },
        { id: 3, name: 'Structure Complete', date: '2024-08-15', status: 'at_risk' },
        { id: 4, name: 'Handover', date: '2025-03-31', status: 'pending' }
      ],
      team: 18,
      budget: '€48.0M',
      location: 'Drogheda'
    },
    {
      id: 'ew',
      name: 'Ellwood',
      status: 'active',
      progress: 90,
      startDate: '2022-08-01',
      endDate: '2024-12-31',
      phases: [
        { id: 1, name: 'Site Preparation', start: '2022-08-01', end: '2023-01-31', progress: 100, status: 'completed' },
        { id: 2, name: 'Foundation & Structure', start: '2022-12-01', end: '2023-11-30', progress: 100, status: 'completed' },
        { id: 3, name: 'Building Envelope', start: '2023-06-01', end: '2024-04-30', progress: 100, status: 'completed' },
        { id: 4, name: 'Internal Fit-out', start: '2023-11-01', end: '2024-12-31', progress: 75, status: 'in_progress' }
      ],
      milestones: [
        { id: 1, name: 'Planning Approval', date: '2022-09-15', status: 'completed' },
        { id: 2, name: 'Foundation Complete', date: '2023-03-30', status: 'completed' },
        { id: 3, name: 'Structure Complete', date: '2023-11-15', status: 'completed' },
        { id: 4, name: 'Handover', date: '2024-12-31', status: 'on_track' }
      ],
      team: 15,
      budget: '€32.5M',
      location: 'Dublin 15'
    },
    {
      id: 'bv',
      name: 'Ballymakenny View',
      status: 'active',
      progress: 35,
      startDate: '2024-03-01',
      endDate: '2026-06-30',
      phases: [
        { id: 1, name: 'Site Preparation', start: '2024-03-01', end: '2024-08-31', progress: 100, status: 'completed' },
        { id: 2, name: 'Foundation & Structure', start: '2024-06-01', end: '2025-08-31', progress: 25, status: 'in_progress' },
        { id: 3, name: 'Building Envelope', start: '2025-03-01', end: '2026-02-28', progress: 0, status: 'pending' },
        { id: 4, name: 'Internal Fit-out', start: '2025-10-01', end: '2026-06-30', progress: 0, status: 'pending' }
      ],
      milestones: [
        { id: 1, name: 'Planning Approval', date: '2024-04-15', status: 'completed' },
        { id: 2, name: 'Foundation Complete', date: '2024-12-30', status: 'on_track' },
        { id: 3, name: 'Structure Complete', date: '2025-08-15', status: 'pending' },
        { id: 4, name: 'Handover', date: '2026-06-30', status: 'pending' }
      ],
      team: 12,
      budget: '€28.8M',
      location: 'Drogheda'
    }
  ];

  const portfolioStats = {
    totalProjects: projects.length,
    activePhases: projects.reduce((acc, project) => acc + project.phases.filter(p => p.status === 'in_progress').length, 0),
    completedMilestones: projects.reduce((acc, project) => acc + project.milestones.filter(m => m.status === 'completed').length, 0),
    upcomingDeadlines: 8,
    criticalPath: 'Fitzgerald Gardens - Structure Complete',
    portfolioProgress: Math.round(projects.reduce((acc, project) => acc + project.progress, 0) / projects.length)
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'bg-green-500';
      case 'in_progress': return 'bg-blue-500';
      case 'at_risk': return 'bg-yellow-500';
      case 'delayed': return 'bg-red-500';
      case 'on_track': return 'bg-green-400';
      case 'pending': return 'bg-gray-300';
      default: return 'bg-gray-300';
    }
  };

  const getMilestoneIcon = (status) => {
    switch (status) {
      case 'completed': return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'at_risk': return <AlertTriangle className="w-4 h-4 text-yellow-600" />;
      case 'on_track': return <Target className="w-4 h-4 text-green-600" />;
      case 'delayed': return <AlertCircle className="w-4 h-4 text-red-600" />;
      default: return <Clock className="w-4 h-4 text-gray-600" />;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Portfolio Timeline</h1>
              <p className="text-sm text-gray-500">Cross-project timeline and milestone tracking</p>
            </div>
            <div className="flex items-center space-x-3">
              <button className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 flex items-center">
                <Download className="w-4 h-4 mr-2" />
                Export Timeline
              </button>
              <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center">
                <Plus className="w-4 h-4 mr-2" />
                Add Milestone
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Portfolio Stats */}
        <div className="grid grid-cols-1 md:grid-cols-6 gap-6 mb-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Building className="w-8 h-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Active Projects</p>
                <p className="text-2xl font-bold text-gray-900">{portfolioStats.totalProjects}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Activity className="w-8 h-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Active Phases</p>
                <p className="text-2xl font-bold text-gray-900">{portfolioStats.activePhases}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <CheckCircle className="w-8 h-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Milestones</p>
                <p className="text-2xl font-bold text-gray-900">{portfolioStats.completedMilestones}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <AlertTriangle className="w-8 h-8 text-yellow-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Deadlines</p>
                <p className="text-2xl font-bold text-gray-900">{portfolioStats.upcomingDeadlines}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <TrendingUp className="w-8 h-8 text-purple-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Progress</p>
                <p className="text-2xl font-bold text-gray-900">{portfolioStats.portfolioProgress}%</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Target className="w-8 h-8 text-red-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Critical Path</p>
                <p className="text-xs font-medium text-gray-900">FG - Structure</p>
              </div>
            </div>
          </div>
        </div>

        {/* Controls */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="p-4 border-b border-gray-200">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
              <div className="flex items-center space-x-4">
                <div className="flex space-x-1">
                  {['gantt', 'milestones', 'calendar'].map((view) => (
                    <button
                      key={view}
                      onClick={() => setActiveView(view)}
                      className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                        activeView === view
                          ? 'bg-blue-100 text-blue-700'
                          : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                      }`}
                    >
                      {view.charAt(0).toUpperCase() + view.slice(1)}
                    </button>
                  ))}
                </div>
                <select
                  value={timeScale}
                  onChange={(e) => setTimeScale(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="weeks">Weeks</option>
                  <option value="months">Months</option>
                  <option value="quarters">Quarters</option>
                </select>
              </div>
              <div className="flex items-center space-x-2">
                <button className="p-2 border border-gray-300 rounded-md hover:bg-gray-50">
                  <ZoomOut className="w-4 h-4" />
                </button>
                <button className="p-2 border border-gray-300 rounded-md hover:bg-gray-50">
                  <ZoomIn className="w-4 h-4" />
                </button>
                <button className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 flex items-center">
                  <Filter className="w-4 h-4 mr-2" />
                  Filter
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Gantt Chart View */}
        {activeView === 'gantt' && (
          <div className="bg-white rounded-lg shadow">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Portfolio Gantt Chart</h2>
              <p className="text-sm text-gray-500 mt-1">Project phases and dependencies across all developments</p>
            </div>
            <div className="p-6">
              <div className="space-y-8">
                {projects.map((project) => (
                  <div key={project.id} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-4">
                        <h3 className="text-lg font-medium text-gray-900">{project.name}</h3>
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          project.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                        }`}>
                          {project.status}
                        </span>
                        <span className="text-sm text-gray-500">{project.location}</span>
                      </div>
                      <div className="flex items-center space-x-4 text-sm text-gray-600">
                        <span>{project.budget}</span>
                        <span>{project.team} team members</span>
                        <span>{project.progress}% complete</span>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      {project.phases.map((phase) => (
                        <div key={phase.id} className="flex items-center space-x-4">
                          <div className="w-48 text-sm text-gray-700">{phase.name}</div>
                          <div className="flex-1 relative">
                            <div className="h-6 bg-gray-200 rounded-full relative overflow-hidden">
                              <div 
                                className={`h-full rounded-full transition-all duration-300 ${getStatusColor(phase.status)}`}
                                style={{ width: `${phase.progress}%` }}
                              />
                              <div className="absolute inset-0 flex items-center justify-center text-xs font-medium text-white">
                                {phase.progress}%
                              </div>
                            </div>
                          </div>
                          <div className="w-32 text-sm text-gray-600 text-right">
                            {new Date(phase.start).toLocaleDateString()} - {new Date(phase.end).toLocaleDateString()}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Milestones View */}
        {activeView === 'milestones' && (
          <div className="bg-white rounded-lg shadow">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Portfolio Milestones</h2>
              <p className="text-sm text-gray-500 mt-1">Critical milestones across all projects</p>
            </div>
            <div className="p-6">
              <div className="space-y-6">
                {projects.map((project) => (
                  <div key={project.id} className="border rounded-lg p-4">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">{project.name}</h3>
                    <div className="space-y-3">
                      {project.milestones.map((milestone) => (
                        <div key={milestone.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center space-x-3">
                            {getMilestoneIcon(milestone.status)}
                            <div>
                              <p className="font-medium text-gray-900">{milestone.name}</p>
                              <p className="text-sm text-gray-600">{new Date(milestone.date).toLocaleDateString()}</p>
                            </div>
                          </div>
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                            milestone.status === 'completed' ? 'bg-green-100 text-green-800' :
                            milestone.status === 'at_risk' ? 'bg-yellow-100 text-yellow-800' :
                            milestone.status === 'on_track' ? 'bg-blue-100 text-blue-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {milestone.status.replace('_', ' ')}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Calendar View */}
        {activeView === 'calendar' && (
          <div className="bg-white rounded-lg shadow">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Calendar View</h2>
              <p className="text-sm text-gray-500 mt-1">Timeline calendar with key dates and milestones</p>
            </div>
            <div className="p-6">
              <div className="text-center py-12">
                <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">Calendar View</h3>
                <p className="text-gray-500">Interactive calendar view will be implemented here</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}