"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Users, FileText, Calendar, Activity, CheckCircle, AlertCircle } from 'lucide-react';
import { DialogCollaborationProject, DialogTask, DialogDrawing } from '@/types/collaboration';
import { collaborationService } from '@/lib/collaboration';
import Link from 'next/link';

interface ProjectStats {
  totalTasks: number;
  completedTasks: number;
  pendingDrawings: number;
  recentActivity: number;
}

interface ProjectDashboardProps {
  projectId: string;
}

export const ProjectDashboard: React.FC<ProjectDashboardProps> = ({ projectId }) => {
  const [project, setProject] = useState<DialogCollaborationProject | null>(null);
  const [stats, setStats] = useState<ProjectStats>({
    totalTasks: 0,
    completedTasks: 0,
    pendingDrawings: 0,
    recentActivity: 0
  });
  const [recentTasks, setRecentTasks] = useState<DialogTask[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchProjectData();
  }, [projectId]);

  const fetchProjectData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch project details
      const projectData = await collaborationService.getProject(projectId);
      setProject(projectData);

      // Fetch project stats
      const tasksData = await collaborationService.getTasks(projectId);
      const drawingsData = await collaborationService.getDrawings(projectId);

      const completedTasks = tasksData.filter((task: any) => task.status === 'completed').length;
      const pendingDrawings = drawingsData.filter((drawing: any) => drawing.status === 'pending_review').length;

      setStats({
        totalTasks: tasksData.length,
        completedTasks,
        pendingDrawings,
        recentActivity: 5 // Mock recent activity count
      });

      // Get recent tasks
      setRecentTasks(tasksData.slice(0, 5));
    } catch (error) {
      console.error('Error fetching project data:', error);
      setError('Failed to load project data');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error || !project) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <Card className="text-center p-6">
          <AlertCircle className="mx-auto mb-4 h-12 w-12 text-red-500" />
          <p className="text-red-500">{error || 'Project not found'}</p>
          <Button className="mt-4" onClick={fetchProjectData}>Retry</Button>
        </Card>
      </div>
    );
  }

  const progressPercentage = stats.totalTasks > 0 
    ? Math.round((stats.completedTasks / stats.totalTasks) * 100)
    : 0;

  return (
    <div className="space-y-6">
      {/* Project Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between">
        <div>
          <h1 className="text-3xl font-bold">{project.name}</h1>
          <p className="text-gray-600 mt-2">{project.description}</p>
        </div>
        <div className="mt-4 md:mt-0">
          <Badge 
            variant={project.status === 'completed' ? 'success' : 'secondary'}
            className="capitalize"
          >
            {project.status.replace('_', ' ')}
          </Badge>
        </div>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Tasks</CardTitle>
            <FileText className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalTasks}</div>
            <Progress value={progressPercentage} className="mt-2" />
            <p className="text-xs text-muted-foreground mt-2">
              {progressPercentage}% complete
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Pending Drawings</CardTitle>
            <FileText className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.pendingDrawings}</div>
            <p className="text-xs text-muted-foreground mt-2">Awaiting review</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Team Members</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{project.participants.length}</div>
            <p className="text-xs text-muted-foreground mt-2">Active collaborators</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Recent Activity</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.recentActivity}</div>
            <p className="text-xs text-muted-foreground mt-2">In the last 24h</p>
          </CardContent>
        </Card>
      </div>

      {/* Recent Tasks */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Tasks</CardTitle>
          <CardDescription>Latest updates from your team</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {recentTasks.map((task: any) => (
              <div key={task.id} className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  {task.status === 'completed' ? (
                    <CheckCircle className="h-5 w-5 text-green-500" />
                  ) : (
                    <div className="h-5 w-5 rounded-full border-2 border-gray-300" />
                  )}
                  <div>
                    <p className="font-medium">{task.name}</p>
                    <p className="text-sm text-gray-600">{task.description}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge variant="outline" className="capitalize">
                    {task.priority}
                  </Badge>
                  <span className="text-sm text-gray-500">
                    Due {new Date(task.dueDate).toLocaleDateString()}
                  </span>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-4">
            <Link href={`/projects/${projectId}/tasks`}>
              <Button variant="outline" className="w-full">View All Tasks</Button>
            </Link>
          </div>
        </CardContent>
      </Card>

      {/* Quick Actions */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Link href={`/projects/${projectId}/drawings`}>
          <Card className="cursor-pointer hover:shadow-md transition-shadow">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <FileText className="h-5 w-5" />
                <span>Manage Drawings</span>
              </CardTitle>
              <CardDescription>Upload and review project drawings</CardDescription>
            </CardHeader>
          </Card>
        </Link>

        <Link href={`/projects/${projectId}/tasks`}>
          <Card className="cursor-pointer hover:shadow-md transition-shadow">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Activity className="h-5 w-5" />
                <span>Task Board</span>
              </CardTitle>
              <CardDescription>Manage project tasks and deadlines</CardDescription>
            </CardHeader>
          </Card>
        </Link>

        <Link href={`/projects/${projectId}/calendar`}>
          <Card className="cursor-pointer hover:shadow-md transition-shadow">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Calendar className="h-5 w-5" />
                <span>Project Calendar</span>
              </CardTitle>
              <CardDescription>View milestones and deadlines</CardDescription>
            </CardHeader>
          </Card>
        </Link>
      </div>
    </div>
  );
};