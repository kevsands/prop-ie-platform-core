'use client';

import React, { useState, useEffect } from 'react';
import { Building, CreditCard, Home, TrendingUp, Calendar, BarChart3, FileText, Shield, ArrowUpDown, ChevronRight, Users, Clock, CheckCircle, AlertCircle } from 'lucide-react';
import Link from 'next/link';
import { formatDistance } from 'date-fns';
import { transactionCoordinator } from '@/services/transactionCoordinator';
import { notificationService, NotificationData } from '@/services/notificationService';

// Define simplified Card components for local use
const Card = ({ className = "", children }) => (
  <div className={`rounded-lg border bg-white shadow-sm ${className}`}>
    {children}
  </div>
);

const CardHeader = ({ className = "", children }) => (
  <div className={`flex flex-col space-y-1.5 p-6 ${className}`}>
    {children}
  </div>
);

const CardTitle = ({ className = "", children }) => (
  <h3 className={`text-lg font-semibold leading-none tracking-tight ${className}`}>
    {children}
  </h3>
);

const CardContent = ({ className = "", children }) => (
  <div className={`p-6 pt-0 ${className}`}>
    {children}
  </div>
);

// Simple table components
const Table = ({ className = "", children, ...props }) => (
  <div className="relative w-full overflow-auto">
    <table className={`w-full caption-bottom text-sm ${className}`} {...props}>
      {children}
    </table>
  </div>
);

const TableHeader = ({ children, ...props }) => (
  <thead className="[&_tr]:border-b" {...props}>
    {children}
  </thead>
);

const TableBody = ({ children, ...props }) => (
  <tbody className="[&_tr:last-child]:border-0" {...props}>
    {children}
  </tbody>
);

const TableRow = ({ className = "", children, ...props }) => (
  <tr className={`border-b transition-colors hover:bg-gray-50 ${className}`} {...props}>
    {children}
  </tr>
);

const TableHead = ({ className = "", children, ...props }) => (
  <th className={`h-10 px-2 text-left align-middle font-medium text-gray-500 ${className}`} {...props}>
    {children}
  </th>
);

const TableCell = ({ className = "", children, ...props }) => (
  <td className={`p-2 align-middle ${className}`} {...props}>
    {children}
  </td>
);

// Simple ProjectList component
const ProjectList = ({ projects, title, description }) => {
  if (!projects?.length) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>{title}</CardTitle>
          {description && <p className="text-sm text-gray-500">{description}</p>}
        </CardHeader>
        <CardContent>
          <p className="text-center text-gray-500 py-6">No projects found</p>
        </CardContent>
      </Card>
    );
  }
  
  return (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        {description && <p className="text-sm text-gray-500">{description}</p>}
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>
                <div className="flex items-center">
                  Name
                  <ArrowUpDown className="ml-2 h-4 w-4" />
                </div>
              </TableHead>
              <TableHead>
                <div className="flex items-center">
                  Status
                  <ArrowUpDown className="ml-2 h-4 w-4" />
                </div>
              </TableHead>
              <TableHead>
                <div className="flex items-center">
                  Completion
                  <ArrowUpDown className="ml-2 h-4 w-4" />
                </div>
              </TableHead>
              <TableHead>
                <div className="flex items-center">
                  Location
                  <ArrowUpDown className="ml-2 h-4 w-4" />
                </div>
              </TableHead>
              <TableHead>
                <div className="flex items-center">
                  Properties
                  <ArrowUpDown className="ml-2 h-4 w-4" />
                </div>
              </TableHead>
              <TableHead>Last Updated</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {projects.map((project) => (
              <TableRow key={project.id}>
                <TableCell className="font-medium">
                  <div>
                    <Link 
                      href={`/developer/projects/${project.id}`}
                      className="text-blue-600 hover:underline font-semibold"
                    >
                      {project.name}
                    </Link>
                    {project.phase && (
                      <div className="text-xs text-gray-500 mt-1">{project.phase}</div>
                    )}
                  </div>
                </TableCell>
                <TableCell>
                  <span
                    className={`px-2 py-1 rounded-full text-xs font-medium ${
                      project.status === 'Active' || project.status === 'Now Selling' ? 'bg-green-100 text-green-800' :
                      project.status === 'Launching Soon' ? 'bg-blue-100 text-blue-800' :
                      project.status === 'Completed' ? 'bg-gray-100 text-gray-800' :
                      'bg-yellow-100 text-yellow-800'
                    }`}
                  >
                    {project.status}
                  </span>
                </TableCell>
                <TableCell>
                  <div className="flex items-center">
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-blue-600 h-2 rounded-full" 
                        style={ width: `${project.completionPercentage}%` }
                      />
                    </div>
                    <span className="ml-2 text-xs text-gray-500">
                      {project.completionPercentage}%
                    </span>
                  </div>
                </TableCell>
                <TableCell>{project.location}</TableCell>
                <TableCell>
                  <div>
                    <div className="font-medium">{project.propertyCount} units</div>
                    {project.sold !== undefined && (
                      <div className="text-xs text-gray-500">
                        {project.sold} sold • {project.reserved} reserved • {project.available} available
                      </div>
                    )}
                  </div>
                </TableCell>
                <TableCell>
                  <div>
                    <div className="text-sm">{formatDistance(new Date(project.lastUpdated), new Date(), { addSuffix: true })}</div>
                    {project.totalValue && (
                      <div className="text-xs text-gray-500">{project.totalValue}</div>
                    )}
                  </div>
                </TableCell>
                <TableCell className="text-right">
                  <Link 
                    href={`/developer/projects/${project.id}`}
                    className="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors h-8 px-3 border border-gray-300 bg-white text-gray-700 hover:bg-gray-50"
                  >
                    Manage
                    <ChevronRight className="ml-1 h-4 w-4" />
                  </Link>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};

interface DeveloperTransaction {
  id: string;
  buyerId: string;
  projectId: string;
  status: string;
  createdAt: Date;
  propertyDetails: {
    name: string;
    price: number;
    address: string;
  };
  buyerDetails: {
    name: string;
    email: string;
  };
  milestones: Array<{
    name: string;
    status: string;
    dueDate?: Date;
  }>\n  );
}

export default function Page(): React.ReactElement {
  const [activeTransactionssetActiveTransactions] = useState<DeveloperTransaction[]>([]);
  const [loadingsetLoading] = useState(true);
  const [developerNotificationssetDeveloperNotifications] = useState<NotificationData[]>([]);
  
  // Helper function to get property details for Prop's developments
  const getPropPropertyDetails = (projectId: string) => {
    const propDevelopments = {
      'fitzgerald-gardens': {
        name: 'Fitzgerald Gardens - 3 Bed Semi-Detached House',
        price: 375000,
        address: 'Plot 45, Fitzgerald Gardens, Drogheda, Co. Louth'
      },
      'ballymakenny-view': {
        name: 'Ballymakenny View - 3 Bed House',
        price: 420000,
        address: 'Ballymakenny View, Drogheda, Co. Louth'
      },
      'ellwood': {
        name: 'Ellwood - 2 Bed Apartment',
        price: 295000,
        address: 'Ellwood, Celbridge, Co. Kildare'
      }
    };
    
    return propDevelopments[projectId] || {
      name: 'Prop Development Property',
      price: 350000,
      address: 'Prop Development, Ireland'
    };
  };

  // Check for active transactions for this developer
  useEffect(() => {
    // Load developer notifications
    const loadDeveloperNotifications = () => {
      const developerId = 'prop-developer';
      
      // Load existing notifications
      const notifications = notificationService.getUserNotifications(developerId);
      setDeveloperNotifications(notifications);
      
      // Subscribe to new notifications
      const handleNewNotification = (notification: NotificationData) => {
        if (notification.recipient === developerId) {
          setDeveloperNotifications(prev => [notification, ...prev]);
        }
      };
      
      notificationService.onNewNotification(handleNewNotification);
      
      return () => {
        notificationService.removeListener('notification', handleNewNotification);
      };
    };
    
    loadDeveloperNotifications();
    
    const loadDeveloperTransactions = () => {
      // Check localStorage for recent transactions from this developer's projects
      const allTransactions: DeveloperTransaction[] = [];
      
      // Check for recent completed transactions
      const recentTransactionData = localStorage.getItem('lastTransactionData');
      if (recentTransactionData) {
        try {
          const transaction = JSON.parse(recentTransactionData);
          
          // Create developer transaction record for Prop's developments
          const propertyDetails = getPropPropertyDetails(transaction.projectId);
          
          const developerTransaction: DeveloperTransaction = {
            id: transaction.id,
            buyerId: transaction.buyerId,
            projectId: transaction.projectId,
            status: transaction.status,
            createdAt: new Date(transaction.createdAt),
            propertyDetails,
            buyerDetails: {
              name: 'John Doe',
              email: 'john.doe@email.com'
            },
            milestones: transaction.milestones || []
          };
          
          allTransactions.push(developerTransaction);
        } catch (error) {
          console.error('Error parsing transaction data:', error);
        }
      }
      
      setActiveTransactions(allTransactions);
      setLoading(false);
    };
    
    loadDeveloperTransactions();
  }, []);

  // Enhanced mock data for Prop Ireland's three flagship developments
  const mockData = {
    activeProjects: 3,
    propertiesAvailable: 127,
    totalSales: 47500000, // €47.5M across all three developments
    projects: [
      { 
        id: 'fitzgerald-gardens', 
        name: 'Fitzgerald Gardens', 
        status: 'Active', 
        completionPercentage: 85,
        location: 'Drogheda, Co. Louth',
        propertyCount: 97,
        lastUpdated: new Date(2025, 513).toISOString(),
        sold: 12,
        reserved: 15,
        available: 70,
        totalValue: '€31.2M',
        phase: 'Phase 3 - Final Release'
      },
      { 
        id: 'ballymakenny-view', 
        name: 'Ballymakenny View', 
        status: 'Launching Soon', 
        completionPercentage: 95,
        location: 'Ballymakenny, Drogheda',
        propertyCount: 45,
        lastUpdated: new Date(2025, 510).toISOString(),
        sold: 0,
        reserved: 8,
        available: 37,
        totalValue: '€18.5M',
        phase: 'Phase 1 - Pre-Launch'
      },
      { 
        id: 'ellwood', 
        name: 'Ellwood', 
        status: 'Now Selling', 
        completionPercentage: 75,
        location: 'Celbridge, Co. Kildare',
        propertyCount: 63,
        lastUpdated: new Date(2025, 512).toISOString(),
        sold: 18,
        reserved: 12,
        available: 33,
        totalValue: '€29.8M',
        phase: 'Phase 2 - Premium Release'
      }
    ]
  };

  return (
    <div className="p-4">
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-2">Prop Ireland - Developer Dashboard</h1>
        <p className="text-gray-600">Manage your flagship developments: Fitzgerald Gardens, Ballymakenny View & Ellwood</p>
      </div>

      {/* KPI widgets row */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        {/* Active Projects */}
        <Card className="border shadow-sm">
          <CardContent className="p-4">
            <div className="flex justify-between items-start mb-2">
              <h3 className="text-sm font-medium text-gray-500">Active Projects</h3>
              <div className="p-2 rounded-full bg-blue-100">
                <Building className="h-4 w-4 text-blue-600" />
              </div>
            </div>
            <div className="flex items-baseline">
              <span className="text-2xl font-semibold mr-2">{mockData.activeProjects}</span>
              <span className="text-sm bg-green-100 text-green-800 px-2 py-0.5 rounded-full">+5.2%</span>
            </div>
          </CardContent>
        </Card>

        {/* Properties Available */}
        <Card className="border shadow-sm">
          <CardContent className="p-4">
            <div className="flex justify-between items-start mb-2">
              <h3 className="text-sm font-medium text-gray-500">Properties Available</h3>
              <div className="p-2 rounded-full bg-green-100">
                <Home className="h-4 w-4 text-green-600" />
              </div>
            </div>
            <div className="flex items-baseline">
              <span className="text-2xl font-semibold">{mockData.propertiesAvailable}</span>
            </div>
          </CardContent>
        </Card>

        {/* Total Sales */}
        <Card className="border shadow-sm">
          <CardContent className="p-4">
            <div className="flex justify-between items-start mb-2">
              <h3 className="text-sm font-medium text-gray-500">Total Sales</h3>
              <div className="p-2 rounded-full bg-indigo-100">
                <TrendingUp className="h-4 w-4 text-indigo-600" />
              </div>
            </div>
            <div className="flex items-baseline">
              <span className="text-2xl font-semibold mr-2">€{(mockData.totalSales / 1000000).toFixed(1)}M</span>
              <span className="text-sm bg-green-100 text-green-800 px-2 py-0.5 rounded-full">+15.2%</span>
            </div>
          </CardContent>
        </Card>

        {/* Revenue */}
        <Card className="border shadow-sm">
          <CardContent className="p-4">
            <div className="flex justify-between items-start mb-2">
              <h3 className="text-sm font-medium text-gray-500">Revenue</h3>
              <div className="p-2 rounded-full bg-purple-100">
                <CreditCard className="h-4 w-4 text-purple-600" />
              </div>
            </div>
            <div className="flex items-baseline">
              <span className="text-2xl font-semibold mr-2">€12.4M</span>
              <span className="text-sm bg-green-100 text-green-800 px-2 py-0.5 rounded-full">+18.7%</span>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Active Transactions Section */}
      {activeTransactions.length> 0 && (
        <div className="mb-6">
          <Card className="border">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5 text-blue-600" />
                Active Transactions
              </CardTitle>
              <p className="text-sm text-gray-500">Recent property purchases from your developments</p>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {activeTransactions.map((transaction) => (
                  <div key={transaction.id} className="border rounded-lg p-4 bg-gradient-to-r from-green-50 to-blue-50">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <h3 className="font-semibold text-gray-900 mb-1">
                          {transaction.propertyDetails.name}
                        </h3>
                        <p className="text-sm text-gray-600 mb-1">
                          {transaction.propertyDetails.address}
                        </p>
                        <p className="text-sm text-gray-500">
                          Transaction ID: <span className="font-mono text-blue-600">{transaction.id}</span>
                        </p>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold text-green-600">
                          €{transaction.propertyDetails.price.toLocaleString()}
                        </div>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          transaction.status === 'INITIATED' ? 'bg-blue-100 text-blue-800' :
                          transaction.status === 'COMPLETED' ? 'bg-green-100 text-green-800' :
                          'bg-yellow-100 text-yellow-800'
                        }`}>
                          {transaction.status.toLowerCase().replace('_', ' ')}
                        </span>
                      </div>
                    </div>
                    
                    <div className="grid md:grid-cols-2 gap-4 mb-4">
                      <div className="bg-white rounded p-3">
                        <h4 className="font-medium text-gray-900 mb-2 flex items-center gap-2">
                          <Users className="h-4 w-4" />
                          Buyer Information
                        </h4>
                        <p className="text-sm text-gray-700">{transaction.buyerDetails.name}</p>
                        <p className="text-sm text-gray-500">{transaction.buyerDetails.email}</p>
                        <p className="text-xs text-gray-500 mt-1">
                          Transaction initiated: {formatDistance(transaction.createdAt, new Date(), { addSuffix: true })}
                        </p>
                      </div>
                      
                      <div className="bg-white rounded p-3">
                        <h4 className="font-medium text-gray-900 mb-2 flex items-center gap-2">
                          <Clock className="h-4 w-4" />
                          Transaction Progress
                        </h4>
                        {transaction.milestones.length> 0 ? (
                          <div className="space-y-1">
                            {transaction.milestones.slice(0).map((milestoneindex) => (
                              <div key={index} className="flex items-center gap-2 text-sm">
                                {milestone.status === 'COMPLETED' ? (
                                  <CheckCircle className="h-3 w-3 text-green-600" />
                                ) : milestone.status === 'IN_PROGRESS' ? (
                                  <Clock className="h-3 w-3 text-blue-600" />
                                ) : (
                                  <div className="h-3 w-3 rounded-full border border-gray-300" />
                                )}
                                <span className={`${
                                  milestone.status === 'COMPLETED' ? 'text-green-700' :
                                  milestone.status === 'IN_PROGRESS' ? 'text-blue-700' :
                                  'text-gray-500'
                                }`}>
                                  {milestone.name}
                                </span>
                              </div>
                            ))}
                            {transaction.milestones.length> 3 && (
                              <p className="text-xs text-gray-500">
                                +{transaction.milestones.length - 3} more milestones
                              </p>
                            )}
                          </div>
                        ) : (
                          <p className="text-sm text-gray-500">Milestones being set up...</p>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex gap-3">
                      <button
                        onClick={() => alert(`Contact buyer: ${transaction.buyerDetails.email}`)}
                        className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors text-sm"
                      >
                        Contact Buyer
                      </button>
                      <button
                        onClick={() => alert(`View transaction details: ${transaction.id}`)}
                        className="flex-1 bg-white text-blue-600 border border-blue-300 px-4 py-2 rounded-lg font-medium hover:bg-blue-50 transition-colors text-sm"
                      >
                        View Details
                      </button>
                      <button
                        onClick={() => alert(`Update transaction: ${transaction.id}`)}
                        className="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-green-700 transition-colors text-sm"
                      >
                        Update Status
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Developer Notifications Section */}
      {developerNotifications.length> 0 && (
        <div className="mb-6">
          <Card className="border">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertCircle className="h-5 w-5 text-orange-600" />
                Developer Notifications
                <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-xs font-medium">
                  {developerNotifications.filter(n => !n.read).length} new
                </span>
              </CardTitle>
              <p className="text-sm text-gray-500">Transaction updates and buyer communications</p>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {developerNotifications.slice(0).map((notification) => (
                  <div key={notification.id} className={`border rounded-lg p-3 ${
                    notification.read ? 'bg-gray-50' : 'bg-blue-50 border-blue-200'
                  }`}>
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex-1">
                        <h3 className="font-semibold text-gray-900 mb-1">
                          {notification.title}
                        </h3>
                        <p className="text-sm text-gray-600 mb-2">
                          {notification.message}
                        </p>
                        <div className="flex items-center gap-4 text-xs text-gray-500">
                          <span>{new Date(notification.timestamp).toLocaleString()}</span>
                          {notification.transactionId && (
                            <span className="font-mono bg-gray-100 px-2 py-1 rounded">
                              {notification.transactionId}
                            </span>
                          )}
                        </div>
                      </div>
                      <div className={`w-3 h-3 rounded-full ${
                        notification.type === 'transaction' ? 'bg-blue-500' :
                        notification.type === 'milestone' ? 'bg-purple-500' :
                        notification.type === 'payment' ? 'bg-green-500' :
                        'bg-gray-400'
                      }`} />
                    </div>
                    
                    {notification.actions && notification.actions.length> 0 && (
                      <div className="flex gap-2 pt-2 border-t">
                        {notification.actions.map((actionidx) => (
                          <button
                            key={idx}
                            onClick={() => {
                              if (action.action === 'contact_buyer') {
                                alert('Contact buyer feature coming soon!');
                              } else if (action.action === 'view_transaction') {
                                alert(`View transaction ${notification.transactionId}`);
                              } else if (action.action === 'update_milestone') {
                                alert('Milestone update feature coming soon!');
                              }
                            }
                            className={`text-xs px-3 py-1 rounded font-medium transition-colors ${
                              action.variant === 'primary' ? 
                                'bg-blue-600 text-white hover:bg-blue-700' :
                              action.variant === 'danger' ? 
                                'bg-red-600 text-white hover:bg-red-700' :
                                'bg-gray-100 text-gray-700 hover:bg-gray-200'
                            }`}
                          >
                            {action.label}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
              
              {developerNotifications.length> 4 && (
                <div className="mt-4 text-center">
                  <button className="text-sm text-blue-600 hover:underline">
                    View all {developerNotifications.length} notifications
                  </button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* Simple tabs navigation */}
      <div className="border-b mb-6">
        <div className="flex space-x-6">
          <button className="px-4 py-2 border-b-2 border-blue-600 text-blue-600 font-medium">Overview</button>
          <button className="px-4 py-2 text-gray-500 hover:text-gray-700">Projects</button>
          <button className="px-4 py-2 text-gray-500 hover:text-gray-700">Sales</button>
          <button className="px-4 py-2 text-gray-500 hover:text-gray-700">Financial</button>
        </div>
      </div>

      {/* Projects List */}
      <div className="mb-6">
        <ProjectList 
          projects={mockData.projects}
          title="Prop Ireland Flagship Developments"
          description="Monitor and manage Fitzgerald Gardens, Ballymakenny View & Ellwood"
        />
      </div>

      {/* Sales Performance Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <Card className="border">
          <CardHeader>
            <CardTitle>Monthly Sales Performance</CardTitle>
            <p className="text-sm text-gray-500">Units sold across all developments</p>
          </CardHeader>
          <CardContent>
            <div className="h-64">
              {/* Placeholder for chart */}
              <div className="w-full h-full bg-gradient-to-br from-blue-50 to-indigo-100 rounded-lg flex items-center justify-center">
                <div className="text-center">
                  <TrendingUp className="h-12 w-12 text-blue-600 mx-auto mb-2" />
                  <p className="text-blue-600 font-medium">Sales Trending Up 15.2%</p>
                  <p className="text-sm text-gray-500">47 units sold this quarter</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border">
          <CardHeader>
            <CardTitle>Development Status Overview</CardTitle>
            <p className="text-sm text-gray-500">Current status of all three developments</p>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Fitzgerald Gardens (85%)</span>
                <span className="text-xs text-green-600">Active - Final Release</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={ width: '85%' }></div>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Ballymakenny View (95%)</span>
                <span className="text-xs text-blue-600">Launching Soon</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-blue-500 h-2 rounded-full" style={ width: '95%' }></div>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Ellwood (75%)</span>
                <span className="text-xs text-green-600">Now Selling</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full" style={ width: '75%' }></div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <Card className="border hover:shadow-md transition-shadow cursor-pointer">
          <CardContent className="p-4">
            <Link href="/developer/dashboard" className="block">
              <div className="flex items-center space-x-3">
                <div className="bg-purple-100 p-2 rounded-full">
                  <BarChart3 className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="font-medium">Advanced Dashboard</p>
                  <p className="text-xs text-gray-500">Enterprise analytics</p>
                </div>
              </div>
            </Link>
          </CardContent>
        </Card>
        
        <Card className="border hover:shadow-md transition-shadow cursor-pointer">
          <CardContent className="p-4">
            <Link href="/developer/htb" className="block">
              <div className="flex items-center space-x-3">
                <div className="bg-green-100 p-2 rounded-full">
                  <CreditCard className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="font-medium">HTB Management</p>
                  <p className="text-xs text-gray-500">Process claims</p>
                </div>
              </div>
            </Link>
          </CardContent>
        </Card>

        <Card className="border hover:shadow-md transition-shadow cursor-pointer">
          <CardContent className="p-4">
            <Link href="/developer/sales" className="block">
              <div className="flex items-center space-x-3">
                <div className="bg-blue-100 p-2 rounded-full">
                  <TrendingUp className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="font-medium">Sales Analytics</p>
                  <p className="text-xs text-gray-500">View performance</p>
                </div>
              </div>
            </Link>
          </CardContent>
        </Card>

        <Card className="border hover:shadow-md transition-shadow cursor-pointer">
          <CardContent className="p-4">
            <Link href="/developer/documents" className="block">
              <div className="flex items-center space-x-3">
                <div className="bg-purple-100 p-2 rounded-full">
                  <FileText className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="font-medium">Documents</p>
                  <p className="text-xs text-gray-500">Manage files</p>
                </div>
              </div>
            </Link>
          </CardContent>
        </Card>

        <Card className="border hover:shadow-md transition-shadow cursor-pointer">
          <CardContent className="p-4">
            <Link href="/developer/finance" className="block">
              <div className="flex items-center space-x-3">
                <div className="bg-indigo-100 p-2 rounded-full">
                  <TrendingUp className="h-5 w-5 text-indigo-600" />
                </div>
                <div>
                  <p className="font-medium">Financial Dashboard</p>
                  <p className="text-xs text-gray-500">Full financial suite</p>
                </div>
              </div>
            </Link>
          </CardContent>
        </Card>
        
        <Card className="border hover:shadow-md transition-shadow cursor-pointer">
          <CardContent className="p-4">
            <Link href="/admin" className="block">
              <div className="flex items-center space-x-3">
                <div className="bg-red-100 p-2 rounded-full">
                  <Shield className="h-5 w-5 text-red-600" />
                </div>
                <div>
                  <p className="font-medium">Admin Portal</p>
                  <p className="text-xs text-gray-500">Enterprise admin tools</p>
                </div>
              </div>
            </Link>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}