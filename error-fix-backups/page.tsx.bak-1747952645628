'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { 
  Calendar, CheckCircle, Clock, AlertTriangle, Users, 
  FileText, DollarSign, Target, GitBranch, BarChart2,
  Plus, Search, Filter, Download, Eye, Edit, Archive,
  Zap, Bot, TrendingUp, AlertCircle, ChevronRight,
  Layers, Settings, MessageSquare, PauseCircle
} from 'lucide-react';
import dynamic from 'next/dynamic';

// Gantt chart component temporarily disabled
// const GanttChart = dynamic(() => import('@/components/developer/GanttChart'), { ssr: false });

export default function ProjectManagementPage() {
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedProject, setSelectedProject] = useState('all');
  const [showGantt, setShowGantt] = useState(false);

  // Mock project data
  const projects = [
    {
      id: '1',
      name: 'Fitzgerald Gardens - Phase 2',
      development: 'Fitzgerald Gardens',
      status: 'in-progress',
      priority: 'high',
      progress: 68,
      startDate: '2023-09-01',
      endDate: '2024-03-31',
      budget: '€2.4M',
      spent: '€1.6M',
      team: 8,
      tasks: {
        total: 48,
        completed: 33,
        inProgress: 10,
        pending: 5
      },
      milestones: [
        { name: 'Foundation Complete', date: '2023-10-15', status: 'completed' },
        { name: 'Structure Complete', date: '2023-12-20', status: 'completed' },
        { name: 'MEP Installation', date: '2024-02-15', status: 'in-progress' },
        { name: 'Final Inspection', date: '2024-03-31', status: 'pending' }
      ],
      risks: 2,
      issues: 1,
      aiInsights: {
        delayRisk: 'Low',
        costOverrun: 'Medium',
        recommendations: [
          'Consider adding 2 more workers to MEP team to maintain schedule',
          'Review material costs for potential savings opportunities'
        ]
      }
    },
    {
      id: '2',
      name: 'Riverside Manor - Planning',
      development: 'Riverside Manor',
      status: 'planning',
      priority: 'medium',
      progress: 25,
      startDate: '2023-11-01',
      endDate: '2024-06-30',
      budget: '€0.8M',
      spent: '€0.2M',
      team: 4,
      tasks: {
        total: 24,
        completed: 6,
        inProgress: 5,
        pending: 13
      },
      milestones: [
        { name: 'Site Survey', date: '2023-11-30', status: 'completed' },
        { name: 'Planning Submission', date: '2024-01-15', status: 'in-progress' },
        { name: 'Planning Approval', date: '2024-04-01', status: 'pending' },
        { name: 'Contractor Selection', date: '2024-06-30', status: 'pending' }
      ],
      risks: 3,
      issues: 0,
      aiInsights: {
        delayRisk: 'Medium',
        costOverrun: 'Low',
        recommendations: [
          'Engage with planning authority early to expedite approval',
          'Begin contractor pre-qualification process now'
        ]
      }
    }
  ];

  return (
    <div className="p-6">
      {/* Header */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Project Management</h1>
            <p className="text-gray-600">AI-powered project tracking and optimization</p>
          </div>
          <Link
            href="/developer/projects/new"
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center"
          >
            <Plus className="w-5 h-5 mr-2" />
            New Project
          </Link>
        </div>

        {/* Project Selector and Controls */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <select
              value={selectedProject}
              onChange={(e) => setSelectedProject(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
            >
              <option value="all">All Projects</option>
              {projects.map(project => (
                <option key={project.id} value={project.id}>
                  {project.name}
                </option>
              ))}
            </select>

            <button
              onClick={() => setShowGantt(!showGantt)}
              className={`px-3 py-2 border rounded-lg text-sm flex items-center ${
                showGantt ? 'bg-blue-50 border-blue-300 text-blue-700' : 'border-gray-300 hover:bg-gray-50'
              }`}
            >
              <GitBranch className="w-4 h-4 mr-2" />
              Gantt View
            </button>

            <button className="px-3 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-50 flex items-center">
              <Filter className="w-4 h-4 mr-2" />
              Filters
            </button>
          </div>

          <div className="flex items-center space-x-3">
            <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors flex items-center">
              <Bot className="w-5 h-5 text-gray-600 mr-2" />
              <span className="text-sm">AI Assistant</span>
            </button>
            <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
              <Download className="w-5 h-5 text-gray-600" />
            </button>
          </div>
        </div>
      </div>

      {/* AI Insights Banner */}
      <div className="bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl p-4 text-white mb-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
              <Zap className="w-5 h-5" />
            </div>
            <div>
              <p className="font-medium">AI-Powered Insights</p>
              <p className="text-sm opacity-90">2 projects need attention • 5 optimization opportunities</p>
            </div>
          </div>
          <button className="px-4 py-2 bg-white/20 hover:bg-white/30 rounded-lg backdrop-blur-sm transition-colors flex items-center">
            View All Insights
            <ChevronRight className="w-4 h-4 ml-1" />
          </button>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="-mb-px flex space-x-6">
          <button
            onClick={() => setActiveTab('overview')}
            className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
              activeTab === 'overview' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Overview
          </button>
          <button
            onClick={() => setActiveTab('timeline')}
            className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
              activeTab === 'timeline' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Timeline
          </button>
          <button
            onClick={() => setActiveTab('tasks')}
            className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors flex items-center ${
              activeTab === 'tasks' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Tasks
            <span className="ml-2 bg-gray-200 text-gray-700 text-xs rounded-full px-2 py-0.5">103</span>
          </button>
          <button
            onClick={() => setActiveTab('resources')}
            className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
              activeTab === 'resources' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Resources
          </button>
          <button
            onClick={() => setActiveTab('risks')}
            className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors flex items-center ${
              activeTab === 'risks' 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Risks & Issues
            <span className="ml-2 bg-red-100 text-red-700 text-xs rounded-full px-2 py-0.5">6</span>
          </button>
        </nav>
      </div>

      {/* Tab Content */}
      {activeTab === 'overview' && (
        <div>
          {/* Summary Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600">Active Projects</span>
                <GitBranch className="w-4 h-4 text-gray-400" />
              </div>
              <p className="text-2xl font-bold">8</p>
              <p className="text-xs text-green-600 mt-1">2 ahead of schedule</p>
            </div>
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600">Tasks Completed</span>
                <CheckCircle className="w-4 h-4 text-gray-400" />
              </div>
              <p className="text-2xl font-bold">68%</p>
              <p className="text-xs text-gray-500 mt-1">39 of 103 total</p>
            </div>
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600">Budget Status</span>
                <DollarSign className="w-4 h-4 text-gray-400" />
              </div>
              <p className="text-2xl font-bold">72%</p>
              <p className="text-xs text-yellow-600 mt-1">€0.4M over budget</p>
            </div>
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600">Team Utilization</span>
                <Users className="w-4 h-4 text-gray-400" />
              </div>
              <p className="text-2xl font-bold">85%</p>
              <p className="text-xs text-gray-500 mt-1">12 team members</p>
            </div>
          </div>

          {/* Active Projects */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {projects.map(project => (
              <ProjectCard key={project.id} project={project} />
            ))}
          </div>
        </div>
      )}

      {showGantt && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl w-11/12 h-5/6 p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold">Project Timeline - Gantt View</h2>
              <button
                onClick={() => setShowGantt(false)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                ✕
              </button>
            </div>
            <div className="h-full overflow-auto">
              {/* Gantt chart component would go here */}
              <div className="bg-gray-100 rounded-lg p-12 text-center text-gray-500">
                <Calendar className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                <p>Interactive Gantt Chart</p>
                <p className="text-sm mt-2">Drag to adjust timelines • Click for details</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// Project Card Component
function ProjectCard({ project }: { project: any }) {
  const statusColors = {
    'in-progress': 'bg-blue-100 text-blue-700',
    'planning': 'bg-yellow-100 text-yellow-700',
    'completed': 'bg-green-100 text-green-700',
    'on-hold': 'bg-gray-100 text-gray-700'
  };

  const priorityColors = {
    'high': 'text-red-600',
    'medium': 'text-yellow-600',
    'low': 'text-green-600'
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-start justify-between mb-4">
        <div>
          <h3 className="font-semibold text-gray-900">{project.name}</h3>
          <p className="text-sm text-gray-600">{project.development}</p>
        </div>
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusColors[project.status]}`}>
          {project.status}
        </span>
      </div>

      {/* Progress Bar */}
      <div className="mb-4">
        <div className="flex items-center justify-between text-sm mb-1">
          <span className="text-gray-600">Overall Progress</span>
          <span className="font-medium">{project.progress}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div
            className="bg-blue-600 h-2 rounded-full"
            style={{ width: `${project.progress}%` }}
          />
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div>
          <p className="text-xs text-gray-500">Budget</p>
          <p className="font-medium">
            <span className="text-gray-900">{project.spent}</span>
            <span className="text-gray-500"> / {project.budget}</span>
          </p>
        </div>
        <div>
          <p className="text-xs text-gray-500">Timeline</p>
          <p className="font-medium text-gray-900">{project.endDate}</p>
        </div>
        <div>
          <p className="text-xs text-gray-500">Tasks</p>
          <p className="font-medium">
            <span className="text-green-600">{project.tasks.completed}</span>
            <span className="text-gray-500"> / {project.tasks.total}</span>
          </p>
        </div>
        <div>
          <p className="text-xs text-gray-500">Team</p>
          <p className="font-medium text-gray-900">{project.team} members</p>
        </div>
      </div>

      {/* AI Insights */}
      <div className="bg-gray-50 rounded-lg p-3 mb-4">
        <div className="flex items-center mb-2">
          <Bot className="w-4 h-4 text-purple-600 mr-2" />
          <span className="text-sm font-medium text-gray-900">AI Insights</span>
        </div>
        <div className="grid grid-cols-2 gap-3 text-sm">
          <div>
            <span className="text-gray-600">Delay Risk:</span>
            <span className={`ml-2 font-medium ${
              project.aiInsights.delayRisk === 'Low' ? 'text-green-600' :
              project.aiInsights.delayRisk === 'Medium' ? 'text-yellow-600' :
              'text-red-600'
            }`}>
              {project.aiInsights.delayRisk}
            </span>
          </div>
          <div>
            <span className="text-gray-600">Cost Overrun:</span>
            <span className={`ml-2 font-medium ${
              project.aiInsights.costOverrun === 'Low' ? 'text-green-600' :
              project.aiInsights.costOverrun === 'Medium' ? 'text-yellow-600' :
              'text-red-600'
            }`}>
              {project.aiInsights.costOverrun}
            </span>
          </div>
        </div>
      </div>

      {/* Milestones */}
      <div className="mb-4">
        <h4 className="text-sm font-medium text-gray-900 mb-2">Next Milestones</h4>
        <div className="space-y-2">
          {project.milestones.slice(0, 2).map((milestone: any, index: number) => (
            <div key={index} className="flex items-center text-sm">
              {milestone.status === 'completed' ? (
                <CheckCircle className="w-4 h-4 text-green-600 mr-2" />
              ) : milestone.status === 'in-progress' ? (
                <Clock className="w-4 h-4 text-blue-600 mr-2" />
              ) : (
                <AlertCircle className="w-4 h-4 text-gray-400 mr-2" />
              )}
              <span className={milestone.status === 'completed' ? 'line-through text-gray-500' : ''}>
                {milestone.name}
              </span>
              <span className="text-gray-500 ml-auto">{milestone.date}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Alerts */}
      {(project.risks > 0 || project.issues > 0) && (
        <div className="flex items-center space-x-4 mb-4 text-sm">
          {project.risks > 0 && (
            <div className="flex items-center text-yellow-600">
              <AlertTriangle className="w-4 h-4 mr-1" />
              {project.risks} risks
            </div>
          )}
          {project.issues > 0 && (
            <div className="flex items-center text-red-600">
              <AlertCircle className="w-4 h-4 mr-1" />
              {project.issues} issues
            </div>
          )}
        </div>
      )}

      {/* Actions */}
      <div className="flex items-center justify-between pt-3 border-t border-gray-200">
        <div className="flex items-center space-x-2">
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <Eye className="w-4 h-4 text-gray-600" />
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <Edit className="w-4 h-4 text-gray-600" />
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <MessageSquare className="w-4 h-4 text-gray-600" />
          </button>
        </div>
        <Link
          href={`/developer/projects/${project.id}`}
          className="text-sm text-blue-600 hover:text-blue-700 flex items-center"
        >
          View Details
          <ChevronRight className="w-4 h-4 ml-1" />
        </Link>
      </div>
    </div>
  );
}