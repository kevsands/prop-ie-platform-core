/**
 * Blockchain Dividends API
 * Handles dividend distribution to property token holders
 */

import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { PropertyTokenizationService } from '@/services/blockchain/property-tokenization';
import { authOptions } from '@/lib/auth-options';
import { z } from 'zod';
import { Logger } from '@/utils/logger';
import type { DividendDistribution } from '@/types/blockchain';

const logger = new Logger('blockchain.dividends');

// Dividend history interface (extends DividendDistribution)
interface DividendHistory extends Omit<DividendDistribution, 'recipients'> {
  id: string;
  status: 'pending' | 'completed' | 'failed';
  description?: string;
  soldShares: number;
}

// Validation schema
const DividendSchema = z.object({
  propertyId: z.string(),
  amount: z.string(), // BigInt as string
  chain: z.enum(['mainnet', 'polygon', 'arbitrum', 'testnet']),
  description: z.string().optional(),
});

// Initialize blockchain service
const blockchainService = new PropertyTokenizationService({
  rpcUrls: {
    mainnet: process.env.MAINNET_RPC_URL!,
    polygon: process.env.POLYGON_RPC_URL!,
    arbitrum: process.env.ARBITRUM_RPC_URL!,
    testnet: process.env.TESTNET_RPC_URL!,
  },
  contractAddresses: {
    mainnet: process.env.MAINNET_CONTRACT_ADDRESS!,
    polygon: process.env.POLYGON_CONTRACT_ADDRESS!,
    arbitrum: process.env.ARBITRUM_CONTRACT_ADDRESS!,
    testnet: process.env.TESTNET_CONTRACT_ADDRESS!,
  },
  privateKey: process.env.BLOCKCHAIN_PRIVATE_KEY!,
  infuraKey: process.env.INFURA_KEY,
  alchemyKey: process.env.ALCHEMY_KEY,
});

export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Validate request body
    const body: any = await request.json();
    const validationResult = DividendSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: 'Invalid request',
          details: validationResult.error.errors
        },
        { status: 400 }
      );
    }

    const { propertyId, amount, chain, description } = validationResult.data;

    // Check permissions - only property owners or admins can distribute dividends
    const userRole = session.user.role;
    if (userRole !== 'admin' && userRole !== 'developer') {
      // In production, also check if user is the property owner
      return NextResponse.json(
        { error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    // Get property details to validate
    const property = await blockchainService.getTokenizedProperty(propertyId, chain);
    
    if (!property) {
      return NextResponse.json(
        { error: 'Property not found' },
        { status: 404 }
      );
    }

    // Calculate sold shares
    const totalShares = parseInt(property.totalShares);
    const availableShares = parseInt(property.availableShares);
    const soldShares = totalShares - availableShares;

    if (soldShares === 0) {
      return NextResponse.json(
        { error: 'No shares sold yet' },
        { status: 400 }
      );
    }

    // Distribute dividends
    await blockchainService.distributeDividends(
      propertyId,
      BigInt(amount),
      chain
    );

    // Calculate dividend per share
    const dividendPerShare = BigInt(amount) / BigInt(soldShares);

    // Log the dividend distribution
    logger.info('Dividends distributed', {
      propertyId,
      totalAmount: amount,
      dividendPerShare: dividendPerShare.toString(),
      soldShares,
      chain,
      userId: session.user.id,
      description,
    });

    // Return success response
    return NextResponse.json({
      success: true,
      propertyId,
      totalAmount: amount,
      dividendPerShare: dividendPerShare.toString(),
      soldShares,
      message: 'Dividends successfully distributed',
    });

  } catch (error) {
    logger.error('Dividend distribution failed:', error);
    return NextResponse.json(
      {
        error: 'Distribution failed',
        message: (error as Error).message
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Get query parameters
    const { searchParams } = new URL(request.url);
    const propertyId = searchParams.get('propertyId');
    const chain = searchParams.get('chain') || 'polygon';

    if (!propertyId) {
      return NextResponse.json(
        { error: 'Property ID required' },
        { status: 400 }
      );
    }

    // Get property details and calculate potential dividends
    const property = await blockchainService.getTokenizedProperty(propertyId, chain);
    
    if (!property) {
      return NextResponse.json(
        { error: 'Property not found' },
        { status: 404 }
      );
    }

    // Get user's holdings to calculate their share
    // Use user ID as the default identifier - the blockchain service should map this to a wallet address
    // Note: walletAddress is not available on the session user object
    const userIdentifier = session.user.id;
    const userHoldings = await blockchainService.getUserHoldings(
      propertyId,
      userIdentifier,
      chain
    );

    // Calculate metrics
    const totalShares = parseInt(property.totalShares);
    const availableShares = parseInt(property.availableShares);
    const soldShares = totalShares - availableShares;
    const userSharePercentage = (userHoldings / totalShares) * 100;

    // In production, fetch actual dividend history
    const dividendHistory: DividendHistory[] = [];

    return NextResponse.json({
      property: {
        id: property.id,
        address: property.address,
        totalShares,
        soldShares,
        availableShares,
      },
      userMetrics: {
        holdings: userHoldings,
        sharePercentage: userSharePercentage.toFixed(2),
      },
      dividendHistory,
    });

  } catch (error) {
    logger.error('Failed to get dividend information:', error);
    return NextResponse.json(
      {
        error: 'Failed to retrieve dividend information',
        message: (error as Error).message
      },
      { status: 500 }
    );
  }
}