/**
 * Buyer Transactions List Page
 * Shows all transactions for the logged-in buyer
 */

'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import ProtectedRoute from '@/components/auth/ProtectedRoute';
import {
  Home,
  Calendar,
  Clock,
  CheckCircle,
  AlertCircle,
  XCircle,
  Search,
  Filter,
  ChevronRight,
  TrendingUp,
  FileText,
  DollarSign
} from 'lucide-react';

interface Transaction {
  id: string;
  referenceNumber: string;
  status: string;
  contractStatus?: string;
  unit: {
    id: string;
    name: string;
    type: string;
    price: number;
    development: {
      name: string;
      location: any;
    };
  };
  pricing: {
    basePrice: number;
    customizationCost: number;
    totalPrice: number;
  };
  timeline: any;
  createdAt: string;
  updatedAt: string;
}

const statusConfig: Record<string, { label: string; color: string; icon: any }> = {
  ENQUIRY: { label: 'Initial Enquiry', color: 'gray', icon: Clock },
  VIEWING_SCHEDULED: { label: 'Viewing Scheduled', color: 'blue', icon: Calendar },
  VIEWED: { label: 'Property Viewed', color: 'blue', icon: Home },
  RESERVATION: { label: 'Reserved', color: 'yellow', icon: FileText },
  RESERVATION_PAID: { label: 'Reservation Paid', color: 'green', icon: DollarSign },
  CONTRACT_ISSUED: { label: 'Contract Issued', color: 'yellow', icon: FileText },
  CONTRACT_SIGNED: { label: 'Contract Signed', color: 'green', icon: CheckCircle },
  DEPOSIT_PAID: { label: 'Deposit Paid', color: 'green', icon: DollarSign },
  MORTGAGE_APPROVED: { label: 'Mortgage Approved', color: 'green', icon: CheckCircle },
  CLOSING: { label: 'Closing Process', color: 'blue', icon: Clock },
  COMPLETED: { label: 'Sale Completed', color: 'green', icon: CheckCircle },
  HANDED_OVER: { label: 'Keys Received', color: 'green', icon: Home },
  CANCELLED: { label: 'Cancelled', color: 'red', icon: XCircle }
};

// Mock test transaction for development
const mockTransaction: Transaction = {
  id: 'test-transaction-id',
  referenceNumber: 'FG-202405-ABC123',
  status: 'RESERVATION_PAID',
  unit: {
    id: 'unit-a1',
    name: 'Unit A1 - 3 Bed Semi-Detached',
    type: 'SEMI_DETACHED',
    price: 375000,
    development: {
      name: 'Fitzgerald Gardens',
      location: 'North Dublin'
    }
  },
  pricing: {
    basePrice: 375000,
    customizationCost: 0,
    totalPrice: 375000
  },
  timeline: {},
  createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),
  updatedAt: new Date().toISOString()
};

export default function BuyerTransactionsPage() {
  const router = useRouter();
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');

  useEffect(() => {
    fetchTransactions();
  }, []);

  const fetchTransactions = async () => {
    try {
      // First try to fetch from the API
      const response = await fetch('/api/v1/transactions');

      if (response.ok) {
        const data: any = await response.json();
        setTransactions(data.transactions);
      } else {
        // If API fails, use mock data for development

        setTransactions([mockTransaction]);
      }
    } catch (err) {

      // Use mock data for development
      setTransactions([mockTransaction]);
    } finally {
      setLoading(false);
    }
  };

  const filteredTransactions = transactions.filter(transaction => {
    const matchesSearch = searchTerm === '' || 
      transaction.referenceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
      transaction.unit.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      transaction.unit.development.name.toLowerCase().includes(searchTerm.toLowerCase());

    const matchesStatus = statusFilter === 'all' || transaction.status === statusFilter;

    return matchesSearch && matchesStatus;
  });

  const getStatusConfig = (status: string) => {
    return statusConfig[status] || statusConfig.ENQUIRY;
  };

  if (loading) {
    return (
      <ProtectedRoute requiredRole={['buyer', 'admin']}>
        <div className="flex items-center justify-center min-h-screen">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </ProtectedRoute>
    );
  }

  return (
    <ProtectedRoute requiredRole={['buyer', 'admin']}>
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          {/* Header */}
          <div className="mb-6">
            <h1 className="text-2xl font-bold text-gray-900">My Transactions</h1>
            <p className="text-gray-600">Track your property purchase journey</p>
          </div>

          {/* Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-white rounded-lg shadow-sm p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Active</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {transactions.filter(t => !['COMPLETED', 'HANDED_OVER', 'CANCELLED'].includes(t.status)).length}
                  </p>
                </div>
                <div className="bg-blue-100 rounded-full p-3">
                  <Clock className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Completed</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {transactions.filter(t => ['COMPLETED', 'HANDED_OVER'].includes(t.status)).length}
                  </p>
                </div>
                <div className="bg-green-100 rounded-full p-3">
                  <CheckCircle className="w-6 h-6 text-green-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Value</p>
                  <p className="text-2xl font-bold text-gray-900">
                    â‚¬{transactions.reduce((sum, t) => sum + t.pricing.totalPrice, 0).toLocaleString()}
                  </p>
                </div>
                <div className="bg-purple-100 rounded-full p-3">
                  <TrendingUp className="w-6 h-6 text-purple-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Next Action</p>
                  <p className="text-2xl font-bold text-gray-900">
                    Pay Deposit
                  </p>
                </div>
                <div className="bg-yellow-100 rounded-full p-3">
                  <AlertCircle className="w-6 h-6 text-yellow-600" />
                </div>
              </div>
            </div>
          </div>

          {/* Filters */}
          <div className="bg-white rounded-lg shadow-sm p-4 mb-6">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="text"
                    placeholder="Search by reference, property, or development..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div className="flex items-center gap-2">
                <Filter className="w-5 h-5 text-gray-500" />
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Status</option>
                  {Object.entries(statusConfig).map(([value, config]) => (
                    <option key={value} value={value}>{config.label}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Test Mode Notice */}
          <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-6">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <AlertCircle className="h-5 w-5 text-blue-500" />
              </div>
              <div className="ml-3">
                <p className="text-sm text-blue-700 font-medium">Test Mode</p>
                <p className="text-sm text-blue-700 mt-1">
                  This is running in test mode. Click any transaction to view the payment interface for Fitzgerald Gardens.
                </p>
                <p className="text-sm text-blue-700 mt-1">
                  Navigate to the Payments tab to test payment processing.
                </p>
              </div>
            </div>
          </div>

          {/* Transactions List */}
          <div className="space-y-4">
            {filteredTransactions.length === 0 ? (
              <div className="bg-white rounded-lg shadow-sm p-8 text-center">
                <p className="text-gray-500">No transactions found</p>
              </div>
            ) : (
              filteredTransactions.map((transaction) => {
                const status = getStatusConfig(transaction.status);
                const StatusIcon = status.icon;

                return (
                  <div
                    key={transaction.id}
                    className="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer"
                    onClick={() => router.push(`/buyer/transactions/${transaction.id === 'test-transaction-id' ? 'test-transaction-id' : transaction.id}`)}
                  >
                    <div className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-start gap-4">
                          <div className="rounded-full p-3 bg-yellow-100">
                            <StatusIcon className="w-6 h-6 text-yellow-600" />
                          </div>

                          <div className="flex-1">
                            <h3 className="text-lg font-semibold text-gray-900">
                              {transaction.unit.name}
                            </h3>
                            <p className="text-sm text-gray-600">
                              {transaction.unit.development.name}
                            </p>
                            <p className="text-xs text-gray-500 mt-1">
                              Ref: {transaction.referenceNumber}
                            </p>

                            <div className="flex items-center gap-4 mt-3">
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                {status.label}
                              </span>

                              <span className="text-sm text-gray-600">
                                â‚¬{transaction.pricing.totalPrice.toLocaleString()}
                              </span>

                              <span className="text-sm text-gray-500">
                                Started: {new Date(transaction.createdAt).toLocaleDateString()}
                              </span>
                            </div>
                          </div>
                        </div>

                        <ChevronRight className="w-5 h-5 text-gray-400" />
                      </div>

                      {/* Progress Bar */}
                      <div className="mt-4">
                        <div className="bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-blue-600 h-2 rounded-full transition-all"
                            style={{
                              width: `${calculateProgress(transaction.status)}%`
                            }}
                          />
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          {calculateProgress(transaction.status)}% Complete
                        </p>
                      </div>

                      {/* Quick Actions */}
                      {transaction.status === 'RESERVATION_PAID' && (
                        <div className="mt-4 pt-4 border-t">
                          <p className="text-sm font-medium text-yellow-600 flex items-center gap-2">
                            <AlertCircle className="w-4 h-4" />
                            Action Required: Contract deposit payment due
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })
            )}
          </div>

          {/* Start New Transaction */}
          <div className="mt-8 text-center">
            <Link
              href="/properties"
              className="inline-flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Home className="w-5 h-5" />
              Browse Properties
            </Link>
          </div>
        </div>
      </div>
    </ProtectedRoute>
  );
}

function calculateProgress(status: string): number {
  const progressMap: Record<string, number> = {
    ENQUIRY: 10,
    VIEWING_SCHEDULED: 20,
    VIEWED: 30,
    RESERVATION: 35,
    RESERVATION_PAID: 40,
    CONTRACT_ISSUED: 50,
    CONTRACT_SIGNED: 60,
    DEPOSIT_PAID: 70,
    MORTGAGE_APPROVED: 80,
    CLOSING: 90,
    COMPLETED: 95,
    HANDED_OVER: 100,
    CANCELLED: 0
  };

  return progressMap[status] || 0;
}