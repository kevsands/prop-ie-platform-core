import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { z } from "zod";

// Schema for case creation
const createCaseSchema = z.object({
  caseReference: z.string(),
  type: z.enum(["PURCHASE", "SALE", "REMORTGAGE", "TRANSFER"]),
  propertyId: z.string(),
  propertyAddress: z.string(),
  purchasePrice: z.number().positive(),
  depositAmount: z.number().positive(),
  solicitorId: z.string(),
  buyerId: z.string().optional(),
  sellerId: z.string().optional(),
  agentId: z.string().optional(),
  proposedCompletion: z.string().datetime().optional()});

// Schema for case update
const updateCaseSchema = createCaseSchema.partial().extend({
  id: z.string(),
  status: z.enum(["NEW", "INSTRUCTION_RECEIVED", "DUE_DILIGENCE", "CONTRACT_PREP", "CONTRACT_ISSUED", "CONTRACT_NEGOTIATION", "CONTRACT_SIGNED", "DEPOSIT_RECEIVED", "COMPLETION_PENDING", "COMPLETED", "ABORTED"]).optional(),
  actualCompletion: z.string().datetime().optional()});

// GET /api/cases - Get all cases or filtered cases
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    // Check authentication
    if (!session?.user) {
      return NextResponse.json(
        { error: "Unauthorized" },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(request.url);

    // Build filter object
    const filter: any = {};

    // Filter by type
    const type = searchParams.get("type");
    if (type) {
      filter.type = type;
    }

    // Filter by status
    const status = searchParams.get("status");
    if (status) {
      filter.status = status;
    }

    // Filter by solicitor (for non-admin users, only show their cases)
    if (!["ADMIN", "LEGAL_ADMIN"].includes(session.user.role || "")) {
      filter.solicitorId = session.user.id;
    }

    // Pagination
    const page = parseInt(searchParams.get("page") || "1");
    const limit = parseInt(searchParams.get("limit") || "20");
    const skip = (page - 1) * limit;

    // Sorting
    const sortBy = searchParams.get("sortBy") || "createdAt";
    const sortOrder = searchParams.get("sortOrder") || "desc";

    // Mock data since ConveyancingCase model isn't in main schema
    // TODO: Integrate with proper conveyancing schema
    const cases: any[] = [];
    const total = 0;

    // Original code commented out until schema is integrated
    /*
    const [cases, total] = await Promise.all([
      prisma.conveyancingCase.findMany({
        where: filter,
        skip,
        take: limit,
        orderBy: {
          [sortBy]: sortOrder},
        include: {
          tasks: {
            where: {
              status: {
                notIn: ["COMPLETED", "CANCELLED"]}},
            select: {
              id: true,
              title: true,
              status: true,
              dueDate: true,
              priority: true,
              category: true}},
          DevelopmentDocument: {
            select: {
              id: true,
              name: true,
              type: true,
              status: true,
              uploadedAt: true},
            orderBy: {
              uploadedAt: "desc"},
            take: 5},
          notes: {
            select: {
              id: true,
              content: true,
              type: true,
              createdAt: true,
              createdBy: true},
            orderBy: {
              createdAt: "desc"},
            take: 5},
          _count: {
            select: {
              tasks: true,
              DevelopmentDocument: true,
              notes: true}}}}),
      prisma.conveyancingCase.count({ where: filter })]);
    */

    // Add computed fields
    const enrichedCases = cases.map((caseItem: any) => {
      const activeTasks = caseItem.tasks?.length || 0;
      const overdueTasks = caseItem.tasks?.filter((task: any) => 
        task.dueDate && new Date(task.dueDate) < new Date() && task.status !== "COMPLETED"
      ).length || 0;

      return {
        ...caseItem,
        activeTasks,
        overdueTasks,
        progress: calculateCaseProgress(caseItem)};
    });

    return NextResponse.json({
      data: enrichedCases,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)}});
  } catch (error) {

    return NextResponse.json(
      { error: "Failed to fetch cases" },
      { status: 500 }
    );
  }
}

// POST /api/cases - Create a new case
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    // Check authentication
    if (!session?.user) {
      return NextResponse.json(
        { error: "Unauthorized" },
        { status: 401 }
      );
    }

    // Check authorization - only legal professionals and admins can create cases
    if (!session.user.role || !["LEGAL", "SOLICITOR", "CONVEYANCER", "LEGAL_ADMIN", "ADMIN"].includes(session.user.role)) {
      return NextResponse.json(
        { error: "Forbidden" },
        { status: 403 }
      );
    }

    const body: any = await request.json();

    // Validate input
    const validatedData = createCaseSchema.parse(body);

    // Mock implementation since ConveyancingCase model isn't in main schema
    // TODO: Integrate with proper conveyancing schema
    const conveyancingCase = {
      id: Date.now().toString(),
      ...validatedData,
      status: "NEW",
      solicitorId: validatedData.solicitorId || session.user.id,
      proposedCompletion: validatedData.proposedCompletion ? new Date(validatedData.proposedCompletion) : undefined,
      createdAt: new Date(),
      updatedAt: new Date(),
      tasks: [],
      DevelopmentDocument: [],
      notes: []};

    // Original code commented out until schema is integrated
    /*
    const conveyancingCase = await prisma.conveyancingCase.create({
      data: {
        ...validatedData,
        status: "NEW",
        solicitorId: validatedData.solicitorId || session.user.id,
        proposedCompletion: validatedData.proposedCompletion ? new Date(validatedData.proposedCompletion) : undefined},
      include: {
        tasks: true,
        DevelopmentDocument: true,
        notes: true}});
    */

    // Create initial tasks based on case type
    // Commented out until proper schema is integrated
    // await createInitialTasks(conveyancingCase.id, conveyancingCase.type);

    return NextResponse.json({
      data: conveyancingCase,
      message: "Case created successfully"}, { status: 201 });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Invalid input", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: "Failed to create case" },
      { status: 500 }
    );
  }
}

// PUT /api/cases - Update a case
export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    // Check authentication
    if (!session?.user) {
      return NextResponse.json(
        { error: "Unauthorized" },
        { status: 401 }
      );
    }

    const body: any = await request.json();

    // Validate input
    const validatedData = updateCaseSchema.parse(body);
    const { id, ...updateData } = validatedData;

    // Mock implementation since ConveyancingCase model isn't in main schema
    // TODO: Integrate with proper conveyancing schema
    const existingCase = { solicitorId: session.user.id, status: "NEW" };

    // Original code commented out until schema is integrated
    /*
    const existingCase = await prisma.conveyancingCase.findUnique({
      where: { id },
      select: {
        solicitorId: true}});

    if (!existingCase) {
      return NextResponse.json(
        { error: "Case not found" },
        { status: 404 }
      );
    }
    */

    const isAdmin = ["ADMIN", "LEGAL_ADMIN"].includes(session.user.role || "");
    const isSolicitor = existingCase.solicitorId === session.user.id;

    if (!isAdmin && !isSolicitor) {
      return NextResponse.json(
        { error: "Forbidden" },
        { status: 403 }
      );
    }

    // Convert date strings to Date objects
    if (updateData.proposedCompletion) {
      (updateData as any).proposedCompletion = new Date(updateData.proposedCompletion);
    }
    if (updateData.actualCompletion) {
      (updateData as any).actualCompletion = new Date(updateData.actualCompletion);
    }

    // Mock implementation since ConveyancingCase model isn't in main schema
    // TODO: Integrate with proper conveyancing schema
    const updatedCase = {
      id,
      ...existingCase,
      ...updateData,
      updatedAt: new Date(),
      tasks: [],
      DevelopmentDocument: [],
      notes: []};

    // Original code commented out until schema is integrated
    /*
    const updatedCase = await prisma.conveyancingCase.update({
      where: { id },
      data: updateData,
      include: {
        tasks: true,
        DevelopmentDocument: true,
        notes: true}});
    */

    // Create a note for status changes
    // Commented out until proper schema is integrated
    /*
    if (updateData.status && updateData.status !== existingCase.status) {
      await prisma.note.create({
        data: {
          caseId: id,
          content: `Status changed from ${existingCase.status} to ${updateData.status}`,
          type: "GENERAL",
          createdBy: session.user.id}});
    }
    */

    return NextResponse.json({
      data: updatedCase,
      message: "Case updated successfully"});
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Invalid input", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: "Failed to update case" },
      { status: 500 }
    );
  }
}

// DELETE /api/cases - Delete a case
export async function DELETE(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    // Check authentication
    if (!session?.user) {
      return NextResponse.json(
        { error: "Unauthorized" },
        { status: 401 }
      );
    }

    // Check authorization - only admins can delete cases
    if (!["ADMIN", "LEGAL_ADMIN"].includes(session.user.role || "")) {
      return NextResponse.json(
        { error: "Forbidden" },
        { status: 403 }
      );
    }

    const { searchParams } = new URL(request.url);
    const caseId = searchParams.get("id");

    if (!caseId) {
      return NextResponse.json(
        { error: "Case ID is required" },
        { status: 400 }
      );
    }

    // Mock implementation since ConveyancingCase model isn't in main schema
    // TODO: Integrate with proper conveyancing schema
    const existingCase = {
      id: caseId,
      status: "COMPLETED",
      _count: {
        tasks: 0,
        DevelopmentDocument: 0}};

    // Original code commented out until schema is integrated
    /*
    const existingCase = await prisma.conveyancingCase.findUnique({
      where: { id: caseId },
      include: {
        _count: {
          select: {
            tasks: true,
            DevelopmentDocument: true}}}});

    if (!existingCase) {
      return NextResponse.json(
        { error: "Case not found" },
        { status: 404 }
      );
    }
    */

    // Don't allow deletion of cases with active work
    if (existingCase.status !== "ABORTED" && existingCase.status !== "COMPLETED") {
      return NextResponse.json(
        { error: "Only aborted or completed cases can be deleted" },
        { status: 400 }
      );
    }

    // Mock implementation since ConveyancingCase model isn't in main schema
    // TODO: Integrate with proper conveyancing schema

    // Original code commented out until schema is integrated
    /*
    // Delete the case (this will cascade delete related records)
    await prisma.conveyancingCase.delete({
      where: { id: caseId }});
    */

    return NextResponse.json({
      message: "Case deleted successfully"});
  } catch (error) {

    return NextResponse.json(
      { error: "Failed to delete case" },
      { status: 500 }
    );
  }
}

// Helper function to calculate case progress
function calculateCaseProgress(caseItem: any): number {
  const statusProgress: { [key: string]: number } = {
    NEW: 0,
    INSTRUCTION_RECEIVED: 10,
    DUE_DILIGENCE: 20,
    CONTRACT_PREP: 30,
    CONTRACT_ISSUED: 40,
    CONTRACT_NEGOTIATION: 50,
    CONTRACT_SIGNED: 60,
    DEPOSIT_RECEIVED: 70,
    COMPLETION_PENDING: 85,
    COMPLETED: 100,
    ABORTED: 0};

  return statusProgress[caseItem.status] || 0;
}

// Helper function to create initial tasks
// Commented out until proper schema is integrated
/*
async function createInitialTasks(caseId: string, caseType: string) {
  const taskTemplates = getTaskTemplates(caseType);

  await prisma.conveyancingTask.createMany({
    data: taskTemplates.map(template => ({
      caseId,
      title: template.title,
      category: template.category,
      priority: template.priority || "MEDIUM",
      status: "PENDING",
      description: template.description}))});
}
*/

// Helper function to get task templates
function getTaskTemplates(caseType: string) {
  const baseTasks = [
    { title: "Client Care Letter", category: "COMPLIANCE", priority: "HIGH", description: "Send client care letter outlining fees and terms" },
    { title: "Identity Verification", category: "COMPLIANCE", priority: "HIGH", description: "Complete AML identity verification checks" },
    { title: "Conflict Check", category: "COMPLIANCE", priority: "HIGH", description: "Complete conflict of interest check" }];

  const typeSpecificTasks = {
    PURCHASE: [
      { title: "Order Searches", category: "SEARCHES", priority: "HIGH", description: "Order local property searches" },
      { title: "Review Contract", category: "CONTRACT_PREPARATION", priority: "HIGH", description: "Review contract and raise enquiries" },
      { title: "Review Title", category: "DUE_DILIGENCE", priority: "HIGH", description: "Review title documents" },
      { title: "Mortgage Requirements", category: "FINANCIAL", priority: "HIGH", description: "Review mortgage offer and requirements" },
      { title: "Exchange Preparation", category: "CONTRACT_PREPARATION", priority: "HIGH", description: "Prepare for contract exchange" },
      { title: "Completion Statement", category: "FINANCIAL", priority: "HIGH", description: "Prepare completion statement" }],
    SALE: [
      { title: "Draft Contract", category: "CONTRACT_PREPARATION", priority: "HIGH", description: "Draft contract and property information form" },
      { title: "Title Investigation", category: "DUE_DILIGENCE", priority: "HIGH", description: "Investigate title and prepare title documents" },
      { title: "Reply to Enquiries", category: "CONTRACT_PREPARATION", priority: "MEDIUM", description: "Reply to buyer's solicitor enquiries" },
      { title: "Exchange Preparation", category: "CONTRACT_PREPARATION", priority: "HIGH", description: "Prepare for contract exchange" },
      { title: "Completion Statement", category: "FINANCIAL", priority: "HIGH", description: "Prepare completion statement" },
      { title: "Discharge Mortgage", category: "COMPLETION", priority: "HIGH", description: "Arrange mortgage discharge" }],
    REMORTGAGE: [
      { title: "Title Investigation", category: "DUE_DILIGENCE", priority: "HIGH", description: "Investigate title" },
      { title: "Review Mortgage Offer", category: "FINANCIAL", priority: "HIGH", description: "Review new mortgage offer" },
      { title: "Redemption Statement", category: "FINANCIAL", priority: "HIGH", description: "Obtain redemption statement from existing lender" },
      { title: "Prepare Mortgage Deed", category: "CONTRACT_PREPARATION", priority: "HIGH", description: "Prepare new mortgage deed" },
      { title: "Complete Remortgage", category: "COMPLETION", priority: "HIGH", description: "Complete remortgage transaction" }],
    TRANSFER: [
      { title: "Title Investigation", category: "DUE_DILIGENCE", priority: "HIGH", description: "Investigate title" },
      { title: "Prepare Transfer Deed", category: "CONTRACT_PREPARATION", priority: "HIGH", description: "Prepare transfer deed" },
      { title: "Tax Advice", category: "FINANCIAL", priority: "HIGH", description: "Advise on tax implications" },
      { title: "Complete Transfer", category: "COMPLETION", priority: "HIGH", description: "Complete transfer" },
      { title: "Register Transfer", category: "COMPLETION", priority: "HIGH", description: "Register transfer with Land Registry" }]};

  return [
    ...baseTasks,
    ...(typeSpecificTasks[caseType as keyof typeof typeSpecificTasks] || [])];
}