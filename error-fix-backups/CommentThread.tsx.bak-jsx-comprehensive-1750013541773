"use client";

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { 
  Send, 
  Paperclip, 
  MoreVertical, 
  Reply, 
  Heart, 
  Pin,
  Edit2,
  Trash2,
  CheckCircle,
  XCircle
} from 'lucide-react';
import { collaborationService } from '@/lib/collaboration';

interface Comment {
  id: string;
  authorId: string;
  authorName: string;
  authorAvatar?: string;
  content: string;
  createdAt: string;
  updatedAt?: string;
  attachments?: Array<{
    id: string;
    name: string;
    size: number;
    type: string;
    url: string;
  }>;
  mentions?: string[];
  reactions?: Record<string, string[]>;
  isResolved?: boolean;
  isPinned?: boolean;
  parentId?: string;
  replies?: Comment[];
}

interface CommentThreadProps {
  resourceType: 'project' | 'task' | 'drawing';
  resourceId: string;
  currentUserId: string;
  currentUserName: string;
  onResolve?: (commentId: string) => void;
}

export const CommentThread: React.FC<CommentThreadProps> = ({
  resourceType,
  resourceId,
  currentUserId,
  currentUserName,
  onResolve
}) => {
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState('');
  const [replyingTo, setReplyingTo] = useState<string | null>(null);
  const [editingComment, setEditingComment] = useState<string | null>(null);
  const [editContent, setEditContent] = useState('');
  const [loading, setLoading] = useState(true);
  const [attachments, setAttachments] = useState<File[]>([]);
  const commentsEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    fetchComments();
    // Set up WebSocket or polling for real-time updates
    const interval = setInterval(fetchComments, 5000);
    return () => clearInterval(interval);
  }, [resourceType, resourceId]);

  const fetchComments = async () => {
    try {
      // Mock data - in real implementation, this would fetch from API
      const mockComments: Comment[] = [
        {
          id: '1',
          authorId: 'user1',
          authorName: 'John Doe',
          content: 'This looks great! I think we should move forward with this design.',
          createdAt: new Date(Date.now() - 3600000).toISOString(),
          reactions: { '👍': ['user2', 'user3'] },
          isPinned: true
        },
        {
          id: '2',
          authorId: 'user2',
          authorName: 'Jane Smith',
          content: '@John Doe Agreed! Let me know if you need any adjustments to the dimensions.',
          createdAt: new Date(Date.now() - 1800000).toISOString(),
          mentions: ['John Doe'],
          replies: [
            {
              id: '3',
              authorId: 'user1',
              authorName: 'John Doe',
              content: 'Thanks! The dimensions look perfect.',
              createdAt: new Date(Date.now() - 900000).toISOString(),
              parentId: '2'
            }
          ]
        }
      ];
      setComments(mockComments);
      setLoading(false);
    } catch (error) {

      setLoading(false);
    }
  };

  const handleSubmitComment = async () => {
    if (!newComment.trim()) return;

    try {
      const comment: Comment = {
        id: Date.now().toString(),
        authorId: currentUserId,
        authorName: currentUserName,
        content: newComment,
        createdAt: new Date().toISOString(),
        parentId: replyingTo || undefined
      };

      // In real implementation, this would post to API
      if (replyingTo) {
        setComments(prevComments => 
          prevComments.map(c => 
            c.id === replyingTo 
              ? { ...c, replies: [...(c.replies || []), comment] }
              : c
          )
        );
      } else {
        setComments(prevComments => [...prevComments, comment]);
      }

      setNewComment('');
      setReplyingTo(null);
      setAttachments([]);
      scrollToBottom();
    } catch (error) {

    }
  };

  const handleEditComment = async (commentId: string) => {
    try {
      setComments(prevComments =>
        prevComments.map(c =>
          c.id === commentId
            ? { ...c, content: editContent, updatedAt: new Date().toISOString() }
            : c
        )
      );
      setEditingComment(null);
      setEditContent('');
    } catch (error) {

    }
  };

  const handleDeleteComment = async (commentId: string) => {
    try {
      setComments(prevComments => prevComments.filter(c => c.id !== commentId));
    } catch (error) {

    }
  };

  const handleReaction = async (commentId: string, emoji: string) => {
    try {
      setComments(prevComments =>
        prevComments.map(c => {
          if (c.id === commentId) {
            const reactions = { ...c.reactions };
            if (!reactions[emoji]) reactions[emoji] = [];

            if (reactions[emoji].includes(currentUserId)) {
              reactions[emoji] = reactions[emoji].filter(id => id !== currentUserId);
            } else {
              reactions[emoji].push(currentUserId);
            }

            return { ...c, reactions };
          }
          return c;
        })
      );
    } catch (error) {

    }
  };

  const scrollToBottom = () => {
    commentsEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const renderComment = (comment: Comment, isReply = false) => (
    <div
      key={comment.id}
      className={`${isReply ? 'ml-12' : ''} ${comment.isPinned ? 'border-l-4 border-blue-500' : ''}`}
    >
      <div className="flex space-x-3 p-4">
        <Avatar>
          <AvatarImage src={comment.authorAvatar} />
          <AvatarFallback>{comment.authorName[0]}</AvatarFallback>
        </Avatar>
        <div className="flex-1">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <span className="font-semibold">{comment.authorName}</span>
              <span className="text-xs text-gray-500">
                {new Date(comment.createdAt).toLocaleString()}
              </span>
              {comment.updatedAt && (
                <span className="text-xs text-gray-500">(edited)</span>
              )}
              {comment.isPinned && <Pin className="h-3 w-3 text-blue-500" />}
              {comment.isResolved && <CheckCircle className="h-3 w-3 text-green-500" />}
            </div>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="ghost" size="sm">
                  <MoreVertical className="h-4 w-4" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-40">
                <div className="space-y-1">
                  {comment.authorId === currentUserId && (
                    <>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="w-full justify-start"
                        onClick={() => {
                          setEditingComment(comment.id);
                          setEditContent(comment.content);
                        }}
                      >
                        <Edit2 className="h-4 w-4 mr-2" />
                        Edit
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="w-full justify-start"
                        onClick={() => handleDeleteComment(comment.id)}
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        Delete
                      </Button>
                    </>
                  )}
                  {!comment.isResolved && onResolve && (
                    <Button
                      variant="ghost"
                      size="sm"
                      className="w-full justify-start"
                      onClick={() => onResolve(comment.id)}
                    >
                      <CheckCircle className="h-4 w-4 mr-2" />
                      Resolve
                    </Button>
                  )}
                </div>
              </PopoverContent>
            </Popover>
          </div>

          {editingComment === comment.id ? (
            <div className="mt-2 space-y-2">
              <Textarea
                value={editContent}
                onChange={(e: any) => setEditContent(e.target.value)}
                className="min-h-[60px]"
              />
              <div className="flex space-x-2">
                <Button
                  size="sm"
                  onClick={() => handleEditComment(comment.id)}
                >
                  Save
                </Button>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => {
                    setEditingComment(null);
                    setEditContent('');
                  }}
                >
                  Cancel
                </Button>
              </div>
            </div>
          ) : (
            <>
              <p className="mt-1 text-sm whitespace-pre-wrap">{comment.content}</p>

              {comment.attachments && comment.attachments.length > 0 && (
                <div className="mt-2 space-y-1">
                  {comment.attachments.map(attachment => (
                    <div key={attachment.id} className="flex items-center space-x-2">
                      <Paperclip className="h-4 w-4 text-gray-500" />
                      <a href={attachment.url} className="text-sm text-blue-600 hover:underline">
                        {attachment.name}
                      </a>
                      <span className="text-xs text-gray-500">
                        ({(attachment.size / 1024).toFixed(1)} KB)
                      </span>
                    </div>
                  ))}
                </div>
              )}

              <div className="mt-2 flex items-center space-x-4">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setReplyingTo(comment.id)}
                >
                  <Reply className="h-4 w-4 mr-1" />
                  Reply
                </Button>

                <div className="flex items-center space-x-2">
                  {['👍', '👏', '❤️'].map(emoji => (
                    <button
                      key={emoji}
                      onClick={() => handleReaction(comment.id, emoji)}
                      className={`text-sm px-2 py-1 rounded hover:bg-gray-100 ${
                        comment.reactions?.[emoji]?.includes(currentUserId)
                          ? 'bg-gray-100'
                          : ''
                      }`}
                    >
                      {emoji}
                      {comment.reactions?.[emoji]?.length ? (
                        <span className="ml-1 text-xs text-gray-600">
                          {comment.reactions[emoji].length}
                        </span>
                      ) : null}
                    </button>
                  ))}
                </div>
              </div>
            </>
          )}

          {comment.replies && comment.replies.map(reply => renderComment(reply, true))}

          {replyingTo === comment.id && (
            <div className="mt-3 ml-12">
              <div className="flex space-x-2">
                <Textarea
                  value={newComment}
                  onChange={(e: any) => setNewComment(e.target.value)}
                  placeholder="Write a reply..."
                  className="min-h-[80px]"
                />
                <div className="space-y-2">
                  <Button onClick={handleSubmitComment}>
                    <Send className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => {
                      setReplyingTo(null);
                      setNewComment('');
                    }}
                  >
                    <XCircle className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  if (loading) {
    return (
      <Card>
        <CardContent className="flex items-center justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Comments</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4 max-h-[500px] overflow-y-auto">
          {comments.length === 0 ? (
            <p className="text-center text-gray-500 py-8">
              No comments yet. Be the first to comment!
            </p>
          ) : (
            comments.map(comment => renderComment(comment))
          )}
          <div ref={commentsEndRef} />
        </div>

        <div className="mt-4 border-t pt-4">
          <div className="flex space-x-2">
            <Textarea
              value={newComment}
              onChange={(e: any) => setNewComment(e.target.value)}
              placeholder="Write a comment..."
              className="min-h-[80px]"
              onKeyDown={(e: any) => {
                if (e.key === 'Enter' && e.metaKey) {
                  handleSubmitComment();
                }
              }}
            />
            <div className="space-y-2">
              <Button onClick={handleSubmitComment}>
                <Send className="h-4 w-4" />
              </Button>
              <Button variant="outline">
                <Paperclip className="h-4 w-4" />
              </Button>
            </div>
          </div>
          <p className="text-xs text-gray-500 mt-2">
            Press ⌘+Enter to submit
          </p>
        </div>
      </CardContent>
    </Card>
  );
};