import { PrismaClient } from '@prisma/client';
import { cache } from 'react';

const prisma = new PrismaClient();

// Types
export interface DataServiceOptions {
  include?: Record<string, boolean | object>;
  where?: Record<string, any>;
  orderBy?: Record<string, 'asc' | 'desc'> | Array<Record<string, 'asc' | 'desc'>>;
  skip?: number;
  take?: number;
  select?: Record<string, boolean | object>;
}

export interface PaginatedResult<T> {
  data: T[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

// Cached queries for server components
export const getCachedUser = cache(async (id: string) => {
  return prisma.user.findUnique({
    where: { id },
    include: {
      contactProfile: true,
      developments: true,
      purchases: true}});
});

export const getCachedDevelopment = cache(async (id: string) => {
  return prisma.development.findUnique({
    where: { id },
    include: {
      units: true,
      owner: true,
      archProjects: true}});
});

// Base data service class
export class DataService {
  // User operations
  static async getUsers(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.user.findMany({
      include: options.include,
      where: options.where,
      orderBy: options.orderBy,
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async getUserById(id: string, options: DataServiceOptions = {}): Promise<any> {
    return prisma.user.findUnique({
      where: { id },
      include: options.include || { contactProfile: true },
      select: options.select});
  }

  static async createUser(data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.user.create({
      data,
      include: options.include,
      select: options.select});
  }

  static async updateUser(id: string, data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.user.update({
      where: { id },
      data,
      include: options.include,
      select: options.select});
  }

  static async deleteUser(id: string): Promise<any> {
    return prisma.user.delete({
      where: { id }});
  }

  // Development operations
  static async getDevelopments(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.development.findMany({
      include: options.include || { units: true, owner: true },
      where: options.where,
      orderBy: options.orderBy || { createdAt: 'desc' },
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async getDevelopmentById(id: string, options: DataServiceOptions = {}): Promise<any> {
    return prisma.development.findUnique({
      where: { id },
      include: options.include || { units: true, owner: true, archProjects: true },
      select: options.select});
  }

  static async getDevelopmentBySlug(slug: string, options: DataServiceOptions = {}): Promise<any> {
    return prisma.development.findUnique({
      where: { slug },
      include: options.include || { units: true, owner: true },
      select: options.select});
  }

  static async createDevelopment(data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.development.create({
      data,
      include: options.include,
      select: options.select});
  }

  static async updateDevelopment(id: string, data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.development.update({
      where: { id },
      data,
      include: options.include,
      select: options.select});
  }

  // Unit operations
  static async getUnits(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.unit.findMany({
      include: options.include || { development: true },
      where: options.where,
      orderBy: options.orderBy,
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async getUnitById(id: string, options: DataServiceOptions = {}): Promise<any> {
    return prisma.unit.findUnique({
      where: { id },
      include: options.include || { development: true, sale: true },
      select: options.select});
  }

  static async createUnit(data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.unit.create({
      data,
      include: options.include,
      select: options.select});
  }

  static async updateUnit(id: string, data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.unit.update({
      where: { id },
      data,
      include: options.include,
      select: options.select});
  }

  // Sale operations
  static async getSales(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.sale.findMany({
      include: options.include || { unit: true, buyer: true },
      where: options.where,
      orderBy: options.orderBy || { createdAt: 'desc' },
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async getSaleById(id: string, options: DataServiceOptions = {}): Promise<any> {
    return prisma.sale.findUnique({
      where: { id },
      include: options.include || { unit: true, buyer: true, legalCase: true },
      select: options.select});
  }

  static async createSale(data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.sale.create({
      data,
      include: options.include,
      select: options.select});
  }

  static async updateSale(id: string, data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.sale.update({
      where: { id },
      data,
      include: options.include,
      select: options.select});
  }

  // CRM operations
  static async getContactProfiles(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.contactProfile.findMany({
      include: options.include || { user: true },
      where: options.where,
      orderBy: options.orderBy,
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async getAccounts(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.account.findMany({
      include: options.include || { opportunities: true, owner: true },
      where: options.where,
      orderBy: options.orderBy,
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async getOpportunities(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.opportunity.findMany({
      include: options.include || { account: true, owner: true },
      where: options.where,
      orderBy: options.orderBy,
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  // Legal operations
  static async getLegalCases(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.legalCase.findMany({
      include: options.include || { sale: true, assignedTo: true, milestones: true },
      where: options.where,
      orderBy: options.orderBy || { createdAt: 'desc' },
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async getLegalCaseById(id: string, options: DataServiceOptions = {}): Promise<any> {
    return prisma.legalCase.findUnique({
      where: { id },
      include: options.include || { 
        sale: { include: { unit: true, buyer: true } },
        assignedTo: true,
        milestones: true,
        tasks: true,
        documents: true},
      select: options.select});
  }

  static async createLegalCase(data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.legalCase.create({
      data,
      include: options.include,
      select: options.select});
  }

  static async updateLegalCase(id: string, data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.legalCase.update({
      where: { id },
      data,
      include: options.include,
      select: options.select});
  }

  // Architecture operations
  static async getArchProjects(options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.archProject.findMany({
      include: options.include || { development: true, leadArchitect: true },
      where: options.where,
      orderBy: options.orderBy || { createdAt: 'desc' },
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async getArchProjectById(id: string, options: DataServiceOptions = {}): Promise<any> {
    return prisma.archProject.findUnique({
      where: { id },
      include: options.include || { 
        development: true,
        leadArchitect: true,
        team: true,
        drawings: true,
        models: true},
      select: options.select});
  }

  static async createArchProject(data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.archProject.create({
      data,
      include: options.include,
      select: options.select});
  }

  static async updateArchProject(id: string, data: any, options: DataServiceOptions = {}): Promise<any> {
    return prisma.archProject.update({
      where: { id },
      data,
      include: options.include,
      select: options.select});
  }

  // Pagination helper
  static async getPaginated<T>(
    model: string,
    options: DataServiceOptions & { page?: number; pageSize?: number } = {}
  ): Promise<PaginatedResult<T>> {
    const { page = 1, pageSize = 10, where, orderBy, include, select } = options;
    const skip = (page - 1) * pageSize;

    const [data, total] = await Promise.all([
      (prisma as any)[model].findMany({
        where,
        orderBy,
        include,
        select,
        skip,
        take: pageSize}),
      (prisma as any)[model].count({ where })]);

    return {
      data,
      total,
      page,
      pageSize,
      totalPages: Math.ceil(total / pageSize)};
  }

  // Transaction helper
  static async executeTransaction<T>(
    callback: (tx: PrismaClient) => Promise<T>
  ): Promise<T> {
    return prisma.$transaction(callback);
  }

  // Search operations
  static async searchDevelopments(query: string, options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.development.findMany({
      where: {
        OR: [
          { name: { contains: query, mode: 'insensitive' } },
          { location: { contains: query, mode: 'insensitive' } },
          { description: { contains: query, mode: 'insensitive' } },
          { address: { contains: query, mode: 'insensitive' } },
          { city: { contains: query, mode: 'insensitive' } }],
        ...options.where},
      include: options.include || { units: true },
      orderBy: options.orderBy,
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  static async searchUnits(query: string, options: DataServiceOptions = {}): Promise<any[]> {
    return prisma.unit.findMany({
      where: {
        OR: [
          { unitNumber: { contains: query, mode: 'insensitive' } },
          { development: { name: { contains: query, mode: 'insensitive' } } }],
        ...options.where},
      include: options.include || { development: true },
      orderBy: options.orderBy,
      skip: options.skip,
      take: options.take,
      select: options.select});
  }

  // Analytics operations
  static async getDevelopmentStats(developmentId: string): Promise<any> {
    const [totalUnits, soldUnits, reservedUnits, avgPrice] = await Promise.all([
      prisma.unit.count({ where: { developmentId } }),
      prisma.unit.count({ where: { developmentId, status: 'SOLD' } }),
      prisma.unit.count({ where: { developmentId, status: 'RESERVED' } }),
      prisma.unit.aggregate({
        where: { developmentId },
        _avg: { price: true }})]);

    return {
      totalUnits,
      soldUnits,
      reservedUnits,
      availableUnits: totalUnits - soldUnits - reservedUnits,
      averagePrice: avgPrice._avg.price || 0,
      occupancyRate: totalUnits > 0 ? ((soldUnits + reservedUnits) / totalUnits) * 100 : 0};
  }

  static async getUserStats(userId: string): Promise<any> {
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        _count: {
          select: {
            purchases: true,
            opportunities: true,
            tasks: true,
            legalCases: true}}}});

    return user?._count || {};
  }

  // Bulk operations
  static async bulkCreateUnits(units: any[]): Promise<any> {
    return prisma.unit.createMany({
      data: units,
      skipDuplicates: true});
  }

  static async bulkUpdateUnits(updates: Array<{ id: string; data: any }>): Promise<any> {
    const promises = updates.map(({ id, data }) =>
      prisma.unit.update({ where: { id }, data })
    );
    return Promise.all(promises);
  }

  // Clean up operations
  static async cleanupOldData(days: number = 90): Promise<any> {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - days);

    const [deletedActivities, deletedInteractions] = await Promise.all([
      prisma.activity.deleteMany({
        where: {
          createdAt: { lt: cutoffDate },
          type: { in: ['PAGE_VIEW', 'CLICK'] }}}),
      prisma.interaction.deleteMany({
        where: {
          createdAt: { lt: cutoffDate },
          type: 'VIEW'}})]);

    return {
      deletedActivities: deletedActivities.count,
      deletedInteractions: deletedInteractions.count};
  }
}

// Export a singleton instance for convenience
export const dataService = DataService;