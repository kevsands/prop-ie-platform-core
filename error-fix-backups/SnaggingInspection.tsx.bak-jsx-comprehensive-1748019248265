'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  ClipboardCheck, 
  Camera, 
  MapPin,
  AlertTriangle,
  CheckCircle,
  Clock,
  Plus,
  X,
  Calendar,
  User
} from 'lucide-react';
import { formatDate } from '@/utils/format';
import Image from 'next/image';

interface SnaggingInspectionProps {
  transactionId: string;
  onComplete: () => void;
}

interface SnagItem {
  id: string;
  location: string;
  category: 'structural' | 'electrical' | 'plumbing' | 'finishing' | 'appliances' | 'other';
  severity: 'critical' | 'major' | 'minor';
  description: string;
  images: string[];
  status: 'reported' | 'assigned' | 'in_progress' | 'resolved' | 'verified';
  assignedTo?: string;
  reportedDate: string;
  resolvedDate?: string;
}

interface InspectionSchedule {
  id: string;
  date: string;
  time: string;
  inspector: string;
  status: 'scheduled' | 'completed' | 'cancelled';
}

export function SnaggingInspection({ transactionId, onComplete }: SnaggingInspectionProps) {
  const [snagItems, setSnagItems] = useState<SnagItem[]>([]);
  const [schedule, setSchedule] = useState<InspectionSchedule | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [uploadingImage, setUploadingImage] = useState(false);

  const [newItem, setNewItem] = useState({
    location: '',
    category: 'other' as const,
    severity: 'minor' as const,
    description: '',
    images: [] as string[]});

  useEffect(() => {
    fetchInspectionData();
  }, [transactionId]);

  const fetchInspectionData = async () => {
    try {
      const [scheduleRes, itemsRes] = await Promise.all([
        fetch(`/api/v1/transactions/${transactionId}/snagging/schedule`),
        fetch(`/api/v1/transactions/${transactionId}/snagging/items`)]);

      if (!scheduleRes.ok || !itemsRes.ok) {
        throw new Error('Failed to fetch inspection data');
      }

      const scheduleData = await scheduleRes.json();
      const itemsData = await itemsRes.json();

      setSchedule(scheduleData.schedule);
      setSnagItems(itemsData.items);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleImageUpload = async (file: File) => {
    setUploadingImage(true);
    const formData = new FormData();
    formData.append('file', file);
    formData.append('type', 'snagging');

    try {
      const response = await fetch('/api/v1/upload', {
        method: 'POST',
        body: formData});

      if (!response.ok) throw new Error('Failed to upload image');

      const data = await response.json();
      setNewItem(prev => ({
        ...prev,
        images: [...prev.images, data.url]}));
    } catch (err) {

    } finally {
      setUploadingImage(false);
    }
  };

  const handleAddSnagItem = async () => {
    setError(null);

    try {
      const response = await fetch(`/api/v1/transactions/${transactionId}/snagging/items`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newItem)});

      if (!response.ok) throw new Error('Failed to add snag item');

      const newSnagItem = await response.json();
      setSnagItems(prev => [...prev, newSnagItem]);

      // Reset form
      setNewItem({
        location: '',
        category: 'other',
        severity: 'minor',
        description: '',
        images: []});
      setShowAddForm(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    }
  };

  const handleUpdateStatus = async (itemId: string, newStatus: SnagItem['status']) => {
    try {
      const response = await fetch(`/api/v1/snagging/items/${itemId}/status`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus })});

      if (!response.ok) throw new Error('Failed to update status');

      setSnagItems(prev => prev.map(item =>
        item.id === itemId ? { ...item, status: newStatus } : item
      ));
    } catch (err) {

    }
  };

  const handleCompleteInspection = async () => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/v1/transactions/${transactionId}/snagging/complete`, {
        method: 'POST'});

      if (!response.ok) throw new Error('Failed to complete inspection');

      onComplete();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const totalItems = snagItems.length;
  const resolvedItems = snagItems.filter(item => item.status === 'resolved' || item.status === 'verified').length;
  const progress = totalItems > 0 ? (resolvedItems / totalItems) * 100 : 0;

  if (loading) {
    return (
      <Card>
        <CardContent className="p-8">
          <div className="animate-pulse space-y-4">
            <div className="h-8 bg-muted rounded w-1/3" />
            <div className="h-32 bg-muted rounded" />
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <ClipboardCheck className="h-5 w-5" />
          Snagging Inspection
        </CardTitle>
        {totalItems > 0 && <Progress value={progress} className="mt-2" />}
      </CardHeader>
      <CardContent className="space-y-6">
        {error && (
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {schedule && (
          <div className="bg-muted p-4 rounded-lg">
            <h3 className="font-semibold mb-2 flex items-center gap-2">
              <Calendar className="h-4 w-4" />
              Inspection Schedule
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <p className="text-sm text-muted-foreground">Date</p>
                <p className="font-medium">{formatDate(schedule.date)}</p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Time</p>
                <p className="font-medium">{schedule.time}</p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Inspector</p>
                <p className="font-medium flex items-center gap-1">
                  <User className="h-3 w-3" />
                  {schedule.inspector}
                </p>
              </div>
            </div>
          </div>
        )}

        <div className="flex justify-between items-center">
          <h3 className="font-semibold">Snag Items</h3>
          <Button
            size="sm"
            onClick={() => setShowAddForm(true)}
            className="flex items-center gap-1"
          >
            <Plus className="h-4 w-4" />
            Add Item
          </Button>
        </div>

        {showAddForm && (
          <Card className="border-primary">
            <CardContent className="pt-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    value={newItem.location}
                    onChange={(e: React.MouseEvent) => setNewItem(prev => ({ ...prev, location: e.target.value }))}
                    placeholder="e.g., Living Room - North Wall"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="category">Category</Label>
                    <Select
                      value={newItem.category}
                      onChange={(e: React.MouseEvent) => setNewItem(prev => ({ ...prev, category: e.target.value as any }))}
                    >
                      <option value="structural">Structural</option>
                      <option value="electrical">Electrical</option>
                      <option value="plumbing">Plumbing</option>
                      <option value="finishing">Finishing</option>
                      <option value="appliances">Appliances</option>
                      <option value="other">Other</option>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="severity">Severity</Label>
                    <Select
                      value={newItem.severity}
                      onChange={(e: React.MouseEvent) => setNewItem(prev => ({ ...prev, severity: e.target.value as any }))}
                    >
                      <option value="critical">Critical</option>
                      <option value="major">Major</option>
                      <option value="minor">Minor</option>
                    </Select>
                  </div>
                </div>

                <div>
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={newItem.description}
                    onChange={(e: React.MouseEvent) => setNewItem(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Describe the issue in detail..."
                    rows={3}
                  />
                </div>

                <div>
                  <Label>Photos</Label>
                  <div className="flex gap-2 flex-wrap">
                    {newItem.images.map((url, index) => (
                      <div key={index} className="relative">
                        <Image
                          src={url}
                          alt={`Snag photo ${index + 1}`}
                          width={100}
                          height={100}
                          className="rounded border"
                        />
                        <Button
                          size="sm"
                          variant="destructive"
                          className="absolute -top-2 -right-2 h-6 w-6 p-0"
                          onClick={() => setNewItem(prev => ({
                            ...prev,
                            images: prev.images.filter((_, i) => i !== index)}))}
                        >
                          <X className="h-3 w-3" />
                        </Button>
                      </div>
                    ))}

                    <label className="cursor-pointer">
                      <div className="w-24 h-24 border-2 border-dashed rounded flex items-center justify-center hover:bg-muted">
                        {uploadingImage ? (
                          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary" />
                        ) : (
                          <Camera className="h-6 w-6 text-muted-foreground" />
                        )}
                      </div>
                      <input
                        type="file"
                        accept="image/*"
                        className="hidden"
                        onChange={(e: React.MouseEvent) => e.target.files?.[0] && handleImageUpload(e.target.files[0])}
                        disabled={uploadingImage}
                      />
                    </label>
                  </div>
                </div>

                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setShowAddForm(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={handleAddSnagItem}
                    disabled={!newItem.location || !newItem.description}
                  >
                    Add Snag Item
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        <div className="space-y-4">
          {snagItems.map(item => (
            <Card key={item.id}>
              <CardContent className="pt-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <MapPin className="h-4 w-4 text-muted-foreground" />
                      <h4 className="font-medium">{item.location}</h4>
                      <Badge variant={
                        item.severity === 'critical' ? 'destructive' :
                        item.severity === 'major' ? 'warning' : 'default'
                      }>
                        {item.severity}
                      </Badge>
                      <Badge variant="outline">
                        {item.category}
                      </Badge>
                    </div>

                    <p className="text-sm text-muted-foreground mb-3">
                      {item.description}
                    </p>

                    {item.images.length > 0 && (
                      <div className="flex gap-2 mb-3">
                        {item.images.map((url, index) => (
                          <Image
                            key={index}
                            src={url}
                            alt={`Snag photo ${index + 1}`}
                            width={80}
                            height={80}
                            className="rounded border object-cover"
                          />
                        ))}
                      </div>
                    )}

                    <div className="flex items-center gap-4 text-sm">
                      <span className="text-muted-foreground">
                        Reported: {formatDate(item.reportedDate)}
                      </span>
                      {item.assignedTo && (
                        <span className="flex items-center gap-1">
                          <User className="h-3 w-3" />
                          {item.assignedTo}
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <Select
                      value={item.status}
                      onChange={(e: React.MouseEvent) => handleUpdateStatus(item.id, e.target.value as any)}
                      className="w-32"
                    >
                      <option value="reported">Reported</option>
                      <option value="assigned">Assigned</option>
                      <option value="in_progress">In Progress</option>
                      <option value="resolved">Resolved</option>
                      <option value="verified">Verified</option>
                    </Select>

                    <Badge
                      variant={
                        item.status === 'resolved' || item.status === 'verified' ? 'success' :
                        item.status === 'in_progress' ? 'warning' : 'default'
                      }
                    >
                      {item.status === 'resolved' || item.status === 'verified' ? (
                        <CheckCircle className="h-3 w-3 mr-1" />
                      ) : (
                        <Clock className="h-3 w-3 mr-1" />
                      )}
                      {item.status}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {snagItems.length === 0 && !showAddForm && (
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              No snag items reported. Click "Add Item" to report any issues found during inspection.
            </AlertDescription>
          </Alert>
        )}

        {totalItems > 0 && resolvedItems === totalItems && (
          <Alert className="bg-success/10 border-success">
            <CheckCircle className="h-4 w-4 text-success" />
            <AlertDescription className="text-success">
              All snag items have been resolved!
            </AlertDescription>
          </Alert>
        )}

        <div className="flex justify-end">
          <Button
            onClick={handleCompleteInspection}
            disabled={loading || (totalItems > 0 && resolvedItems < totalItems)}
          >
            {loading ? 'Completing...' : 'Complete Inspection'}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}