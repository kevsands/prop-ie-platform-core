'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Select } from '@/components/ui/select';
import { 
  Search,
  Filter,
  Star,
  Building2,
  Shield,
  FileCheck,
  Clock,
  DollarSign,
  UserCheck,
  AlertCircle,
  ChevronRight
} from 'lucide-react';
import { formatCurrency } from '@/utils/format';

interface Contractor {
  id: string;
  companyName: string;
  registrationNumber: string;
  email: string;
  phone: string;
  website?: string;
  trades: Trade[];
  averageRating: number;
  completedProjects: number;
  onTimeDelivery: number;
  status: 'PENDING' | 'APPROVED' | 'SUSPENDED' | 'BLACKLISTED';
  certifications: Certification[];
  insurances: Insurance[];
}

interface Trade {
  id: string;
  name: string;
}

interface Certification {
  id: string;
  type: string;
  issuer: string;
  expiryDate: string;
  verified: boolean;
}

interface Insurance {
  id: string;
  type: string;
  provider: string;
  coverageAmount: number;
  endDate: string;
  verified: boolean;
}

export function ContractorDirectory() {
  const [contractors, setContractors] = useState<Contractor[]>([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    search: '',
    trade: '',
    minRating: 0,
    status: 'APPROVED' as const
  });

  useEffect(() => {
    fetchContractors();
  }, [filters]);

  const fetchContractors = async () => {
    try {
      const queryParams = new URLSearchParams();
      if (filters.search) queryParams.append('search', filters.search);
      if (filters.trade) queryParams.append('trade', filters.trade);
      if (filters.minRating) queryParams.append('minRating', filters.minRating.toString());
      if (filters.status) queryParams.append('status', filters.status);

      const response = await fetch(`/api/v1/contractors?${queryParams}`);
      const data = await response.json();
      setContractors(data.contractors);
    } catch (error) {

    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'APPROVED': return 'success';
      case 'PENDING': return 'warning';
      case 'SUSPENDED': return 'destructive';
      case 'BLACKLISTED': return 'destructive';
      default: return 'default';
    }
  };

  const renderRating = (rating: number) => {
    return (
      <div className="flex items-center gap-1">
        {[...Array(5)].map((_, i) => (
          <Star 
            key={i}
            className={`h-4 w-4 ${i < rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`}
          />
        ))}
        <span className="text-sm font-medium ml-1">{rating.toFixed(1)}</span>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="animate-pulse space-y-4">
        <div className="h-8 bg-muted rounded w-1/3" />
        <div className="grid gap-4">
          {[1, 2, 3].map(i => (
            <div key={i} className="h-48 bg-muted rounded" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filter Contractors
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <Label htmlFor="search">Search</Label>
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  id="search"
                  placeholder="Company name..."
                  value={filters.search}
                  onChange={(e: React.MouseEvent) => setFilters(prev => ({ ...prev, search: e.target.value }))}
                  className="pl-10"
                />
              </div>
            </div>

            <div>
              <Label htmlFor="trade">Trade</Label>
              <Select
                value={filters.trade}
                onChange={(e: React.MouseEvent) => setFilters(prev => ({ ...prev, trade: e.target.value }))}
              >
                <option value="">All Trades</option>
                <option value="electrical">Electrical</option>
                <option value="plumbing">Plumbing</option>
                <option value="carpentry">Carpentry</option>
                <option value="masonry">Masonry</option>
                <option value="roofing">Roofing</option>
              </Select>
            </div>

            <div>
              <Label htmlFor="rating">Min Rating</Label>
              <Select
                value={filters.minRating.toString()}
                onChange={(e: React.MouseEvent) => setFilters(prev => ({ ...prev, minRating: Number(e.target.value) }))}
              >
                <option value="0">Any Rating</option>
                <option value="3">3+ Stars</option>
                <option value="4">4+ Stars</option>
                <option value="4.5">4.5+ Stars</option>
              </Select>
            </div>

            <div>
              <Label htmlFor="status">Status</Label>
              <Select
                value={filters.status}
                onChange={(e: React.MouseEvent) => setFilters(prev => ({ ...prev, status: e.target.value as any }))}
              >
                <option value="">All Statuses</option>
                <option value="APPROVED">Approved</option>
                <option value="PENDING">Pending</option>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Contractor List */}
      <div className="grid gap-4">
        {contractors.map(contractor => (
          <Card key={contractor.id} className="hover:shadow-lg transition-shadow">
            <CardContent className="p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <Building2 className="h-6 w-6 text-muted-foreground" />
                    <h3 className="text-xl font-semibold">{contractor.companyName}</h3>
                    <Badge variant={getStatusColor(contractor.status)}>
                      {contractor.status}
                    </Badge>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                    <div>
                      <p className="text-sm text-muted-foreground">Rating</p>
                      {renderRating(contractor.averageRating)}
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Completed Projects</p>
                      <p className="font-medium">{contractor.completedProjects}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">On-Time Delivery</p>
                      <p className="font-medium">{contractor.onTimeDelivery}%</p>
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-2 mt-4">
                    {contractor.trades.map(trade => (
                      <Badge key={trade.id} variant="outline">
                        {trade.name}
                      </Badge>
                    ))}
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
                    <div className="flex items-center gap-2">
                      <Shield className="h-4 w-4 text-blue-600" />
                      <span className="text-sm">
                        {contractor.insurances.filter(i => i.verified).length} Active Insurance
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <FileCheck className="h-4 w-4 text-green-600" />
                      <span className="text-sm">
                        {contractor.certifications.filter(c => c.verified).length} Certifications
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <UserCheck className="h-4 w-4 text-purple-600" />
                      <span className="text-sm">
                        Reg: {contractor.registrationNumber}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="flex flex-col gap-2">
                  <Button variant="outline" size="sm">
                    View Profile
                    <ChevronRight className="h-4 w-4 ml-1" />
                  </Button>
                  <Button size="sm">
                    Invite to Tender
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {contractors.length === 0 && (
        <Card>
          <CardContent className="text-center py-12">
            <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Contractors Found</h3>
            <p className="text-muted-foreground">
              Try adjusting your search filters
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}