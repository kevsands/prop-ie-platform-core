/**
 * Blockchain Share Purchase API
 * Handles property share purchases on the blockchain
 */

import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { PropertyTokenizationService } from '@/services/blockchain/property-tokenization';
import { authOptions } from '@/lib/auth-options';
import { z } from 'zod';
import { Logger } from '@/utils/logger';

const logger = new Logger('blockchain-purchase');

// Validation schema
const PurchaseSchema = z.object({
  propertyId: z.string(),
  shares: z.number().min(1),
  chain: z.enum(['mainnet', 'polygon', 'arbitrum', 'testnet']),
});

// Initialize blockchain service
const blockchainService = new PropertyTokenizationService({
  rpcUrls: {
    mainnet: process.env.MAINNET_RPC_URL!,
    polygon: process.env.POLYGON_RPC_URL!,
    arbitrum: process.env.ARBITRUM_RPC_URL!,
    testnet: process.env.TESTNET_RPC_URL!,
  },
  contractAddresses: {
    mainnet: process.env.MAINNET_CONTRACT_ADDRESS!,
    polygon: process.env.POLYGON_CONTRACT_ADDRESS!,
    arbitrum: process.env.ARBITRUM_CONTRACT_ADDRESS!,
    testnet: process.env.TESTNET_CONTRACT_ADDRESS!,
  },
  privateKey: process.env.BLOCKCHAIN_PRIVATE_KEY!,
  infuraKey: process.env.INFURA_KEY,
  alchemyKey: process.env.ALCHEMY_KEY,
});

export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Validate request body
    const body: any = await request.json();
    const validationResult = PurchaseSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: 'Invalid request',
          details: validationResult.error.errors
        },
        { status: 400 }
      );
    }

    const { propertyId, shares, chain } = validationResult.data;

    // Get property details to calculate price
    const property = await blockchainService.getTokenizedProperty(propertyId, chain);
    
    if (!property) {
      return NextResponse.json(
        { error: 'Property not found' },
        { status: 404 }
      );
    }

    if (!property.verified) {
      return NextResponse.json(
        { error: 'Property not verified' },
        { status: 400 }
      );
    }

    const availableShares = parseInt(property.availableShares);
    if (shares > availableShares) {
      return NextResponse.json(
        { 
          error: 'Insufficient shares available',
          available: availableShares
        },
        { status: 400 }
      );
    }

    // Calculate total price
    const pricePerShare = BigInt(property.totalValue) / BigInt(property.totalShares);
    const totalPrice = pricePerShare * BigInt(shares);

    // Check user's balance (in production, integrate with payment gateway)
    // For now, we'll assume the user has sufficient funds

    // Purchase shares
    // Use user ID as the buyer identifier - the blockchain service should map this to a wallet address
    const tokenId = await blockchainService.purchaseShares({
      propertyId,
      shares,
      buyer: session.user.id,
      chain,
    });

    // Log the purchase event
    logger.info('Shares purchased', {
      propertyId,
      shares,
      tokenId,
      userId: session.user.id,
      chain,
      totalPrice: totalPrice.toString(),
    });

    // Return success response
    return NextResponse.json({
      success: true,
      tokenId,
      shares,
      totalPrice: totalPrice.toString(),
      message: `Successfully purchased ${shares} shares`,
    });

  } catch (error) {
    logger.error('Share purchase failed:', error);
    return NextResponse.json(
      {
        error: 'Purchase failed',
        message: (error as Error).message
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Get query parameters
    const { searchParams } = new URL(request.url);
    const chain = searchParams.get('chain') || 'polygon';

    // Get user's holdings across all properties
    // Use user ID as the identifier - the blockchain service should map this to a wallet address
    const userAddress = session.user.id;
    
    // In production, we'd query user's tokens from the blockchain
    // For now, return mock data structure
    const holdings: any[] = [];

    // Get blockchain statistics
    const stats = await blockchainService.getBlockchainStats(chain);

    return NextResponse.json({
      holdings,
      userAddress,
      chain,
      stats,
    });

  } catch (error) {
    logger.error('Failed to get user holdings:', error);
    return NextResponse.json(
      {
        error: 'Failed to retrieve holdings',
        message: (error as Error).message
      },
      { status: 500 }
    );
  }
}