import React from 'react';
'use client';

import { ReactNode, useState, useEffect } from 'react';
import { usePathname, useRouter } from 'next/navigation';
import Link from 'next/link';
import { useSession } from 'next-auth/react';
import { useAuth } from '@/context/AuthContext';
import { 
  Home, Building, Users, FileText, TrendingUp, Settings, 
  CreditCard, BarChart3, Briefcase, FolderOpen, Grid,
  Package, MessageSquare, Shield, Plug, ChevronDown,
  ChevronRight, Plus, Search, Bell, User as UserIcon, LogOut,
  Calculator, Target, Layers, GitBranch, Calendar
} from 'lucide-react';

interface DeveloperLayoutProps {
  children: ReactNode;
}

export default function DeveloperLayout({ children }: DeveloperLayoutProps) {
  const pathname = usePathname();
  const router = useRouter();
  const { data: session, status } = useSession();
  const { user, isAuthenticated, signOut } = useAuth();

  const [developmentsOpensetDevelopmentsOpen] = useState(false);
  const [teamOpensetTeamOpen] = useState(false);
  const [settingsOpensetSettingsOpen] = useState(false);
  const [selectedDevelopmentsetSelectedDevelopment] = useState('all');
  const [userNamesetUserName] = useState('');
  const [userInitialssetUserInitials] = useState('JD');
  const [userEmailsetUserEmail] = useState('developer@example.com');

  // Check authentication status
  useEffect(() => {
    if (status === 'unauthenticated') {
      // Redirect to login if not authenticated
      router.push('/login?callbackUrl=' + encodeURIComponent(pathname));
    } else if (status === 'authenticated' && session?.user) {
      // Get user info from session
      const sessionUser = session.user as any;

      // Check if user has DEVELOPER role
      const userRole = sessionUser.role?.toLowerCase() || '';
      if (user && !user.roles.some(r => r.toLowerCase() === 'developer')) {

        // Optional: Redirect to appropriate dashboard based on role
      }

      // Set user info
      const fullName = sessionUser.name || 'Developer';
      setUserName(fullName);

      // Set user initials
      const nameParts = fullName.split(' ');
      if (nameParts.length> 1) {
        setUserInitials(nameParts[0][0] + nameParts[1][0]);
      } else if (nameParts.length === 1 && nameParts[0].length> 0) {
        setUserInitials(nameParts[0][0]);
      }

      // Set email
      setUserEmail(sessionUser.email || 'developer@example.com');
    }
  }, [status, session, routerpathnameuser]);

  // Handle logout
  const handleLogout = async () => {
    await signOut();
    router.push('/login');
  };

  // Mock developments for dropdown
  const developments = [
    { id: '1', name: 'Fitzgerald Gardens', status: 'active', units: 120, location: 'Drogheda' },
    { id: '2', name: 'Ellwood', status: 'active', units: 65, location: 'Dublin 15' },
    { id: '3', name: 'Ballymakenny View', status: 'active', units: 40, location: 'Drogheda' }
  ];

  const isActive = (path: string) => pathname === path;
  const isActiveGroup = (basePath: string) => pathname.startsWith(basePath);

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Enhanced Sidebar */}
      <div className="w-72 bg-white border-r border-gray-200 flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-gray-900">Developer Portal</h2>
            <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
              <Search className="w-5 h-5 text-gray-500" />
            </button>
          </div>

          {/* Development Selector */}
          <div className="relative">
            <select
              value={selectedDevelopment}
              onChange={(e: any) => setSelectedDevelopment(e.target.value)}
              className="w-full px-3 py-2 pr-8 border border-gray-300 rounded-lg text-sm appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Developments</option>
              {developments.map(dev => (
                <option key={dev.id} value={dev.id}>
                  {dev.name} ({dev.units} units)
                </option>
              ))}
            </select>
            <ChevronDown className="w-4 h-4 text-gray-500 absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none" />
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto p-4">
          <div className="space-y-1">
            {/* Dashboard */}
            <Link
              href="/developer"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActive('/developer') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <Home className="w-5 h-5 mr-3" />
              Dashboard
            </Link>

            {/* Developments Dropdown */}
            <div>
              <button
                onClick={() => setDevelopmentsOpen(!developmentsOpen)}
                className={`w-full flex items-center justify-between px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                  isActiveGroup('/developer/developments') 
                    ? 'bg-blue-50 text-blue-700' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div className="flex items-center">
                  <Building className="w-5 h-5 mr-3" />
                  Developments
                </div>
                {developmentsOpen ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />}
              </button>

              {developmentsOpen && (
                <div className="mt-1 ml-8 space-y-1">
                  <Link
                    href="/developer/developments"
                    className="flex items-center justify-between px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg"
                  >
                    <span>All Developments</span>
                    <span className="text-xs bg-gray-200 rounded-full px-2 py-1">{developments.length}</span>
                  </Link>
                  {developments.map(dev => (
                    <Link
                      key={dev.id}
                      href={`/developer/developments/${dev.id}`}
                      className="flex items-center justify-between px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg"
                    >
                      <span>{dev.name}</span>
                      <span className={`text-xs rounded-full px-2 py-1 ${
                        dev.status === 'active' ? 'bg-green-100 text-green-700' : 'bg-yellow-100 text-yellow-700'
                      }`}>
                        {dev.status}
                      </span>
                    </Link>
                  ))}
                  <button
                    onClick={() => router.push('/developer/developments/new')}
                    className="w-full flex items-center px-3 py-2 text-sm text-blue-600 hover:bg-blue-50 rounded-lg"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add Development
                  </button>
                </div>
              )}
            </div>

            {/* Project Management */}
            <Link
              href="/developer/projects"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/projects') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <Grid className="w-5 h-5 mr-3" />
              Project Management
            </Link>

            {/* Portfolio Timeline */}
            <Link
              href="/developer/timeline"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/timeline') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <Calendar className="w-5 h-5 mr-3" />
              Portfolio Timeline
            </Link>

            {/* Teams Dropdown */}
            <div>
              <button
                onClick={() => setTeamOpen(!teamOpen)}
                className={`w-full flex items-center justify-between px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                  isActiveGroup('/developer/team') 
                    ? 'bg-blue-50 text-blue-700' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div className="flex items-center">
                  <Users className="w-5 h-5 mr-3" />
                  Teams & Contractors
                </div>
                {teamOpen ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />}
              </button>

              {teamOpen && (
                <div className="mt-1 ml-8 space-y-1">
                  <Link href="/developer/team/members" className="block px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">
                    Team Members
                  </Link>
                  <Link href="/developer/team/contractors" className="block px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">
                    Contractors
                  </Link>
                  <Link href="/developer/team/directory" className="block px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">
                    Contractor Directory
                  </Link>
                  <Link href="/developer/team/compliance" className="block px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">
                    Compliance Tracking
                  </Link>
                </div>
              )}
            </div>

            {/* Tenders */}
            <Link
              href="/developer/tenders"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/tenders') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <Briefcase className="w-5 h-5 mr-3" />
              Tender Management
            </Link>

            {/* Financial */}
            <Link
              href="/developer/financial"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/financial') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <Calculator className="w-5 h-5 mr-3" />
              Financial & Appraisals
            </Link>

            {/* Sales */}
            <Link
              href="/developer/sales"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/sales') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <TrendingUp className="w-5 h-5 mr-3" />
              Sales Management
            </Link>

            {/* Analytics */}
            <Link
              href="/developer/analytics"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/analytics') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <BarChart3 className="w-5 h-5 mr-3" />
              Analytics & Reports
            </Link>

            {/* Documents */}
            <Link
              href="/developer/documents"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/documents') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <FolderOpen className="w-5 h-5 mr-3" />
              Documents
            </Link>

            {/* Messages */}
            <Link
              href="/developer/messages"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/messages') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <MessageSquare className="w-5 h-5 mr-3" />
              Messages
              <span className="ml-auto bg-blue-600 text-white text-xs rounded-full px-2 py-0.5">3</span>
            </Link>

            {/* Integrations */}
            <Link
              href="/developer/integrations"
              className={`flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                isActiveGroup('/developer/integrations') 
                  ? 'bg-blue-50 text-blue-700' 
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <Plug className="w-5 h-5 mr-3" />
              Integrations
            </Link>

            {/* Settings Dropdown */}
            <div className="pt-4 mt-4 border-t border-gray-200">
              <button
                onClick={() => setSettingsOpen(!settingsOpen)}
                className={`w-full flex items-center justify-between px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                  isActiveGroup('/developer/settings') 
                    ? 'bg-blue-50 text-blue-700' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div className="flex items-center">
                  <Settings className="w-5 h-5 mr-3" />
                  Settings
                </div>
                {settingsOpen ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />}
              </button>

              {settingsOpen && (
                <div className="mt-1 ml-8 space-y-1">
                  <Link href="/developer/settings/company" className="block px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">
                    Company Details
                  </Link>
                  <Link href="/developer/settings/profile" className="block px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">
                    Profile Settings
                  </Link>
                  <Link href="/developer/settings/security" className="block px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">
                    Security
                  </Link>
                  <Link href="/developer/settings/billing" className="block px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">
                    Billing & Plans
                  </Link>
                </div>
              )}
            </div>
          </div>
        </nav>

        {/* User Section */}
        <div className="p-4 border-t border-gray-200">
          <div 
            className="flex items-center justify-between p-3 hover:bg-gray-100 rounded-lg cursor-pointer"
            onClick={handleLogout}
          >
            <div className="flex items-center">
              <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white font-medium">
                {userInitials}
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-gray-900">{userName || 'Developer User'}</p>
                <p className="text-xs text-gray-500">{userEmail}</p>
              </div>
            </div>
            <LogOut className="w-5 h-5 text-gray-400" />
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden">
        {/* Top Bar */}
        <header className="bg-white border-b border-gray-200 h-16 flex items-center justify-between px-6">
          <div className="flex items-center space-x-4">
            <h1 className="text-xl font-semibold text-gray-900">
              {pathname === '/developer' ? 'Dashboard' : 
               pathname.includes('developments') ? 'Developments' :
               pathname.includes('projects') ? 'Project Management' :
               pathname.includes('timeline') ? 'Portfolio Timeline' :
               pathname.includes('team') ? 'Teams & Contractors' :
               pathname.includes('tenders') ? 'Tender Management' :
               pathname.includes('financial') ? 'Financial & Appraisals' :
               pathname.includes('sales') ? 'Sales Management' :
               pathname.includes('analytics') ? 'Analytics & Reports' :
               pathname.includes('documents') ? 'Documents' :
               pathname.includes('messages') ? 'Messages' :
               pathname.includes('integrations') ? 'Integrations' :
               pathname.includes('settings') ? 'Settings' : 'Developer Portal'}
            </h1>
            {selectedDevelopment !== 'all' && (
              <span className="text-sm text-gray-500">
                • {developments.find(d => d.id === selectedDevelopment)?.name}
              </span>
            )}
          </div>

          <div className="flex items-center space-x-4">
            <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors relative">
              <Bell className="w-5 h-5 text-gray-600" />
              <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
            </button>
            <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
              <UserIcon className="w-5 h-5 text-gray-600" />
            </button>
          </div>
        </header>

        {/* Page Content */}
        <main className="flex-1 overflow-auto bg-gray-50">
          {children}
        </main>
      </div>
    </div>
  );
}