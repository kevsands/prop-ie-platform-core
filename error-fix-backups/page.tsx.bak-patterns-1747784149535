'use client';

import { useState, useEffect } from 'react';
import { 
  BarChart3, TrendingUp, Building, Users, Euro, FileText,
  Calendar, Clock, CheckCircle, XCircle, AlertCircle,
  Download, RefreshCw, Filter, ChevronDown, ArrowUp,
  ArrowDown, DollarSign, Activity, Package, Briefcase
} from 'lucide-react';
import { format, subDays, startOfMonth, endOfMonth } from 'date-fns';

interface AnalyticsData {
  transactions: {
    total: number;
    active: number;
    completed: number;
    cancelled: number;
    byStatus: { status: string; count: number }[];
    byStage: { stage: string; count: number }[];
    trend: { date: string; count: number }[];
  };
  revenue: {
    total: number;
    collected: number;
    outstanding: number;
    byMonth: { month: string; amount: number }[];
    byDevelopment: { development: string; amount: number }[];
    avgTransactionValue: number;
  };
  developments: {
    total: number;
    unitsTotal: number;
    unitsSold: number;
    unitsAvailable: number;
    occupancyRate: number;
    byStatus: { status: string; count: number }[];
  };
  users: {
    total: number;
    buyers: number;
    activeUsers: number;
    newThisMonth: number;
    byRole: { role: string; count: number }[];
  };
  performance: {
    avgTimeToSale: number;
    conversionRate: number;
    viewingToOfferRate: number;
    documentCompletionRate: number;
    customerSatisfaction: number;
  };
}

export default function AnalyticsPage() {
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState<AnalyticsData | null>(null);
  const [dateRange, setDateRange] = useState('last30days');
  const [selectedMetric, setSelectedMetric] = useState('overview');

  useEffect(() => {
    fetchAnalyticsData();
  }, [dateRange]);

  const fetchAnalyticsData = async () => {
    try {
      // In production, this would fetch from API
      // For now, using mock data
      const mockData: AnalyticsData = {
        transactions: {
          total: 245,
          active: 142,
          completed: 87,
          cancelled: 16,
          byStatus: [
            { status: 'ENQUIRY', count: 45 },
            { status: 'VIEWING_SCHEDULED', count: 32 },
            { status: 'OFFER_MADE', count: 28 },
            { status: 'SALE_AGREED', count: 37 },
            { status: 'CONTRACTS_ISSUED', count: 18 },
            { status: 'COMPLETED', count: 87 },
          ],
          byStage: [
            { stage: 'INITIAL_ENQUIRY', count: 45 },
            { stage: 'VIEWING', count: 32 },
            { stage: 'NEGOTIATION', count: 28 },
            { stage: 'RESERVATION', count: 37 },
            { stage: 'LEGAL_REVIEW', count: 18 },
            { stage: 'COMPLETION', count: 87 },
          ],
          trend: Array.from({ length: 30 }, (_, i) => ({
            date: format(subDays(new Date(), 29 - i), 'MMM dd'),
            count: Math.floor(Math.random() * 15) + 5,
          })),
        },
        revenue: {
          total: 75842000,
          collected: 45842000,
          outstanding: 30000000,
          byMonth: [
            { month: 'Jan', amount: 4200000 },
            { month: 'Feb', amount: 5800000 },
            { month: 'Mar', amount: 6300000 },
            { month: 'Apr', amount: 7100000 },
            { month: 'May', amount: 8500000 },
            { month: 'Jun', amount: 9200000 },
          ],
          byDevelopment: [
            { development: 'Fitzgerald Gardens', amount: 35000000 },
            { development: 'Ellwood', amount: 28000000 },
            { development: 'Ballymakenny View', amount: 12842000 },
          ],
          avgTransactionValue: 425000,
        },
        developments: {
          total: 3,
          unitsTotal: 225,
          unitsSold: 158,
          unitsAvailable: 67,
          occupancyRate: 70.2,
          byStatus: [
            { status: 'PLANNING', count: 0 },
            { status: 'ACTIVE', count: 3 },
            { status: 'COMPLETED', count: 0 },
          ],
        },
        users: {
          total: 1247,
          buyers: 892,
          activeUsers: 423,
          newThisMonth: 87,
          byRole: [
            { role: 'BUYER', count: 892 },
            { role: 'DEVELOPER', count: 12 },
            { role: 'SOLICITOR', count: 45 },
            { role: 'AGENT', count: 34 },
            { role: 'ARCHITECT', count: 8 },
            { role: 'CONTRACTOR', count: 28 },
          ],
        },
        performance: {
          avgTimeToSale: 72, // days
          conversionRate: 35.5, // percentage
          viewingToOfferRate: 42.3,
          documentCompletionRate: 87.5,
          customerSatisfaction: 4.5, // out of 5
        },
      };

      setData(mockData);
    } catch (error) {
      console.error('Error fetching analytics:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="w-8 h-8 animate-spin text-blue-600 mx-auto mb-4" />
          <p className="text-gray-600">Loading analytics...</p>
        </div>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="min-h-screen p-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-800">Failed to load analytics data</p>
        </div>
      </div>
    );
  }

  const metrics = [
    {
      id: 'overview',
      label: 'Overview',
      icon: BarChart3,
    },
    {
      id: 'transactions',
      label: 'Transactions',
      icon: Activity,
    },
    {
      id: 'revenue',
      label: 'Revenue',
      icon: Euro,
    },
    {
      id: 'developments',
      label: 'Developments',
      icon: Building,
    },
    {
      id: 'users',
      label: 'Users',
      icon: Users,
    },
    {
      id: 'performance',
      label: 'Performance',
      icon: TrendingUp,
    },
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Analytics Dashboard</h1>
              <p className="text-gray-600 mt-1">Real-time insights and performance metrics</p>
            </div>
            <div className="flex items-center space-x-3">
              <select
                value={dateRange}
                onChange={(e) => setDateRange(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg bg-white"
              >
                <option value="last7days">Last 7 Days</option>
                <option value="last30days">Last 30 Days</option>
                <option value="last90days">Last 90 Days</option>
                <option value="thisMonth">This Month</option>
                <option value="lastMonth">Last Month</option>
                <option value="thisYear">This Year</option>
              </select>
              <button className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center">
                <Filter className="w-4 h-4 mr-2" />
                Filter
              </button>
              <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center">
                <Download className="w-4 h-4 mr-2" />
                Export Report
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="bg-white border-b border-gray-200">
        <div className="container mx-auto px-4">
          <div className="flex space-x-6">
            {metrics.map((metric) => {
              const Icon = metric.icon;
              return (
                <button
                  key={metric.id}
                  onClick={() => setSelectedMetric(metric.id)}
                  className={`py-3 px-1 border-b-2 font-medium text-sm transition-colors flex items-center ${
                    selectedMetric === metric.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  <Icon className="w-4 h-4 mr-2" />
                  {metric.label}
                </button>
              );
            })}
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="container mx-auto px-4 py-8">
        {selectedMetric === 'overview' && (
          <div className="space-y-6">
            {/* Key Metrics Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <MetricCard
                title="Total Revenue"
                value={`â‚¬${(data.revenue.total / 1000000).toFixed(1)}M`}
                change={12.5}
                icon={Euro}
                color="green"
              />
              <MetricCard
                title="Active Transactions"
                value={data.transactions.active}
                change={8.3}
                icon={Activity}
                color="blue"
              />
              <MetricCard
                title="Units Sold"
                value={`${data.developments.unitsSold}/${data.developments.unitsTotal}`}
                change={15.2}
                icon={Building}
                color="purple"
              />
              <MetricCard
                title="Active Users"
                value={data.users.activeUsers}
                change={-3.4}
                icon={Users}
                color="orange"
              />
            </div>

            {/* Charts Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Transaction Trend */}
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-semibold mb-4">Transaction Trend</h3>
                <div className="h-64 flex items-end space-x-2">
                  {data.transactions.trend.map((day, index) => (
                    <div key={index} className="flex-1 relative group">
                      <div
                        className="bg-blue-600 hover:bg-blue-700 transition-colors rounded-t"
                        style={{ height: `${(day.count / 20) * 100}%` }}
                      >
                        <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity">
                          {day.count}
                        </div>
                      </div>
                      <p className="text-xs text-gray-600 text-center mt-2 -rotate-45 transform origin-top-left">
                        {day.date}
                      </p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Revenue by Development */}
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-semibold mb-4">Revenue by Development</h3>
                <div className="space-y-4">
                  {data.revenue.byDevelopment.map((dev, index) => (
                    <div key={index}>
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-gray-700">{dev.development}</span>
                        <span className="text-sm text-gray-600">
                          â‚¬{(dev.amount / 1000000).toFixed(1)}M
                        </span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-blue-600 h-2 rounded-full"
                          style={{
                            width: `${(dev.amount / data.revenue.total) * 100}%`,
                          }}
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Performance Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <PerformanceCard
                title="Avg. Time to Sale"
                value={`${data.performance.avgTimeToSale} days`}
                trend="down"
                percentage={-5.2}
              />
              <PerformanceCard
                title="Conversion Rate"
                value={`${data.performance.conversionRate}%`}
                trend="up"
                percentage={3.7}
              />
              <PerformanceCard
                title="Customer Satisfaction"
                value={`${data.performance.customerSatisfaction}/5`}
                trend="up"
                percentage={2.1}
              />
            </div>
          </div>
        )}

        {selectedMetric === 'transactions' && (
          <div className="space-y-6">
            {/* Transaction Status Distribution */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold mb-4">Transaction Status Distribution</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
                {data.transactions.byStatus.map((status, index) => (
                  <div key={index} className="text-center">
                    <div className="text-2xl font-bold text-gray-900">{status.count}</div>
                    <div className="text-sm text-gray-600">{status.status.replace(/_/g, ' ')}</div>
                  </div>
                ))}
              </div>
            </div>

            {/* Transaction Pipeline */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold mb-4">Transaction Pipeline</h3>
              <div className="relative">
                <div className="absolute top-8 left-0 right-0 h-1 bg-gray-200"></div>
                <div className="relative flex justify-between">
                  {data.transactions.byStage.map((stage, index) => (
                    <div key={index} className="relative">
                      <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold">
                        {stage.count}
                      </div>
                      <p className="text-xs text-gray-600 text-center mt-2 max-w-[80px]">
                        {stage.stage.replace(/_/g, ' ')}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {selectedMetric === 'revenue' && (
          <div className="space-y-6">
            {/* Revenue Overview */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Total Revenue</h4>
                <p className="text-3xl font-bold text-gray-900">
                  â‚¬{(data.revenue.total / 1000000).toFixed(1)}M
                </p>
                <p className="text-sm text-green-600 mt-2">+22.5% from last period</p>
              </div>
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Collected</h4>
                <p className="text-3xl font-bold text-gray-900">
                  â‚¬{(data.revenue.collected / 1000000).toFixed(1)}M
                </p>
                <div className="mt-2">
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-green-600 h-2 rounded-full"
                      style={{
                        width: `${(data.revenue.collected / data.revenue.total) * 100}%`,
                      }}
                    ></div>
                  </div>
                </div>
              </div>
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Outstanding</h4>
                <p className="text-3xl font-bold text-gray-900">
                  â‚¬{(data.revenue.outstanding / 1000000).toFixed(1)}M
                </p>
                <p className="text-sm text-yellow-600 mt-2">Pending collection</p>
              </div>
            </div>

            {/* Monthly Revenue Chart */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold mb-4">Monthly Revenue Trend</h3>
              <div className="h-64 flex items-end space-x-4">
                {data.revenue.byMonth.map((month, index) => (
                  <div key={index} className="flex-1">
                    <div
                      className="bg-gradient-to-t from-blue-600 to-blue-400 hover:from-blue-700 hover:to-blue-500 transition-colors rounded-t relative group"
                      style={{
                        height: `${(month.amount / 10000000) * 100}%`,
                      }}
                    >
                      <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                        â‚¬{(month.amount / 1000000).toFixed(1)}M
                      </div>
                    </div>
                    <p className="text-sm text-gray-600 text-center mt-2">{month.month}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {selectedMetric === 'developments' && (
          <div className="space-y-6">
            {/* Development Overview */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Total Units</h4>
                <p className="text-3xl font-bold text-gray-900">{data.developments.unitsTotal}</p>
              </div>
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Units Sold</h4>
                <p className="text-3xl font-bold text-green-600">{data.developments.unitsSold}</p>
              </div>
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Available</h4>
                <p className="text-3xl font-bold text-blue-600">{data.developments.unitsAvailable}</p>
              </div>
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Occupancy Rate</h4>
                <p className="text-3xl font-bold text-purple-600">
                  {data.developments.occupancyRate}%
                </p>
              </div>
            </div>

            {/* Development Performance */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold mb-4">Development Performance</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="text-left text-sm text-gray-600 border-b">
                      <th className="pb-3">Development</th>
                      <th className="pb-3">Total Units</th>
                      <th className="pb-3">Sold</th>
                      <th className="pb-3">Available</th>
                      <th className="pb-3">Revenue</th>
                      <th className="pb-3">Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="border-b">
                      <td className="py-3">Fitzgerald Gardens</td>
                      <td className="py-3">120</td>
                      <td className="py-3">95</td>
                      <td className="py-3">25</td>
                      <td className="py-3">â‚¬35.0M</td>
                      <td className="py-3">
                        <span className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                          Active
                        </span>
                      </td>
                    </tr>
                    <tr className="border-b">
                      <td className="py-3">Ellwood</td>
                      <td className="py-3">65</td>
                      <td className="py-3">45</td>
                      <td className="py-3">20</td>
                      <td className="py-3">â‚¬28.0M</td>
                      <td className="py-3">
                        <span className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                          Active
                        </span>
                      </td>
                    </tr>
                    <tr>
                      <td className="py-3">Ballymakenny View</td>
                      <td className="py-3">40</td>
                      <td className="py-3">18</td>
                      <td className="py-3">22</td>
                      <td className="py-3">â‚¬12.8M</td>
                      <td className="py-3">
                        <span className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                          Active
                        </span>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {selectedMetric === 'users' && (
          <div className="space-y-6">
            {/* User Overview */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Total Users</h4>
                <p className="text-3xl font-bold text-gray-900">{data.users.total}</p>
                <p className="text-sm text-green-600 mt-2">+{data.users.newThisMonth} this month</p>
              </div>
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Buyers</h4>
                <p className="text-3xl font-bold text-blue-600">{data.users.buyers}</p>
              </div>
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">Active Users</h4>
                <p className="text-3xl font-bold text-green-600">{data.users.activeUsers}</p>
              </div>
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h4 className="text-sm font-medium text-gray-600 mb-2">New This Month</h4>
                <p className="text-3xl font-bold text-purple-600">{data.users.newThisMonth}</p>
              </div>
            </div>

            {/* User Distribution */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold mb-4">User Distribution by Role</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
                {data.users.byRole.map((role, index) => (
                  <div key={index} className="text-center">
                    <div className="text-2xl font-bold text-gray-900">{role.count}</div>
                    <div className="text-sm text-gray-600">{role.role}</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {selectedMetric === 'performance' && (
          <div className="space-y-6">
            {/* Performance Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold">Conversion Rate</h4>
                  <TrendingUp className="w-5 h-5 text-green-600" />
                </div>
                <p className="text-3xl font-bold text-gray-900">{data.performance.conversionRate}%</p>
                <p className="text-sm text-gray-600 mt-2">Enquiry to sale conversion</p>
                <div className="mt-4">
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-green-600 h-2 rounded-full"
                      style={{ width: `${data.performance.conversionRate}%` }}
                    ></div>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold">Viewing to Offer</h4>
                  <Activity className="w-5 h-5 text-blue-600" />
                </div>
                <p className="text-3xl font-bold text-gray-900">
                  {data.performance.viewingToOfferRate}%
                </p>
                <p className="text-sm text-gray-600 mt-2">Viewings resulting in offers</p>
                <div className="mt-4">
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-blue-600 h-2 rounded-full"
                      style={{ width: `${data.performance.viewingToOfferRate}%` }}
                    ></div>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold">Document Completion</h4>
                  <FileText className="w-5 h-5 text-purple-600" />
                </div>
                <p className="text-3xl font-bold text-gray-900">
                  {data.performance.documentCompletionRate}%
                </p>
                <p className="text-sm text-gray-600 mt-2">Documents completed on time</p>
                <div className="mt-4">
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-purple-600 h-2 rounded-full"
                      style={{ width: `${data.performance.documentCompletionRate}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            </div>

            {/* Average Time to Sale */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold mb-4">Average Time to Sale</h3>
              <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">5</div>
                  <div className="text-sm text-gray-600">Enquiry to Viewing</div>
                  <div className="text-xs text-gray-500">days</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">12</div>
                  <div className="text-sm text-gray-600">Viewing to Offer</div>
                  <div className="text-xs text-gray-500">days</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">8</div>
                  <div className="text-sm text-gray-600">Offer to Sale Agreed</div>
                  <div className="text-xs text-gray-500">days</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">28</div>
                  <div className="text-sm text-gray-600">Sale to Contracts</div>
                  <div className="text-xs text-gray-500">days</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-gray-900">19</div>
                  <div className="text-sm text-gray-600">Contracts to Completion</div>
                  <div className="text-xs text-gray-500">days</div>
                </div>
              </div>
              <div className="mt-6 text-center">
                <p className="text-3xl font-bold text-gray-900">{data.performance.avgTimeToSale} days</p>
                <p className="text-sm text-gray-600">Total average time to sale</p>
              </div>
            </div>

            {/* Customer Satisfaction */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold mb-4">Customer Satisfaction</h3>
              <div className="flex items-center justify-center">
                <div className="text-5xl font-bold text-gray-900">
                  {data.performance.customerSatisfaction}
                </div>
                <div className="ml-4">
                  <div className="flex space-x-1">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <svg
                        key={star}
                        className={`w-8 h-8 ${
                          star <= Math.floor(data.performance.customerSatisfaction)
                            ? 'text-yellow-400'
                            : 'text-gray-300'
                        }`}
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                    ))}
                  </div>
                  <p className="text-sm text-gray-600 mt-2">out of 5</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

interface MetricCardProps {
  title: string;
  value: string | number;
  change: number;
  icon: any;
  color: string;
}

function MetricCard({ title, value, change, icon: Icon, color }: MetricCardProps) {
  const colors: Record<string, string> = {
    green: 'bg-green-100 text-green-600',
    blue: 'bg-blue-100 text-blue-600',
    purple: 'bg-purple-100 text-purple-600',
    orange: 'bg-orange-100 text-orange-600',
  };

  return (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <div className="flex items-center justify-between mb-4">
        <div className={`p-3 rounded-lg ${colors[color]}`}>
          <Icon className="w-6 h-6" />
        </div>
        <div className={`flex items-center text-sm ${change > 0 ? 'text-green-600' : 'text-red-600'}`}>
          {change > 0 ? <ArrowUp className="w-4 h-4 mr-1" /> : <ArrowDown className="w-4 h-4 mr-1" />}
          {Math.abs(change)}%
        </div>
      </div>
      <p className="text-gray-600 text-sm">{title}</p>
      <p className="text-2xl font-bold text-gray-900 mt-1">{value}</p>
    </div>
  );
}

interface PerformanceCardProps {
  title: string;
  value: string;
  trend: 'up' | 'down';
  percentage: number;
}

function PerformanceCard({ title, value, trend, percentage }: PerformanceCardProps) {
  return (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <h4 className="text-sm font-medium text-gray-600 mb-2">{title}</h4>
      <p className="text-2xl font-bold text-gray-900">{value}</p>
      <div className={`flex items-center mt-2 text-sm ${
        trend === 'up' ? 'text-green-600' : 'text-red-600'
      }`}>
        {trend === 'up' ? (
          <ArrowUp className="w-4 h-4 mr-1" />
        ) : (
          <ArrowDown className="w-4 h-4 mr-1" />
        )}
        {Math.abs(percentage)}% from last period
      </div>
    </div>
  );
}