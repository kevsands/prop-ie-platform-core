import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

const createProjectSchema = z.object({
  name: z.string().min(1),
  description: z.string(),
  location: z.string().min(1),
  type: z.enum(['residential', 'commercial', 'mixed']),
  totalUnits: z.number().int().positive(),
  startDate: z.string(),
  estimatedCompletion: z.string(),
});

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status');

    const projects = await prisma.project.findMany({
      where: {
        developerId: session.user.id,
        ...(status && { status }),
      },
      include: {
        units: {
          select: {
            id: true,
            status: true,
          },
        },
        transactions: {
          select: {
            id: true,
            totalAmount: true,
            state: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    // Calculate aggregated data for each project
    const projectsWithStats = projects.map(project => {
      const soldUnits = project.units.filter((unit: any) => unit.status === 'sold').length;
      const reservedUnits = project.units.filter((unit: any) => unit.status === 'reserved').length;
      const totalRevenue = project.transactions
        .filter((t: any) => t.state === 'COMPLETED')
        .reduce((sum: any, t: any) => sum + t.totalAmount, 0);

      return {
        id: project.id,
        name: project.name,
        description: project.description,
        location: project.location,
        status: project.status,
        type: project.type,
        totalUnits: project.totalUnits,
        soldUnits,
        reservedUnits,
        startDate: project.startDate.toISOString(),
        estimatedCompletion: project.estimatedCompletion.toISOString(),
        totalRevenue,
        images: project.images || [],
        createdAt: project.createdAt.toISOString(),
      };
    });

    return NextResponse.json({ projects: projectsWithStats });
  } catch (error) {
    console.error('Error fetching projects:', error);
    return NextResponse.json(
      { error: 'Failed to fetch projects' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body: any = await request.json();
    const validatedData = createProjectSchema.parse(body);

    const project = await prisma.project.create({
      data: {
        ...validatedData,
        developerId: session.user.id,
        status: 'planning',
        startDate: new Date(validatedData.startDate),
        estimatedCompletion: new Date(validatedData.estimatedCompletion),
        images: [],
      },
    });

    // Return the formatted project
    return NextResponse.json({
      id: project.id,
      name: project.name,
      description: project.description,
      location: project.location,
      status: project.status,
      type: project.type,
      totalUnits: project.totalUnits,
      soldUnits: 0,
      reservedUnits: 0,
      startDate: project.startDate.toISOString(),
      estimatedCompletion: project.estimatedCompletion.toISOString(),
      totalRevenue: 0,
      images: [],
      createdAt: project.createdAt.toISOString(),
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      );
    }

    console.error('Error creating project:', error);
    return NextResponse.json(
      { error: 'Failed to create project' },
      { status: 500 }
    );
  }
}