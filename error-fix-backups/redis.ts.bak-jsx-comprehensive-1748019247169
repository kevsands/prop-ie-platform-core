import { Redis } from 'ioredis';
import { config } from '@/config/env';
import { logError, logDebug } from '@/lib/monitoring/logger';
import { perfMonitor } from '@/lib/monitoring/performance';

// Create Redis client with connection pooling
export const redis = new Redis(config.redis.url, {
  password: config.redis.password,
  maxRetriesPerRequest: 3,
  retryStrategy: (times) => {
    const delay = Math.min(times * 50, 2000);
    return delay;
  },
  enableReadyCheck: true,
  lazyConnect: true,
  keepAlive: 30000,
  connectionName: 'prop-ie-app'});

// Connection event handlers
redis.on('connect', () => {
  logDebug('Redis connected');
});

redis.on('error', (error) => {
  logError('Redis error', error);
});

redis.on('close', () => {
  logDebug('Redis connection closed');
});

// Cache key prefixes
export const CacheKeys = {
  USER: 'user:',
  PROPERTY: 'property:',
  DEVELOPMENT: 'development:',
  TRANSACTION: 'transaction:',
  SESSION: 'session:',
  API_RESPONSE: 'api:',
  QUERY_RESULT: 'query:'} as const;

// Cache TTL values (in seconds)
export const CacheTTL = {
  SHORT: 60, // 1 minute
  MEDIUM: 300, // 5 minutes
  LONG: 3600, // 1 hour
  DAY: 86400, // 24 hours
  WEEK: 604800, // 7 days
} as const;

/**
 * Generic cache wrapper
 */
export class CacheManager {
  /**
   * Get value from cache
   */
  async get<T>(key: string): Promise<T | null> {
    perfMonitor.mark(`cache.get.${key}`);

    try {
      const value = await redis.get(key);
      const duration = perfMonitor.measure(`cache.get.${key}`);

      if (!value) {
        return null;
      }

      return JSON.parse(value) as T;
    } catch (error) {
      logError('Cache get error', error, { key });
      return null;
    }
  }

  /**
   * Set value in cache
   */
  async set<T>(key: string, value: T, ttl: number = CacheTTL.MEDIUM): Promise<void> {
    perfMonitor.mark(`cache.set.${key}`);

    try {
      const serialized = JSON.stringify(value);
      await redis.setex(key, ttl, serialized);

      perfMonitor.measure(`cache.set.${key}`, { ttl });
    } catch (error) {
      logError('Cache set error', error, { key });
    }
  }

  /**
   * Delete value from cache
   */
  async delete(key: string): Promise<void> {
    try {
      await redis.del(key);
    } catch (error) {
      logError('Cache delete error', error, { key });
    }
  }

  /**
   * Delete multiple keys by pattern
   */
  async deletePattern(pattern: string): Promise<void> {
    try {
      const keys = await redis.keys(pattern);
      if (keys.length > 0) {
        await redis.del(...keys);
      }
    } catch (error) {
      logError('Cache delete pattern error', error, { pattern });
    }
  }

  /**
   * Check if key exists
   */
  async exists(key: string): Promise<boolean> {
    try {
      const result = await redis.exists(key);
      return result === 1;
    } catch (error) {
      logError('Cache exists error', error, { key });
      return false;
    }
  }

  /**
   * Get or set value with factory function
   */
  async getOrSet<T>(
    key: string,
    factory: () => Promise<T>,
    ttl: number = CacheTTL.MEDIUM
  ): Promise<T> {
    // Try to get from cache first
    const cached = await this.get<T>(key);
    if (cached !== null) {
      return cached;
    }

    // Get fresh value
    const value = await factory();

    // Store in cache
    await this.set(key, value, ttl);

    return value;
  }

  /**
   * Invalidate cache by tags
   */
  async invalidateByTags(tags: string[]): Promise<void> {
    for (const tag of tags) {
      await this.deletePattern(`*:${tag}:*`);
    }
  }
}

// Export singleton instance
export const cache = new CacheManager();

/**
 * Cache decorator for methods
 */
export function Cacheable(keyPrefix: string, ttl: number = CacheTTL.MEDIUM) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;

    descriptor.value = async function (...args: any[]) {
      // Generate cache key
      const key = `${keyPrefix}:${propertyKey}:${JSON.stringify(args)}`;

      // Try to get from cache
      const cached = await cache.get(key);
      if (cached !== null) {
        return cached;
      }

      // Call original method
      const result = await originalMethod.apply(this, args);

      // Store in cache
      await cache.set(key, result, ttl);

      return result;
    };

    return descriptor;
  };
}

/**
 * Cache invalidation decorator
 */
export function CacheInvalidate(patterns: string[]) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;

    descriptor.value = async function (...args: any[]) {
      // Call original method
      const result = await originalMethod.apply(this, args);

      // Invalidate cache patterns
      for (const pattern of patterns) {
        await cache.deletePattern(pattern);
      }

      return result;
    };

    return descriptor;
  };
}

/**
 * Response cache middleware
 */
export async function cacheResponse(
  key: string,
  handler: () => Promise<Response>,
  ttl: number = CacheTTL.MEDIUM
): Promise<Response> {
  // Try to get cached response
  const cached = await cache.get<{ body: string; headers: Record<string, string> }>(key);

  if (cached) {
    return new Response(cached.body, {
      headers: {
        ...cached.headers,
        'X-Cache': 'HIT'}});
  }

  // Get fresh response
  const response = await handler();

  // Cache successful responses only
  if (response.ok) {
    const body = await response.text();
    const headers: Record<string, string> = {};

    response.headers.forEach((value, key) => {
      headers[key] = value;
    });

    await cache.set(key, { body, headers }, ttl);

    return new Response(body, {
      headers: {
        ...headers,
        'X-Cache': 'MISS'}});
  }

  return response;
}