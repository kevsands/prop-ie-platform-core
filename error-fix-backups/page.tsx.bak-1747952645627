'use client';

import React, { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import Link from 'next/link';
import { 
  Building, Users, Calendar, TrendingUp, Package, 
  Eye, MessageSquare, FileText, Edit, Plus, Check, X,
  ChevronRight, BarChart3, DollarSign, Clock
} from 'lucide-react';

interface Development {
  id: string;
  name: string;
  slug: string;
  description: string;
  address: string;
  city: string;
  county: string;
  totalUnits: number;
  availableUnits: number;
  reservedUnits: number;
  soldUnits: number;
  currentPhase: number;
  totalPhases: number;
  status: string;
  UnitType: UnitType[];
  Viewing: Viewing[];
  media: Media[];
  documents: Document[];
}

interface UnitType {
  id: string;
  name: string;
  bedrooms: number;
  bathrooms: number;
  area: number;
  priceFrom: number;
  totalUnits: number;
  availableUnits: number;
  units: Unit[];
  schedule: ScheduleItem[];
}

interface ScheduleItem {
  id: string;
  room: string;
  area: number;
  order: number;
}

interface Unit {
  id: string;
  unitNumber: string;
  floor: number;
  status: string;
  price: number;
  _count: {
    reservations: number;
    sales: number;
  };
}

interface Viewing {
  id: string;
  name: string;
  email: string;
  phone: string;
  preferredDate: string;
  preferredTime: string;
  status: string;
  unitId?: string;
}

interface Media {
  id: string;
  type: string;
  url: string;
  title: string;
  order: number;
}

interface Document {
  id: string;
  type: string;
  title: string;
  url: string;
}

export default function DevelopmentDetailPage() {
  const params = useParams();
  const [development, setDevelopment] = useState<Development | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedUnitType, setSelectedUnitType] = useState<string | null>(null);

  useEffect(() => {
    fetchDevelopment();
  }, [params.id]);

  const fetchDevelopment = async () => {
    try {
      // Try to fetch from API
      const response = await fetch(`/api/developer/developments/${params.id}`);
      const data: any = await response.json();
      console.log("Development data:", data); // Debug log
      
      if (data.error || !data.development) {
        // Fallback to mock data if API fails or returns error
        console.log("Using mock data");
        
        // Hard-coded mock data for development with ID '1'
        const mockDevelopment = {
          id: params.id,
          name: "Fitzgerald Gardens",
          slug: "fitzgerald-gardens",
          description: "Luxury development in the heart of Drogheda",
          address: "Dublin Road, Drogheda",
          city: "Drogheda",
          county: "Louth",
          totalUnits: 120,
          soldUnits: 95,
          reservedUnits: 5,
          availableUnits: 20,
          currentPhase: 2,
          totalPhases: 3,
          status: "SELLING",
          UnitType: [
            {
              id: "ut1",
              name: "2 Bed Apartment",
              bedrooms: 2,
              bathrooms: 1,
              area: 75,
              priceFrom: 325000,
              totalUnits: 40,
              availableUnits: 8,
              schedule: [
                { id: "s1", room: "Living Room", area: 25, order: 1 },
                { id: "s2", room: "Kitchen", area: 15, order: 2 },
                { id: "s3", room: "Bedroom 1", area: 14, order: 3 },
                { id: "s4", room: "Bedroom 2", area: 12, order: 4 },
                { id: "s5", room: "Bathroom", area: 6, order: 5 },
                { id: "s6", room: "Hallway", area: 3, order: 6 }
              ],
              units: [
                { id: "u1", unitNumber: "101", floor: 1, status: "SOLD", price: 325000, _count: { reservations: 0, sales: 1 } },
                { id: "u2", unitNumber: "102", floor: 1, status: "AVAILABLE", price: 330000, _count: { reservations: 0, sales: 0 } },
                { id: "u3", unitNumber: "103", floor: 1, status: "RESERVED", price: 340000, _count: { reservations: 1, sales: 0 } }
              ]
            },
            {
              id: "ut2",
              name: "3 Bed Semi-Detached",
              bedrooms: 3,
              bathrooms: 2.5,
              area: 110,
              priceFrom: 425000,
              totalUnits: 30,
              availableUnits: 5,
              schedule: [
                { id: "s7", room: "Living Room", area: 22, order: 1 },
                { id: "s8", room: "Kitchen/Dining", area: 28, order: 2 },
                { id: "s9", room: "Bedroom 1", area: 16, order: 3 },
                { id: "s10", room: "Bedroom 2", area: 14, order: 4 },
                { id: "s11", room: "Bedroom 3", area: 12, order: 5 },
                { id: "s12", room: "Bathroom", area: 6, order: 6 },
                { id: "s13", room: "En-suite", area: 4, order: 7 },
                { id: "s14", room: "Hallway", area: 8, order: 8 }
              ],
              units: [
                { id: "u4", unitNumber: "H1", floor: 0, status: "SOLD", price: 425000, _count: { reservations: 0, sales: 1 } },
                { id: "u5", unitNumber: "H2", floor: 0, status: "AVAILABLE", price: 430000, _count: { reservations: 0, sales: 0 } }
              ]
            }
          ],
          Viewing: [
            { id: "v1", name: "John Smith", email: "john@example.com", phone: "0871234567", preferredDate: "2025-06-01", preferredTime: "10:00", status: "CONFIRMED" },
            { id: "v2", name: "Mary Jones", email: "mary@example.com", phone: "0861234567", preferredDate: "2025-06-02", preferredTime: "14:00", status: "REQUESTED" }
          ],
          media: [
            { id: "m1", type: "IMAGE", url: "/images/developments/fitzgerald-gardens-1.jpg", title: "Exterior", order: 1 }
          ],
          DevelopmentDocument: [
            { id: "d1", type: "BROCHURE", title: "Fitzgerald Gardens Brochure", url: "/documents/fitzgerald-gardens-brochure.pdf" },
            { id: "d2", type: "PRICE_LIST", title: "Price List - June 2025", url: "/documents/fitzgerald-gardens-prices.pdf" }
          ]
        };
        
        setDevelopment(mockDevelopment);
        if (mockDevelopment.UnitType && mockDevelopment.UnitType.length > 0) {
          setSelectedUnitType(mockDevelopment.UnitType[0].id);
        }
      } else {
        // Use the API data
        setDevelopment(data.development);
        if (data.development.UnitType && data.development.UnitType.length > 0) {
          setSelectedUnitType(data.development.UnitType[0].id);
        }
      }
    } catch (error) {
      console.error('Error fetching development:', error);
      
      // Fallback to mock data on error
      const mockDevelopment = {
        id: params.id,
        name: "Fitzgerald Gardens",
        slug: "fitzgerald-gardens",
        description: "Luxury development in the heart of Drogheda",
        address: "Dublin Road, Drogheda",
        city: "Drogheda",
        county: "Louth",
        totalUnits: 120,
        soldUnits: 95,
        reservedUnits: 5,
        availableUnits: 20,
        currentPhase: 2,
        totalPhases: 3,
        status: "SELLING",
        UnitType: [
          {
            id: "ut1",
            name: "2 Bed Apartment",
            bedrooms: 2,
            bathrooms: 1,
            area: 75,
            priceFrom: 325000,
            totalUnits: 40,
            availableUnits: 8,
            schedule: [
              { id: "s1", room: "Living Room", area: 25, order: 1 },
              { id: "s2", room: "Kitchen", area: 15, order: 2 },
              { id: "s3", room: "Bedroom 1", area: 14, order: 3 },
              { id: "s4", room: "Bedroom 2", area: 12, order: 4 },
              { id: "s5", room: "Bathroom", area: 6, order: 5 },
              { id: "s6", room: "Hallway", area: 3, order: 6 }
            ],
            units: [
              { id: "u1", unitNumber: "101", floor: 1, status: "SOLD", price: 325000, _count: { reservations: 0, sales: 1 } },
              { id: "u2", unitNumber: "102", floor: 1, status: "AVAILABLE", price: 330000, _count: { reservations: 0, sales: 0 } },
              { id: "u3", unitNumber: "103", floor: 1, status: "RESERVED", price: 340000, _count: { reservations: 1, sales: 0 } }
            ]
          },
          {
            id: "ut2",
            name: "3 Bed Semi-Detached",
            bedrooms: 3,
            bathrooms: 2.5,
            area: 110,
            priceFrom: 425000,
            totalUnits: 30,
            availableUnits: 5,
            schedule: [
              { id: "s7", room: "Living Room", area: 22, order: 1 },
              { id: "s8", room: "Kitchen/Dining", area: 28, order: 2 },
              { id: "s9", room: "Bedroom 1", area: 16, order: 3 },
              { id: "s10", room: "Bedroom 2", area: 14, order: 4 },
              { id: "s11", room: "Bedroom 3", area: 12, order: 5 },
              { id: "s12", room: "Bathroom", area: 6, order: 6 },
              { id: "s13", room: "En-suite", area: 4, order: 7 },
              { id: "s14", room: "Hallway", area: 8, order: 8 }
            ],
            units: [
              { id: "u4", unitNumber: "H1", floor: 0, status: "SOLD", price: 425000, _count: { reservations: 0, sales: 1 } },
              { id: "u5", unitNumber: "H2", floor: 0, status: "AVAILABLE", price: 430000, _count: { reservations: 0, sales: 0 } }
            ]
          }
        ],
        Viewing: [
          { id: "v1", name: "John Smith", email: "john@example.com", phone: "0871234567", preferredDate: "2025-06-01", preferredTime: "10:00", status: "CONFIRMED" },
          { id: "v2", name: "Mary Jones", email: "mary@example.com", phone: "0861234567", preferredDate: "2025-06-02", preferredTime: "14:00", status: "REQUESTED" }
        ],
        media: [
          { id: "m1", type: "IMAGE", url: "/images/developments/fitzgerald-gardens-1.jpg", title: "Exterior", order: 1 }
        ],
        DevelopmentDocument: [
          { id: "d1", type: "BROCHURE", title: "Fitzgerald Gardens Brochure", url: "/documents/fitzgerald-gardens-brochure.pdf" },
          { id: "d2", type: "PRICE_LIST", title: "Price List - June 2025", url: "/documents/fitzgerald-gardens-prices.pdf" }
        ]
      };
      
      setDevelopment(mockDevelopment);
      if (mockDevelopment.UnitType && mockDevelopment.UnitType.length > 0) {
        setSelectedUnitType(mockDevelopment.UnitType[0].id);
      }
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#2B5273] mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading development...</p>
        </div>
      </div>
    );
  }

  if (!development) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <p className="text-xl text-gray-600">Development not found</p>
          <Link href="/developer" className="mt-4 text-[#2B5273] hover:underline">
            Back to Dashboard
          </Link>
        </div>
      </div>
    );
  }

  const selectedType = development.UnitType.find(type => type.id === selectedUnitType);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <div className="flex items-center space-x-2 text-sm text-gray-500 mb-4">
              <Link href="/developer" className="hover:text-gray-700">Dashboard</Link>
              <ChevronRight className="h-4 w-4" />
              <Link href="/developer/developments" className="hover:text-gray-700">Developments</Link>
              <ChevronRight className="h-4 w-4" />
              <span className="text-gray-900">{development.name}</span>
            </div>
            
            <div className="flex justify-between items-start">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">{development.name}</h1>
                <p className="mt-2 text-gray-600">{development.address}, {development.city}, {development.county}</p>
                <div className="mt-4 flex items-center space-x-6">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    development.status === 'SELLING' ? 'bg-green-100 text-green-800' :
                    development.status === 'PLANNING' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {development.status}
                  </span>
                  <span className="text-sm text-gray-500">
                    Phase {development.currentPhase} of {development.totalPhases}
                  </span>
                </div>
              </div>
              
              <div className="flex space-x-3">
                <button className="px-4 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                  <Edit className="h-4 w-4 mr-2 inline" />
                  Edit Development
                </button>
                <button className="px-4 py-2 bg-[#2B5273] text-white rounded-md text-sm font-medium hover:bg-[#1e3347]">
                  <Plus className="h-4 w-4 mr-2 inline" />
                  Add Units
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Stats */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Building className="h-10 w-10 text-gray-400" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Units</p>
                <p className="text-3xl font-bold text-gray-900">{development.totalUnits}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Package className="h-10 w-10 text-green-500" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Available</p>
                <p className="text-3xl font-bold text-gray-900">{development.availableUnits}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Clock className="h-10 w-10 text-yellow-500" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Reserved</p>
                <p className="text-3xl font-bold text-gray-900">{development.reservedUnits}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Check className="h-10 w-10 text-blue-500" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Sold</p>
                <p className="text-3xl font-bold text-gray-900">{development.soldUnits}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-8">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {['overview', 'units', 'viewings', 'documents', 'analytics'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm capitalize ${
                  activeTab === tab
                    ? 'border-[#2B5273] text-[#2B5273]'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                {tab}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Tab Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-8 pb-12">
        {activeTab === 'overview' && (
          <div className="space-y-8">
            {/* Unit Types */}
            <div>
              <h2 className="text-xl font-semibold mb-4">Unit Types</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {development.UnitType.map((type) => (
                  <div key={type.id} className="bg-white rounded-lg shadow p-6">
                    <h3 className="font-semibold text-lg">{type.name}</h3>
                    <p className="text-gray-600 mt-1">
                      {type.bedrooms} Bed • {type.bathrooms} Bath • {type.area}m²
                    </p>
                    <p className="text-xl font-bold text-[#2B5273] mt-2">
                      From €{type.priceFrom.toLocaleString()}
                    </p>
                    <div className="mt-4 flex justify-between text-sm">
                      <span className="text-gray-600">
                        {type.availableUnits} of {type.totalUnits} available
                      </span>
                    </div>
                    <button 
                      onClick={() => setSelectedUnitType(type.id)}
                      className="mt-4 w-full text-center py-2 px-4 bg-[#2B5273] text-white rounded hover:bg-[#1e3347]"
                    >
                      View Units
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Schedule of Accommodation */}
            {selectedType && (
              <div>
                <h2 className="text-xl font-semibold mb-4">
                  Schedule of Accommodation - {selectedType.name}
                </h2>
                <div className="bg-white rounded-lg shadow">
                  <table className="min-w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Room
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Area (m²)
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedType.schedule.map((item) => (
                        <tr key={item.id} className="border-b hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {item.room}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {item.area}
                          </td>
                        </tr>
                      ))}
                      <tr className="bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-gray-900">
                          Total
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-gray-900">
                          {selectedType.area}
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'units' && (
          <div>
            <div className="mb-6 flex justify-between items-center">
              <h2 className="text-xl font-semibold">Unit Management</h2>
              <button className="px-4 py-2 bg-[#2B5273] text-white rounded-md text-sm font-medium hover:bg-[#1e3347]">
                <Plus className="h-4 w-4 mr-2 inline" />
                Add Unit
              </button>
            </div>
            
            {/* Unit filters */}
            <div className="mb-6 flex space-x-4">
              <select className="px-4 py-2 border border-gray-300 rounded-md">
                <option value="">All Unit Types</option>
                {development.UnitType.map((type) => (
                  <option key={type.id} value={type.id}>{type.name}</option>
                ))}
              </select>
              <select className="px-4 py-2 border border-gray-300 rounded-md">
                <option value="">All Statuses</option>
                <option value="AVAILABLE">Available</option>
                <option value="RESERVED">Reserved</option>
                <option value="SOLD">Sold</option>
              </select>
            </div>

            {/* Units grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {selectedType?.units.map((unit) => (
                <div key={unit.id} className="bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="font-semibold text-lg">Unit {unit.unitNumber}</h3>
                      <p className="text-gray-600">Floor {unit.floor}</p>
                    </div>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                      unit.status === 'AVAILABLE' ? 'bg-green-100 text-green-800' :
                      unit.status === 'RESERVED' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-blue-100 text-blue-800'
                    }`}>
                      {unit.status}
                    </span>
                  </div>
                  
                  <p className="text-xl font-bold text-[#2B5273] mb-4">
                    €{unit.price.toLocaleString()}
                  </p>
                  
                  <div className="space-y-2 text-sm text-gray-600">
                    {unit._count.reservations > 0 && (
                      <p>Reserved: {unit._count.reservations}</p>
                    )}
                    {unit._count.sales > 0 && (
                      <p>Sales in progress: {unit._count.sales}</p>
                    )}
                  </div>
                  
                  <Link 
                    href={`/developer/developments/${params.id}/units/${unit.id}`}
                    className="mt-4 block text-center py-2 px-4 border border-[#2B5273] text-[#2B5273] rounded hover:bg-[#2B5273] hover:text-white transition-colors"
                  >
                    View Details
                  </Link>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'viewings' && (
          <div>
            <h2 className="text-xl font-semibold mb-6">Recent Viewings</h2>
            <div className="bg-white rounded-lg shadow">
              <table className="min-w-full">
                <thead>
                  <tr className="border-b">
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Name
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Contact
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Preferred Date
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {development.Viewing.map((viewing) => (
                    <tr key={viewing.id} className="border-b hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {viewing.name}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div>
                          <p>{viewing.email}</p>
                          <p>{viewing.phone}</p>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(viewing.preferredDate).toLocaleDateString()}
                        <br />
                        {viewing.preferredTime}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          viewing.status === 'CONFIRMED' ? 'bg-green-100 text-green-800' :
                          viewing.status === 'REQUESTED' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {viewing.status}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button className="text-[#2B5273] hover:underline mr-4">
                          Confirm
                        </button>
                        <button className="text-gray-600 hover:underline">
                          Details
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {activeTab === 'documents' && (
          <div>
            <div className="mb-6 flex justify-between items-center">
              <h2 className="text-xl font-semibold">Documents</h2>
              <button className="px-4 py-2 bg-[#2B5273] text-white rounded-md text-sm font-medium hover:bg-[#1e3347]">
                <Plus className="h-4 w-4 mr-2 inline" />
                Upload Document
              </button>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {development.DevelopmentDocument.map((doc: any) => (
                <div key={doc.id} className="bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow">
                  <FileText className="h-12 w-12 text-gray-400 mb-4" />
                  <h3 className="font-semibold text-lg mb-2">{doc.title}</h3>
                  <p className="text-sm text-gray-600 mb-4">{doc.type}</p>
                  <button className="text-[#2B5273] hover:underline text-sm">
                    Download
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'analytics' && (
          <div className="space-y-8">
            <div>
              <h2 className="text-xl font-semibold mb-6">Sales Analytics</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="font-semibold mb-4">Sales Progress</h3>
                  <div className="h-64 flex items-center justify-center bg-gray-50 rounded">
                    <BarChart3 className="h-16 w-16 text-gray-300" />
                    <p className="ml-4 text-gray-500">Chart placeholder</p>
                  </div>
                </div>
                
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="font-semibold mb-4">Revenue Forecast</h3>
                  <div className="h-64 flex items-center justify-center bg-gray-50 rounded">
                    <TrendingUp className="h-16 w-16 text-gray-300" />
                    <p className="ml-4 text-gray-500">Chart placeholder</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}