'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { X, Cookie } from 'lucide-react'

interface CookiePreferences {
  necessary: boolean
  analytics: boolean
  marketing: boolean
  functional: boolean
}

export function CookieConsent() {
  const [isVisible, setIsVisible] = useState(false)
  const [showDetails, setShowDetails] = useState(false)
  const [preferences, setPreferences] = useState<CookiePreferences>({
    necessary: true,
    analytics: false,
    marketing: false,
    functional: false})

  useEffect(() => {
    const consent = localStorage.getItem('cookie-consent')
    if (!consent) {
      setIsVisible(true)
    } else {
      const savedPreferences = JSON.parse(consent)
      applyPreferences(savedPreferences)
    }
  }, [])

  const applyPreferences = (prefs: CookiePreferences) => {
    // Apply preferences to analytics and tracking scripts
    if (prefs.analytics && typeof window !== 'undefined') {
      // Initialize Google Analytics
      (window as any).gtag?.('consent', 'update', {
        analytics_storage: 'granted'})
    }

    if (prefs.marketing && typeof window !== 'undefined') {
      // Initialize marketing scripts
      (window as any).gtag?.('consent', 'update', {
        ad_storage: 'granted'})
    }
  }

  const handleAcceptAll = () => {
    const allAccepted = {
      necessary: true,
      analytics: true,
      marketing: true,
      functional: true}
    localStorage.setItem('cookie-consent', JSON.stringify(allAccepted))
    localStorage.setItem('cookie-consent-date', new Date().toISOString())
    applyPreferences(allAccepted)
    setIsVisible(false)
  }

  const handleAcceptSelected = () => {
    localStorage.setItem('cookie-consent', JSON.stringify(preferences))
    localStorage.setItem('cookie-consent-date', new Date().toISOString())
    applyPreferences(preferences)
    setIsVisible(false)
  }

  const handleRejectAll = () => {
    const rejected = {
      necessary: true,
      analytics: false,
      marketing: false,
      functional: false}
    localStorage.setItem('cookie-consent', JSON.stringify(rejected))
    localStorage.setItem('cookie-consent-date', new Date().toISOString())
    applyPreferences(rejected)
    setIsVisible(false)
  }

  if (!isVisible) return null

  return (
    <div className="fixed inset-0 z-50 flex items-end justify-center p-4 bg-black/20">
      <Card className="w-full max-w-4xl p-6 shadow-2xl">
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center gap-2">
            <Cookie className="h-6 w-6 text-primary" />
            <h2 className="text-xl font-semibold">Cookie Preferences</h2>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsVisible(false)}
          >
            <X className="h-4 w-4" />
          </Button>
        </div>

        <p className="mb-4 text-sm text-muted-foreground">
          We use cookies to enhance your experience. By continuing to visit this site you agree to our use of cookies.{' '}
          <a href="/privacy-policy" className="text-primary hover:underline">
            Learn more
          </a>
        </p>

        {!showDetails ? (
          <div className="flex flex-wrap gap-2">
            <Button onClick={handleAcceptAll}>Accept All</Button>
            <Button variant="outline" onClick={() => setShowDetails(true)}>
              Manage Preferences
            </Button>
            <Button variant="ghost" onClick={handleRejectAll}>
              Reject All
            </Button>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="space-y-3">
              <div className="flex items-center justify-between p-3 border rounded-lg">
                <div>
                  <h3 className="font-medium">Necessary Cookies</h3>
                  <p className="text-sm text-muted-foreground">
                    Essential for the website to function properly
                  </p>
                </div>
                <input
                  type="checkbox"
                  checked={preferences.necessary}
                  disabled
                  className="h-4 w-4"
                />
              </div>

              <div className="flex items-center justify-between p-3 border rounded-lg">
                <div>
                  <h3 className="font-medium">Analytics Cookies</h3>
                  <p className="text-sm text-muted-foreground">
                    Help us understand how visitors interact with our website
                  </p>
                </div>
                <input
                  type="checkbox"
                  checked={preferences.analytics}
                  onChange={(e) =>
                    setPreferences({ ...preferences, analytics: e.target.checked })
                  }
                  className="h-4 w-4"
                />
              </div>

              <div className="flex items-center justify-between p-3 border rounded-lg">
                <div>
                  <h3 className="font-medium">Marketing Cookies</h3>
                  <p className="text-sm text-muted-foreground">
                    Used to deliver personalized advertisements
                  </p>
                </div>
                <input
                  type="checkbox"
                  checked={preferences.marketing}
                  onChange={(e) =>
                    setPreferences({ ...preferences, marketing: e.target.checked })
                  }
                  className="h-4 w-4"
                />
              </div>

              <div className="flex items-center justify-between p-3 border rounded-lg">
                <div>
                  <h3 className="font-medium">Functional Cookies</h3>
                  <p className="text-sm text-muted-foreground">
                    Enable enhanced functionality and personalization
                  </p>
                </div>
                <input
                  type="checkbox"
                  checked={preferences.functional}
                  onChange={(e) =>
                    setPreferences({ ...preferences, functional: e.target.checked })
                  }
                  className="h-4 w-4"
                />
              </div>
            </div>

            <div className="flex gap-2">
              <Button onClick={handleAcceptSelected}>Save Preferences</Button>
              <Button variant="outline" onClick={() => setShowDetails(false)}>
                Back
              </Button>
            </div>
          </div>
        )}
      </Card>
    </div>
  )
}