'use client';

import React, { createContext, useContext, useState, useEffect, FC, ReactNode } from 'react';
import { useSession, signIn as nextAuthSignIn, signOut as nextAuthSignOut } from 'next-auth/react';
import { useRouter } from 'next/navigation';

// Define User and other types needed for build
interface User {
  id: string;
  username: string;
  email: string;
  name: string;
  status: string;
  roles: string[]; // Array of roles
  permissions: string[];
  onboardingComplete: boolean;
  emailVerified: boolean;
  mfaEnabled: boolean;
  createdAt: string;
  updatedAt: string;
}

interface SignInResult {
  isSignedIn: boolean;
  nextStep?: {
    signInStep: string;
  };
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: Error | string | null;
  mfaEnabled: boolean;
  mfaRequired: boolean;
  securityLevel: 'basic' | 'medium' | 'high';
  signIn: (username: string, password: string) => Promise<SignInResult>;
  signUp: (username: string, password: string, attributes: Record<string, string>) => Promise<any>;
  confirmSignUp: (username: string, code: string) => Promise<any>;
  signOut: () => Promise<void>;
  logout: () => Promise<void>;
  resetPassword: (username: string) => Promise<any>;
  confirmResetPassword: (username: string, code: string, newPassword: string) => Promise<any>;
  confirmSignIn: (challengeResponse: string) => Promise<any>;
  hasRole: (role: string) => boolean;
  hasPermission: (permission: string) => boolean;
  refreshSession: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const { data: session, status, update: updateSession } = useSession();
  const router = useRouter();
  const [user, setUser] = useState<User | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | string | null>(null);
  const [mfaEnabled, setMfaEnabled] = useState(false);
  const [mfaRequired, setMfaRequired] = useState(false);
  const [securityLevel, setSecurityLevel] = useState<'basic' | 'medium' | 'high'>('basic');

  // Initialize from NextAuth session
  useEffect(() => {
    if (status === 'loading') {
      setIsLoading(true);
    } else {
      setIsLoading(false);
      if (session?.user) {
        const nextAuthUser = session.user as any;
        
        // Make sure roles is always an array
        const userRoles = nextAuthUser.roles || (nextAuthUser.role ? [nextAuthUser.role] : ['BUYER']);
        
        const mappedUser: User = {
          id: nextAuthUser.id || '',
          username: nextAuthUser.email || '',
          email: nextAuthUser.email || '',
          name: nextAuthUser.name || '',
          status: 'ACTIVE',
          roles: userRoles,
          permissions: getPermissionsForRoles(userRoles),
          onboardingComplete: true,
          emailVerified: true,
          mfaEnabled: false,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        };
        setUser(mappedUser);
        setIsAuthenticated(true);
        console.log('Auth: User is authenticated with roles', userRoles);
      } else {
        setUser(null);
        setIsAuthenticated(false);
        console.log('Auth: User is not authenticated');
      }
    }
  }, [session, status]);

  function getPermissionsForRoles(roles: string[]): string[] {
    const rolePermissions: Record<string, string[]> = {
      BUYER: ['view:properties', 'create:enquiries', 'view:own_documents'],
      AGENT: ['view:properties', 'manage:listings', 'view:clients'],
      DEVELOPER: ['create:properties', 'manage:units', 'view:analytics'],
      SOLICITOR: ['view:documents', 'manage:contracts', 'view:transactions'],
      ADMIN: ['*']
    };
    
    // If user has ADMIN role, return admin permissions only
    if (roles.includes('ADMIN')) {
      return rolePermissions.ADMIN;
    }
    
    // Otherwise, combine permissions from all roles
    const combinedPermissions = new Set<string>();
    roles.forEach(role => {
      const permissions = rolePermissions[role] || [];
      permissions.forEach(permission => combinedPermissions.add(permission));
    });
    
    return Array.from(combinedPermissions);
  }

  // Sign in function integrated with NextAuth
  const signIn = async (username: string, password: string): Promise<SignInResult> => {
    setIsLoading(true);
    setError(null);
    
    try {
      console.log('Auth: Signing in with username:', username);
      const result = await nextAuthSignIn('credentials', {
        email: username,
        password: password,
        redirect: false
      });

      if (result?.error) {
        console.error('Auth: Sign-in error:', result.error);
        throw new Error(result.error);
      }

      if (result?.ok) {
        // Call update session to force a refresh of the session data
        await updateSession();
        console.log('Auth: Sign-in successful');
        return { isSignedIn: true };
      }

      console.warn('Auth: Sign-in result not OK:', result);
      return { isSignedIn: false };
    } catch (err) {
      console.error('Auth: Sign-in exception:', err);
      setError(err instanceof Error ? err : String(err));
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Sign out function
  const signOut = async () => {
    setIsLoading(true);
    try {
      console.log('Auth: Signing out');
      await nextAuthSignOut({ redirect: false });
      setUser(null);
      setIsAuthenticated(false);
      router.push('/login');
      console.log('Auth: Sign-out successful');
    } catch (err) {
      console.error('Auth: Sign-out error:', err);
      setError(err instanceof Error ? err : String(err));
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = signOut; // Alias for signOut

  // Mock sign up function - should be implemented with your backend
  const signUp = async (username: string, password: string, attributes: Record<string, string>) => {
    setIsLoading(true);
    try {
      // Call your signup API endpoint
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: username,
          password: password,
          name: attributes.name || '',
          role: attributes.role || 'BUYER'
        })
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Registration failed');
      }
      
      return { isConfirmed: true, user: data.user };
    } catch (err) {
      setError(err instanceof Error ? err : String(err));
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Other auth functions
  const confirmSignUp = async () => ({ isConfirmed: true });
  const resetPassword = async (username: string) => {
    try {
      const response = await fetch('/api/auth/password-reset', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: username })
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Password reset request failed');
      }
      
      return { success: true, nextStep: { resetPasswordStep: 'CONFIRM_RESET_PASSWORD' } };
    } catch (err) {
      setError(err instanceof Error ? err : String(err));
      throw err;
    }
  };
  
  const confirmResetPassword = async (username: string, code: string, newPassword: string) => {
    try {
      const response = await fetch('/api/auth/password-reset/confirm', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          email: username,
          code,
          newPassword
        })
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Password reset confirmation failed');
      }
      
      return { success: true };
    } catch (err) {
      setError(err instanceof Error ? err : String(err));
      throw err;
    }
  };
  
  const confirmSignIn = async () => ({ isSignedIn: true });
  
  const hasRole = (role: string) => {
    if (!user) return false;
    return user.roles.some(r => r.toLowerCase() === role.toLowerCase());
  };
  
  const hasPermission = (permission: string) => {
    if (!user) return false;
    return user.permissions.includes(permission);
  };
  
  const refreshSession = async () => {
    try {
      await updateSession();
      console.log('Auth: Session refreshed');
    } catch (err) {
      console.error('Auth: Session refresh error:', err);
      setError(err instanceof Error ? err : String(err));
    }
  };

  const value: AuthContextType = {
    user,
    isAuthenticated,
    isLoading,
    error,
    mfaEnabled,
    mfaRequired,
    securityLevel,
    signIn,
    signUp,
    confirmSignUp,
    signOut,
    logout,
    resetPassword,
    confirmResetPassword,
    confirmSignIn,
    hasRole,
    hasPermission,
    refreshSession
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};