import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/auth-server';
import prisma from '@/lib/prisma';
import Stripe from 'stripe';
import { z } from 'zod';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {
  apiVersion: '2023-10-16'
});

// Validation schema
const paymentIntentSchema = z.object({
  amount: z.number().positive(),
  transactionId: z.string(),
  description: z.string(),
  paymentType: z.enum(['deposit', 'milestone', 'final']).optional().default('deposit')
});

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const validatedData = paymentIntentSchema.parse(body);

    // Get user and transaction
    const user = await prisma.user.findUnique({
      where: { email: session.user.email }
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    const transaction = await prisma.transaction.findUnique({
      where: { id: validatedData.transactionId },
      include: {
        unit: {
          include: {
            development: true
          }
        }
      }
    });

    if (!transaction) {
      return NextResponse.json({ error: 'Transaction not found' }, { status: 404 });
    }

    // Verify user owns this transaction
    if (transaction.buyerId !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // Create or retrieve Stripe customer
    let stripeCustomerId = user.stripeCustomerId;
    
    if (!stripeCustomerId) {
      const customer = await stripe.customers.create({
        email: user.email,
        name: `${user.firstName} ${user.lastName}`,
        phone: user.phone || undefined,
        metadata: {
          userId: user.id
        }
      });
      
      stripeCustomerId = customer.id;
      
      // Update user with Stripe customer ID
      await prisma.user.update({
        where: { id: user.id },
        data: { stripeCustomerId }
      });
    }

    // Create payment intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(validatedData.amount * 100), // Convert to cents
      currency: 'eur',
      customer: stripeCustomerId,
      description: validatedData.description,
      metadata: {
        transactionId: validatedData.transactionId,
        userId: user.id,
        unitId: transaction.unitId,
        developmentId: transaction.developmentId,
        paymentType: validatedData.paymentType
      },
      automatic_payment_methods: {
        enabled: true,
      },
      receipt_email: user.email
    });

    // Create payment record in database
    const payment = await prisma.transactionPayment.create({
      data: {
        transactionId: validatedData.transactionId,
        amount: validatedData.amount,
        type: validatedData.paymentType.toUpperCase(),
        status: 'PENDING',
        method: 'STRIPE',
        stripePaymentIntentId: paymentIntent.id,
        description: validatedData.description,
        metadata: {
          unitName: transaction.unit.name,
          developmentName: transaction.unit.development.name
        }
      }
    });

    // Create transaction event
    await prisma.transactionEvent.create({
      data: {
        transactionId: transaction.id,
        eventType: 'PAYMENT_INITIATED',
        description: `Payment of â‚¬${validatedData.amount} initiated`,
        metadata: {
          paymentId: payment.id,
          amount: validatedData.amount,
          type: validatedData.paymentType
        },
        performedBy: user.id
      }
    });

    return NextResponse.json({
      clientSecret: paymentIntent.client_secret,
      paymentIntentId: paymentIntent.id,
      paymentId: payment.id
    });

  } catch (error) {
    console.error('Payment intent creation error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation error', details: error.errors },
        { status: 400 }
      );
    }

    if (error instanceof Stripe.errors.StripeError) {
      return NextResponse.json(
        { error: 'Payment processing error', details: error.message },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Failed to create payment intent' },
      { status: 500 }
    );
  }
}