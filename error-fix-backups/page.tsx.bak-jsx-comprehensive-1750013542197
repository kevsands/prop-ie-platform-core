'use client';

import React, { useState } from 'react';
import { 
  CreditCard, 
  Download, 
  ArrowLeft, 
  Calendar, 
  DollarSign, 
  TrendingUp,
  AlertCircle,
  CheckCircle,
  Clock,
  Building,
  Users,
  Zap,
  Shield,
  Star,
  Plus,
  Edit,
  Trash2,
  Eye,
  Filter,
  Search,
  MoreHorizontal,
  Receipt,
  FileText,
  Mail,
  Phone,
  MapPin,
  Globe,
  Settings,
  Wallet,
  Target,
  Activity,
  BarChart3
} from 'lucide-react';
import Link from 'next/link';

export default function BillingSettingsPage() {
  const [activeTab, setActiveTab] = useState('overview');
  const [billingPeriod, setBillingPeriod] = useState('monthly');
  const [showAddPaymentMethod, setShowAddPaymentMethod] = useState(false);

  const currentPlan = {
    name: 'Enterprise',
    price: 2499,
    billing: 'monthly',
    features: [
      'Unlimited developments',
      'Advanced analytics',
      'Priority support',
      'Custom integrations',
      'API access',
      'Team collaboration',
      'White-label options'
    ],
    limits: {
      developments: 'Unlimited',
      users: 'Unlimited',
      storage: '1TB',
      apiCalls: '100,000/month'
    }
  };

  const usage = {
    developments: { current: 3, limit: 'Unlimited' },
    users: { current: 12, limit: 'Unlimited' },
    storage: { current: 245, limit: 1024 }, // GB
    apiCalls: { current: 24567, limit: 100000 }
  };

  const paymentMethods = [
    {
      id: 1,
      type: 'card',
      brand: 'Visa',
      last4: '4242',
      expiry: '12/26',
      isDefault: true,
      name: 'Business Card'
    },
    {
      id: 2,
      type: 'bank',
      bank: 'AIB',
      account: '****1234',
      isDefault: false,
      name: 'Business Account'
    }
  ];

  const invoices = [
    {
      id: 'INV-2025-001',
      date: '2025-06-01',
      amount: 2499,
      status: 'paid',
      period: 'June 2025',
      dueDate: '2025-06-15'
    },
    {
      id: 'INV-2025-002',
      date: '2025-05-01',
      amount: 2499,
      status: 'paid',
      period: 'May 2025',
      dueDate: '2025-05-15'
    },
    {
      id: 'INV-2025-003',
      date: '2025-04-01',
      amount: 2499,
      status: 'paid',
      period: 'April 2025',
      dueDate: '2025-04-15'
    },
    {
      id: 'INV-2025-004',
      date: '2025-03-01',
      amount: 2499,
      status: 'paid',
      period: 'March 2025',
      dueDate: '2025-03-15'
    }
  ];

  const usageHistory = [
    { month: 'Jan', amount: 2499, developments: 2, users: 8, apiCalls: 18500 },
    { month: 'Feb', amount: 2499, developments: 2, users: 9, apiCalls: 21200 },
    { month: 'Mar', amount: 2499, developments: 3, users: 10, apiCalls: 24800 },
    { month: 'Apr', amount: 2499, developments: 3, users: 11, apiCalls: 22100 },
    { month: 'May', amount: 2499, developments: 3, users: 12, apiCalls: 26300 },
    { month: 'Jun', amount: 2499, developments: 3, users: 12, apiCalls: 24567 }
  ];

  const plans = [
    {
      name: 'Starter',
      price: 99,
      description: 'Perfect for small development teams',
      features: [
        'Up to 1 development',
        'Basic analytics',
        'Email support',
        '5 team members',
        '10GB storage'
      ],
      limits: {
        developments: 1,
        users: 5,
        storage: 10,
        apiCalls: 1000
      }
    },
    {
      name: 'Professional',
      price: 499,
      description: 'Ideal for growing property developers',
      features: [
        'Up to 5 developments',
        'Advanced analytics',
        'Priority support',
        '25 team members',
        '100GB storage',
        'API access'
      ],
      limits: {
        developments: 5,
        users: 25,
        storage: 100,
        apiCalls: 10000
      }
    },
    {
      name: 'Enterprise',
      price: 2499,
      description: 'For large-scale development operations',
      features: [
        'Unlimited developments',
        'Advanced analytics',
        'Priority support',
        'Custom integrations',
        'API access',
        'Team collaboration',
        'White-label options'
      ],
      limits: {
        developments: 'Unlimited',
        users: 'Unlimited',
        storage: 1024,
        apiCalls: 100000
      },
      current: true
    }
  ];

  const billingAddress = {
    company: 'Property Developments Ltd',
    address: '123 Business Park',
    city: 'Dublin',
    country: 'Ireland',
    postalCode: 'D04 XY12',
    vatNumber: 'IE1234567X',
    email: 'billing@propertydevelopments.ie',
    phone: '+353 1 234 5678'
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'paid': return 'bg-green-100 text-green-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'overdue': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getUsagePercentage = (current, limit) => {
    if (limit === 'Unlimited') return 0;
    return Math.min((current / limit) * 100, 100);
  };

  const getUsageColor = (percentage) => {
    if (percentage >= 90) return 'bg-red-500';
    if (percentage >= 75) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-6">
            <div className="flex items-center space-x-4">
              <Link href="/developer/settings/security" className="flex items-center text-gray-500 hover:text-gray-700">
                <ArrowLeft className="w-5 h-5 mr-2" />
                Back to Settings
              </Link>
              <div className="border-l border-gray-300 pl-4">
                <h1 className="text-2xl font-bold text-gray-900">Billing & Plans</h1>
                <p className="text-sm text-gray-500">Manage your subscription and billing information</p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <div className="flex items-center space-x-2 px-3 py-1 rounded-full bg-blue-100 text-blue-800">
                <Star className="w-4 h-4" />
                <span className="font-medium">{currentPlan.name} Plan</span>
              </div>
              <button className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 flex items-center">
                <Download className="w-4 h-4 mr-2" />
                Download Invoice
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Current Plan Overview */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-xl font-bold text-gray-900">{currentPlan.name} Plan</h2>
              <div className="flex items-center space-x-2 mt-1">
                <span className="text-2xl font-bold text-gray-900">€{currentPlan.price}</span>
                <span className="text-gray-500">/ {currentPlan.billing}</span>
                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  Active
                </span>
              </div>
            </div>
            <div className="text-right">
              <p className="text-sm text-gray-500">Next billing date</p>
              <p className="font-medium text-gray-900">July 1, 2025</p>
            </div>
          </div>

          {/* Usage Meters */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            {Object.entries(usage).map(([key, data]) => {
              const percentage = getUsagePercentage(data.current, data.limit);
              return (
                <div key={key} className="text-center">
                  <p className="text-sm font-medium text-gray-600 mb-2 capitalize">
                    {key === 'apiCalls' ? 'API Calls' : key}
                  </p>
                  <div className="relative mb-2">
                    <div className="w-20 h-20 mx-auto">
                      <svg className="w-20 h-20 transform -rotate-90">
                        <circle
                          cx="40"
                          cy="40"
                          r="36"
                          stroke="currentColor"
                          strokeWidth="8"
                          fill="transparent"
                          className="text-gray-200"
                        />
                        <circle
                          cx="40"
                          cy="40"
                          r="36"
                          stroke="currentColor"
                          strokeWidth="8"
                          fill="transparent"
                          strokeDasharray={`${2 * Math.PI * 36}`}
                          strokeDashoffset={`${2 * Math.PI * 36 * (1 - percentage / 100)}`}
                          className={data.limit === 'Unlimited' ? 'text-green-500' : getUsageColor(percentage)}
                        />
                      </svg>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-sm font-bold text-gray-900">
                          {data.limit === 'Unlimited' ? '∞' : `${Math.round(percentage)}%`}
                        </span>
                      </div>
                    </div>
                  </div>
                  <p className="text-xs text-gray-500">
                    {key === 'storage' ? `${data.current}GB` : data.current.toLocaleString()} / {data.limit === 'Unlimited' ? '∞' : (key === 'storage' ? `${data.limit}GB` : data.limit.toLocaleString())}
                  </p>
                </div>
              );
            })}
          </div>

          <div className="flex items-center justify-between pt-4 border-t border-gray-200">
            <div className="flex space-x-4">
              <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                Upgrade Plan
              </button>
              <button className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50">
                Change Billing Period
              </button>
            </div>
            <button className="text-red-600 hover:text-red-700 text-sm font-medium">
              Cancel Subscription
            </button>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8 px-6">
              {[
                { key: 'overview', label: 'Overview', icon: BarChart3 },
                { key: 'invoices', label: 'Invoices', icon: Receipt },
                { key: 'payment-methods', label: 'Payment Methods', icon: CreditCard },
                { key: 'plans', label: 'Plans & Pricing', icon: Target },
                { key: 'billing-info', label: 'Billing Information', icon: Building }
              ].map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.key}
                    onClick={() => setActiveTab(tab.key)}
                    className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${
                      activeTab === tab.key
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <Icon className="w-4 h-4 mr-2" />
                    {tab.label}
                  </button>
                );
              })}
            </nav>
          </div>
        </div>

        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Usage History</h3>
              <div className="space-y-4">
                {usageHistory.slice(-6).map((month, index) => (
                  <div key={index} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                    <div className="flex items-center space-x-4">
                      <div className="text-center">
                        <p className="font-medium text-gray-900">{month.month}</p>
                        <p className="text-sm text-gray-500">2025</p>
                      </div>
                      <div className="border-l border-gray-200 pl-4">
                        <p className="font-medium text-gray-900">€{month.amount}</p>
                        <p className="text-sm text-gray-500">{month.developments} developments • {month.users} users</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-sm text-gray-500">API Calls</p>
                      <p className="font-medium text-gray-900">{month.apiCalls.toLocaleString()}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Invoices Tab */}
        {activeTab === 'invoices' && (
          <div className="bg-white rounded-lg shadow">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium text-gray-900">Invoice History</h3>
                <div className="flex items-center space-x-3">
                  <select className="px-3 py-2 border border-gray-300 rounded-md text-sm">
                    <option>All Invoices</option>
                    <option>Paid</option>
                    <option>Pending</option>
                    <option>Overdue</option>
                  </select>
                  <button className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 text-sm">
                    Export All
                  </button>
                </div>
              </div>
            </div>
            <div className="divide-y divide-gray-200">
              {invoices.map((invoice) => (
                <div key={invoice.id} className="p-6 flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <Receipt className="w-8 h-8 text-gray-400" />
                    <div>
                      <p className="font-medium text-gray-900">{invoice.id}</p>
                      <p className="text-sm text-gray-500">{invoice.period}</p>
                      <p className="text-xs text-gray-400">Due: {new Date(invoice.dueDate).toLocaleDateString()}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="text-right">
                      <p className="font-medium text-gray-900">€{invoice.amount}</p>
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(invoice.status)}`}>
                        {invoice.status}
                      </span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button className="p-2 text-gray-400 hover:text-gray-600">
                        <Eye className="w-4 h-4" />
                      </button>
                      <button className="p-2 text-gray-400 hover:text-gray-600">
                        <Download className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Payment Methods Tab */}
        {activeTab === 'payment-methods' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="p-6 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium text-gray-900">Payment Methods</h3>
                  <button
                    onClick={() => setShowAddPaymentMethod(true)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add Payment Method
                  </button>
                </div>
              </div>
              <div className="divide-y divide-gray-200">
                {paymentMethods.map((method) => (
                  <div key={method.id} className="p-6 flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-8 bg-gray-100 rounded flex items-center justify-center">
                        {method.type === 'card' ? (
                          <CreditCard className="w-5 h-5 text-gray-600" />
                        ) : (
                          <Building className="w-5 h-5 text-gray-600" />
                        )}
                      </div>
                      <div>
                        <div className="flex items-center space-x-2">
                          <p className="font-medium text-gray-900">{method.name}</p>
                          {method.isDefault && (
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                              Default
                            </span>
                          )}
                        </div>
                        <p className="text-sm text-gray-500">
                          {method.type === 'card' 
                            ? `${method.brand} ending in ${method.last4} • Expires ${method.expiry}`
                            : `${method.bank} account ending in ${method.account}`
                          }
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      {!method.isDefault && (
                        <button className="text-blue-600 hover:text-blue-700 text-sm">
                          Set as Default
                        </button>
                      )}
                      <button className="p-2 text-gray-400 hover:text-gray-600">
                        <Edit className="w-4 h-4" />
                      </button>
                      <button className="p-2 text-gray-400 hover:text-red-600">
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Plans Tab */}
        {activeTab === 'plans' && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {plans.map((plan) => (
              <div key={plan.name} className={`bg-white rounded-lg shadow p-6 ${plan.current ? 'ring-2 ring-blue-500' : ''}`}>
                <div className="text-center mb-6">
                  {plan.current && (
                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mb-2">
                      Current Plan
                    </span>
                  )}
                  <h3 className="text-xl font-bold text-gray-900">{plan.name}</h3>
                  <p className="text-gray-500 text-sm mt-1">{plan.description}</p>
                  <div className="mt-4">
                    <span className="text-3xl font-bold text-gray-900">€{plan.price}</span>
                    <span className="text-gray-500">/ month</span>
                  </div>
                </div>

                <ul className="space-y-3 mb-6">
                  {plan.features.map((feature, index) => (
                    <li key={index} className="flex items-center">
                      <CheckCircle className="w-4 h-4 text-green-500 mr-3" />
                      <span className="text-sm text-gray-700">{feature}</span>
                    </li>
                  ))}
                </ul>

                <button className={`w-full py-2 px-4 rounded-md font-medium ${
                  plan.current 
                    ? 'bg-gray-100 text-gray-500 cursor-not-allowed' 
                    : 'bg-blue-600 text-white hover:bg-blue-700'
                }`}>
                  {plan.current ? 'Current Plan' : 'Upgrade'}
                </button>
              </div>
            ))}
          </div>
        )}

        {/* Billing Info Tab */}
        {activeTab === 'billing-info' && (
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-medium text-gray-900">Billing Information</h3>
              <button className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 flex items-center">
                <Edit className="w-4 h-4 mr-2" />
                Edit Information
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-medium text-gray-900 mb-4">Company Details</h4>
                <div className="space-y-3">
                  <div>
                    <p className="text-sm text-gray-500">Company Name</p>
                    <p className="text-gray-900">{billingAddress.company}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">VAT Number</p>
                    <p className="text-gray-900">{billingAddress.vatNumber}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Billing Address</p>
                    <p className="text-gray-900">
                      {billingAddress.address}<br />
                      {billingAddress.city}, {billingAddress.postalCode}<br />
                      {billingAddress.country}
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <h4 className="font-medium text-gray-900 mb-4">Contact Information</h4>
                <div className="space-y-3">
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="text-gray-900">{billingAddress.email}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="text-gray-900">{billingAddress.phone}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Add Payment Method Modal */}
      {showAddPaymentMethod && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl w-full max-w-md p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold">Add Payment Method</h2>
              <button
                onClick={() => setShowAddPaymentMethod(false)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                ✕
              </button>
            </div>
            
            <form className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Payment Type</label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                  <option>Credit/Debit Card</option>
                  <option>Bank Account</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Card Number</label>
                <input
                  type="text"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                  placeholder="1234 5678 9012 3456"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Expiry Date</label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                    placeholder="MM/YY"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">CVC</label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                    placeholder="123"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Cardholder Name</label>
                <input
                  type="text"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                  placeholder="John Doe"
                />
              </div>

              <div className="flex items-center">
                <input type="checkbox" className="rounded border-gray-300 text-blue-600" />
                <span className="ml-2 text-sm text-gray-700">Set as default payment method</span>
              </div>

              <div className="flex items-center justify-end space-x-3 pt-6 border-t border-gray-200">
                <button
                  type="button"
                  onClick={() => setShowAddPaymentMethod(false)}
                  className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Add Payment Method
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}