'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  FileText,
  Upload,
  Calendar,
  DollarSign,
  Clock,
  Brain,
  TrendingUp,
  AlertTriangle,
  CheckCircle,
  Award,
  BarChart3,
  Users
} from 'lucide-react';
import { formatCurrency, formatDate } from '@/utils/format';

interface TenderPackage {
  id: string;
  name: string;
  description: string;
  category: string;
  issueDate: string;
  dueDate: string;
  status: 'DRAFT' | 'PUBLISHED' | 'CLOSED' | 'EVALUATING' | 'AWARDED';
  budget: number;
  submissions: number;
}

interface TenderSubmission {
  id: string;
  contractorName: string;
  proposedAmount: number;
  proposedTimeline: number;
  submittedAt: string;
  totalScore?: number;
  ranking?: number;
  aiAnalysis?: {
    priceCompetitiveness: any;
    timelineAnalysis: any;
    experienceScore: any;
    riskFactors: string[];
    recommendations: string[];
  };
  riskAssessment?: {
    overallRisk: string;
    financialRisk: string;
    deliveryRisk: string;
    qualityRisk: string;
  };
}

export function TenderManagement() {
  const [activeTab, setActiveTab] = useState('active');
  const [selectedTender, setSelectedTender] = useState<TenderPackage | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [showSubmissions, setShowSubmissions] = useState(false);

  // Mock data
  const tenders: TenderPackage[] = [
    {
      id: '1',
      name: 'Electrical Installation - Phase 1',
      description: 'Complete electrical installation for residential units',
      category: 'Electrical',
      issueDate: '2024-01-10',
      dueDate: '2024-02-10',
      status: 'EVALUATING',
      budget: 450000,
      submissions: 5
    },
    {
      id: '2',
      name: 'Plumbing Works - Block A',
      description: 'Plumbing installation for Block A apartments',
      category: 'Plumbing',
      issueDate: '2024-01-15',
      dueDate: '2024-02-15',
      status: 'PUBLISHED',
      budget: 320000,
      submissions: 3
    }
  ];

  const submissions: TenderSubmission[] = [
    {
      id: '1',
      contractorName: 'Elite Electrical Ltd',
      proposedAmount: 425000,
      proposedTimeline: 90,
      submittedAt: '2024-02-08',
      totalScore: 88,
      ranking: 1,
      aiAnalysis: {
        priceCompetitiveness: { score: 85, marketComparison: 'Below market average' },
        timelineAnalysis: { feasibility: 'High', risks: ['Weather dependency'] },
        experienceScore: { score: 92, relevantProjects: 15 },
        riskFactors: ['Insurance expiring in 2 months'],
        recommendations: ['Verify subcontractor availability', 'Request updated insurance']
      },
      riskAssessment: {
        overallRisk: 'Low',
        financialRisk: 'Low',
        deliveryRisk: 'Medium',
        qualityRisk: 'Low'
      }
    },
    {
      id: '2',
      contractorName: 'PowerTech Solutions',
      proposedAmount: 438000,
      proposedTimeline: 85,
      submittedAt: '2024-02-09',
      totalScore: 82,
      ranking: 2,
      aiAnalysis: {
        priceCompetitiveness: { score: 78, marketComparison: 'At market average' },
        timelineAnalysis: { feasibility: 'Medium', risks: ['Aggressive timeline'] },
        experienceScore: { score: 88, relevantProjects: 12 },
        riskFactors: ['Tight timeline may impact quality'],
        recommendations: ['Clarify resource allocation', 'Add buffer to timeline']
      },
      riskAssessment: {
        overallRisk: 'Medium',
        financialRisk: 'Low',
        deliveryRisk: 'High',
        qualityRisk: 'Medium'
      }
    }
  ];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'DRAFT': return 'default';
      case 'PUBLISHED': return 'primary';
      case 'CLOSED': return 'secondary';
      case 'EVALUATING': return 'warning';
      case 'AWARDED': return 'success';
      default: return 'default';
    }
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'Low': return 'text-green-600';
      case 'Medium': return 'text-yellow-600';
      case 'High': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const handleAwardTender = (submissionId: string) => {

    // API call to award tender
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Tender Management</h1>
        <Button onClick={() => setShowCreateForm(true)}>
          <FileText className="h-4 w-4 mr-2" />
          Create Tender
        </Button>
      </div>

      {showCreateForm && (
        <Card className="border-primary">
          <CardHeader>
            <CardTitle>Create New Tender Package</CardTitle>
          </CardHeader>
          <CardContent>
            <form className="space-y-4">
              <div>
                <Label htmlFor="name">Tender Name</Label>
                <Input id="name" placeholder="e.g., Electrical Installation - Phase 1" />
              </div>

              <div>
                <Label htmlFor="category">Category</Label>
                <Select id="category">
                  <option value="">Select category</option>
                  <option value="electrical">Electrical</option>
                  <option value="plumbing">Plumbing</option>
                  <option value="carpentry">Carpentry</option>
                  <option value="masonry">Masonry</option>
                </Select>
              </div>

              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea id="description" rows={3} />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="budget">Budget Estimate</Label>
                  <Input id="budget" type="number" placeholder="0" />
                </div>
                <div>
                  <Label htmlFor="dueDate">Submission Due Date</Label>
                  <Input id="dueDate" type="date" />
                </div>
              </div>

              <div>
                <Label>Requirements Document</Label>
                <div className="border-2 border-dashed rounded-lg p-4 text-center">
                  <Upload className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                  <p className="text-sm text-muted-foreground">
                    Drop files here or click to upload
                  </p>
                  <Button variant="outline" size="sm" className="mt-2">
                    Select Files
                  </Button>
                </div>
              </div>

              <div className="flex gap-2">
                <Button variant="outline" onClick={() => setShowCreateForm(false)}>
                  Cancel
                </Button>
                <Button>Create Tender</Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="active">Active Tenders</TabsTrigger>
          <TabsTrigger value="evaluating">Under Evaluation</TabsTrigger>
          <TabsTrigger value="awarded">Awarded</TabsTrigger>
        </TabsList>

        <TabsContent value="active" className="space-y-4 mt-6">
          {tenders
            .filter(t => t.status === 'PUBLISHED')
            .map(tender => (
              <Card key={tender.id}>
                <CardContent className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-xl font-semibold">{tender.name}</h3>
                        <Badge variant={getStatusColor(tender.status)}>
                          {tender.status}
                        </Badge>
                      </div>

                      <p className="text-muted-foreground mb-4">{tender.description}</p>

                      <div className="grid grid-cols-4 gap-4">
                        <div>
                          <p className="text-sm text-muted-foreground">Category</p>
                          <p className="font-medium">{tender.category}</p>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground">Budget</p>
                          <p className="font-medium">{formatCurrency(tender.budget)}</p>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground">Due Date</p>
                          <p className="font-medium">{formatDate(tender.dueDate)}</p>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground">Submissions</p>
                          <p className="font-medium">{tender.submissions}</p>
                        </div>
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">
                        View Details
                      </Button>
                      <Button 
                        size="sm"
                        onClick={() => {
                          setSelectedTender(tender);
                          setShowSubmissions(true);
                        }}
                      >
                        View Submissions
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
        </TabsContent>

        <TabsContent value="evaluating" className="space-y-4 mt-6">
          {tenders
            .filter(t => t.status === 'EVALUATING')
            .map(tender => (
              <Card key={tender.id}>
                <CardContent className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-xl font-semibold">{tender.name}</h3>
                        <Badge variant={getStatusColor(tender.status)}>
                          {tender.status}
                        </Badge>
                      </div>

                      <p className="text-muted-foreground mb-4">{tender.description}</p>

                      <Alert>
                        <Brain className="h-4 w-4" />
                        <AlertDescription>
                          AI analysis complete. {tender.submissions} submissions ranked and scored.
                        </AlertDescription>
                      </Alert>
                    </div>

                    <Button 
                      onClick={() => {
                        setSelectedTender(tender);
                        setShowSubmissions(true);
                      }}
                    >
                      Evaluate Submissions
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
        </TabsContent>
      </Tabs>

      {/* Submissions Modal */}
      {showSubmissions && selectedTender && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold">
                  Tender Submissions - {selectedTender.name}
                </h2>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setShowSubmissions(false)}
                >
                  Close
                </Button>
              </div>
            </div>

            <div className="p-6 space-y-6">
              {submissions.map((submission, index) => (
                <Card key={submission.id} className={index === 0 ? 'border-primary' : ''}>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-4">
                        <div>
                          <Badge variant={index === 0 ? 'default' : 'secondary'}>
                            Rank #{submission.ranking}
                          </Badge>
                        </div>
                        <div>
                          <h3 className="text-xl font-semibold">{submission.contractorName}</h3>
                          <p className="text-sm text-muted-foreground">
                            Submitted {formatDate(submission.submittedAt)}
                          </p>
                        </div>
                      </div>

                      <div className="text-right">
                        <p className="text-2xl font-bold">{formatCurrency(submission.proposedAmount)}</p>
                        <p className="text-sm text-muted-foreground">{submission.proposedTimeline} days</p>
                      </div>
                    </div>

                    {/* AI Analysis */}
                    <div className="grid md:grid-cols-2 gap-4 mb-4">
                      <Card>
                        <CardContent className="p-4">
                          <h4 className="font-semibold mb-3 flex items-center gap-2">
                            <Brain className="h-4 w-4" />
                            AI Analysis
                          </h4>

                          <div className="space-y-2 text-sm">
                            <div>
                              <span className="font-medium">Price Score:</span>
                              <span className="ml-2">{submission.aiAnalysis?.priceCompetitiveness.score}/100</span>
                            </div>
                            <div>
                              <span className="font-medium">Experience Score:</span>
                              <span className="ml-2">{submission.aiAnalysis?.experienceScore.score}/100</span>
                            </div>
                            <div>
                              <span className="font-medium">Timeline Feasibility:</span>
                              <span className="ml-2">{submission.aiAnalysis?.timelineAnalysis.feasibility}</span>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardContent className="p-4">
                          <h4 className="font-semibold mb-3 flex items-center gap-2">
                            <AlertTriangle className="h-4 w-4" />
                            Risk Assessment
                          </h4>

                          <div className="space-y-2 text-sm">
                            <div>
                              <span className="font-medium">Overall Risk:</span>
                              <span className={`ml-2 font-semibold ${getRiskColor(submission.riskAssessment?.overallRisk || '')}`}>
                                {submission.riskAssessment?.overallRisk}
                              </span>
                            </div>
                            <div>
                              <span className="font-medium">Financial Risk:</span>
                              <span className={`ml-2 ${getRiskColor(submission.riskAssessment?.financialRisk || '')}`}>
                                {submission.riskAssessment?.financialRisk}
                              </span>
                            </div>
                            <div>
                              <span className="font-medium">Delivery Risk:</span>
                              <span className={`ml-2 ${getRiskColor(submission.riskAssessment?.deliveryRisk || '')}`}>
                                {submission.riskAssessment?.deliveryRisk}
                              </span>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>

                    {/* Recommendations & Risk Factors */}
                    <div className="grid md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <h4 className="font-semibold mb-2">Recommendations</h4>
                        <ul className="list-disc list-inside text-sm space-y-1">
                          {submission.aiAnalysis?.recommendations.map((rec, i) => (
                            <li key={i}>{rec}</li>
                          ))}
                        </ul>
                      </div>

                      <div>
                        <h4 className="font-semibold mb-2">Risk Factors</h4>
                        <ul className="list-disc list-inside text-sm space-y-1">
                          {submission.aiAnalysis?.riskFactors.map((risk, i) => (
                            <li key={i} className="text-yellow-600">{risk}</li>
                          ))}
                        </ul>
                      </div>
                    </div>

                    <div className="flex gap-2 mt-4">
                      <Button variant="outline">View Full Submission</Button>
                      {index === 0 && (
                        <Button 
                          className="bg-green-600 hover:bg-green-700"
                          onClick={() => handleAwardTender(submission.id)}
                        >
                          <Award className="h-4 w-4 mr-2" />
                          Award Tender
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}