'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, XCircle, AlertCircle, Database, LockKeyhole } from 'lucide-react';
import Link from 'next/link';

export default function TestDeployment() {
  const [databaseStatus, setDatabaseStatus] = useState<'loading' | 'connected' | 'error'>('loading');
  const [authStatus, setAuthStatus] = useState<'loading' | 'configured' | 'error'>('loading');
  const [apiStatus, setApiStatus] = useState<'loading' | 'online' | 'error'>('loading');
  const [envVars, setEnvVars] = useState<string[]>([]);
  const [status, setStatus] = useState<any>({});

  useEffect(() => {
    async function checkStatus() {
      try {
        // Test API and database connection using the deployment-status endpoint
        const statusRes = await fetch('/api/deployment-status');
        const deploymentStatus = await statusRes.json();

        setApiStatus(statusRes.ok ? 'online' : 'error');
        setDatabaseStatus(deploymentStatus.database === 'connected' ? 'connected' : 'error');

        // Check environment variables
        const foundVars: string[] = [];
        if (deploymentStatus.environment_vars) {
          if (deploymentStatus.environment_vars.DATABASE_URL) foundVars.push('DATABASE_URL');
          if (deploymentStatus.environment_vars.NEXTAUTH_SECRET) foundVars.push('NEXTAUTH_SECRET');
          if (deploymentStatus.environment_vars.NEXTAUTH_URL) foundVars.push('NEXTAUTH_URL');
          if (deploymentStatus.environment_vars.JWT_SECRET) foundVars.push('JWT_SECRET');
        }
        setEnvVars(foundVars);

        // Also check the health endpoint for backward compatibility
        const healthRes = await fetch('/api/health');
        const healthData = await healthRes.json();

        // Check session
        const sessionRes = await fetch('/api/auth/session');
        const session = await sessionRes.json();
        setAuthStatus(sessionRes.ok ? 'configured' : 'error');

        setStatus({
          deployment: deploymentStatus,
          health: healthData,
          session,
          timestamp: new Date().toISOString()
        });

      } catch (error) {

        setStatus({ error: 'Failed to fetch status' });
        setApiStatus('error');
        setDatabaseStatus('error');
        setAuthStatus('error');
      }
    }

    checkStatus();
  }, []);

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              Deployment Status
              {databaseStatus === 'connected' && apiStatus === 'online' && authStatus === 'configured' ? (
                <CheckCircle className="text-green-500" />
              ) : (
                <AlertCircle className="text-amber-500" />
              )}
            </CardTitle>
            <CardDescription>
              Verifying your deployment configuration
            </CardDescription>
          </CardHeader>

          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium">API Status:</span>
                  <span className="flex items-center">
                    {apiStatus === 'loading' ? 'Checking...' : ''}
                    {apiStatus === 'online' && (
                      <>
                        <span className="text-green-600 mr-2">Online</span>
                        <CheckCircle className="text-green-500 h-5 w-5" />
                      </>
                    )}
                    {apiStatus === 'error' && (
                      <>
                        <span className="text-red-600 mr-2">Offline</span>
                        <XCircle className="text-red-500 h-5 w-5" />
                      </>
                    )}
                  </span>
                </div>
                <p className="text-sm text-gray-500">
                  {apiStatus === 'online' ? 
                    'API endpoints are accessible and responding' : 
                    'Unable to connect to API endpoints'}
                </p>
              </div>

              <div className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium">Database:</span>
                  <span className="flex items-center">
                    {databaseStatus === 'loading' ? 'Connecting...' : ''}
                    {databaseStatus === 'connected' && (
                      <>
                        <span className="text-green-600 mr-2">Connected</span>
                        <Database className="text-green-500 h-5 w-5" />
                      </>
                    )}
                    {databaseStatus === 'error' && (
                      <>
                        <span className="text-red-600 mr-2">Failed</span>
                        <XCircle className="text-red-500 h-5 w-5" />
                      </>
                    )}
                  </span>
                </div>
                <p className="text-sm text-gray-500">
                  {databaseStatus === 'connected' ? 
                    'Database connection established' : 
                    'Unable to connect to database'}
                </p>
              </div>

              <div className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium">Authentication:</span>
                  <span className="flex items-center">
                    {authStatus === 'loading' ? 'Checking...' : ''}
                    {authStatus === 'configured' && (
                      <>
                        <span className="text-green-600 mr-2">Ready</span>
                        <LockKeyhole className="text-green-500 h-5 w-5" />
                      </>
                    )}
                    {authStatus === 'error' && (
                      <>
                        <span className="text-red-600 mr-2">Error</span>
                        <XCircle className="text-red-500 h-5 w-5" />
                      </>
                    )}
                  </span>
                </div>
                <p className="text-sm text-gray-500">
                  {authStatus === 'configured' ? 
                    'Authentication system is configured' : 
                    'Authentication system needs configuration'}
                </p>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg shadow border mt-6">
              <h4 className="font-medium mb-2">Environment Variables:</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {['DATABASE_URL', 'NEXTAUTH_SECRET', 'NEXTAUTH_URL', 'JWT_SECRET'].map(variable => (
                  <div key={variable} className="flex items-center gap-2">
                    {envVars.includes(variable) ? (
                      <CheckCircle className="text-green-500 h-4 w-4" />
                    ) : (
                      <XCircle className="text-red-500 h-4 w-4" />
                    )}
                    <span>{variable}</span>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg shadow border">
              <h4 className="font-medium mb-2">Detailed Status:</h4>
              <pre className="text-xs bg-gray-50 p-4 rounded overflow-auto max-h-40">
                {JSON.stringify(status, null, 2)}
              </pre>
            </div>
          </CardContent>

          <CardFooter className="flex flex-col gap-4">
            <p className="text-sm">
              {databaseStatus === 'connected' && apiStatus === 'online' && authStatus === 'configured'
                ? '✅ Your deployment is configured correctly!'
                : '❗ Some configuration issues need attention.'}
            </p>

            <div className="flex flex-wrap gap-2">
              <Button asChild variant="outline" size="sm">
                <Link href="/">Home</Link>
              </Button>

              <Button asChild variant="outline" size="sm">
                <Link href="/api/health">Health Check</Link>
              </Button>

              <Button asChild variant="default" size="sm">
                <Link href="/auth/login">Test Login</Link>
              </Button>

              <Button asChild variant="outline" size="sm">
                <Link href="/monitoring">Monitoring</Link>
              </Button>
            </div>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}