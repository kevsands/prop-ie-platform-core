'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card } from '@/components/ui/card';
import { Slider } from '@/components/ui/slider';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue} from '@/components/ui/select';
import { FiArrowLeft, FiArrowRight, FiDollarSign, FiTrendingUp, FiPercent } from 'react-icons/fi';
import { motion } from 'framer-motion';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend} from 'recharts';

const schema = z.object({
  totalInvestment: z.string().regex(/^\d+$/, 'Please enter a valid amount'),
  expectedRevenue: z.string().regex(/^\d+$/, 'Please enter a valid amount'),
  pricePerUnit: z.string().regex(/^\d+$/, 'Please enter a valid amount'),
  constructionCost: z.string().regex(/^\d+$/, 'Please enter a valid amount'),
  landCost: z.string().regex(/^\d+$/, 'Please enter a valid amount'),
  marketingBudget: z.string().regex(/^\d+$/, 'Please enter a valid amount'),
  contingency: z.number().min(5).max(25),
  financingType: z.string().min(1, 'Please select financing type'),
  profitMargin: z.number().min(10).max(50)});

type FormData = z.infer<typeof schema>;

interface ProjectFinancialsProps {
  data: any;
  onNext: (data: FormData) => void;
  onBack: () => void;
}

export default function ProjectFinancials({ data, onNext, onBack }: ProjectFinancialsProps) {
  const [contingency, setContingency] = useState(data?.contingency || 10);
  const [profitMargin, setProfitMargin] = useState(data?.profitMargin || 20);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch} = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: { ...data, contingency, profitMargin }});

  const onSubmit = (formData: FormData) => {
    onNext({ ...formData, contingency, profitMargin });
  };

  // Calculate financial metrics
  const watchedValues = watch();
  const totalCost = parseInt(watchedValues.constructionCost || '0') + 
                   parseInt(watchedValues.landCost || '0') + 
                   parseInt(watchedValues.marketingBudget || '0');
  const roi = ((parseInt(watchedValues.expectedRevenue || '0') - totalCost) / totalCost * 100).toFixed(1);

  // Chart data
  const costBreakdown = [
    { name: 'Construction', value: parseInt(watchedValues.constructionCost || '0'), color: '#3B82F6' },
    { name: 'Land', value: parseInt(watchedValues.landCost || '0'), color: '#10B981' },
    { name: 'Marketing', value: parseInt(watchedValues.marketingBudget || '0'), color: '#F59E0B' },
    { name: 'Contingency', value: totalCost * (contingency / 100), color: '#EF4444' }];

  const cashFlowData = [
    { month: 'Month 1', cash: -parseInt(watchedValues.landCost || '0') },
    { month: 'Month 6', cash: -totalCost * 0.3 },
    { month: 'Month 12', cash: -totalCost * 0.6 },
    { month: 'Month 18', cash: parseInt(watchedValues.expectedRevenue || '0') * 0.3 },
    { month: 'Month 24', cash: parseInt(watchedValues.expectedRevenue || '0') * 0.8 },
    { month: 'Month 30', cash: parseInt(watchedValues.expectedRevenue || '0') }];

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Financial Planning</h2>
        <p className="text-gray-600">Define your project's financial structure and projections</p>
      </div>

      <div className="space-y-6">
        {/* Investment Overview */}
        <div className="grid grid-cols-2 gap-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <Label htmlFor="totalInvestment">Total Investment Required (€)</Label>
            <div className="relative mt-1">
              <FiDollarSign className="absolute left-3 top-3 text-gray-400" />
              <Input
                id="totalInvestment"
                {...register('totalInvestment')}
                placeholder="10,000,000"
                className="pl-10"
              />
            </div>
            {errors.totalInvestment && (
              <p className="text-red-500 text-sm mt-1">{errors.totalInvestment.message}</p>
            )}
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: 0.1 }}
          >
            <Label htmlFor="expectedRevenue">Expected Revenue (€)</Label>
            <div className="relative mt-1">
              <FiTrendingUp className="absolute left-3 top-3 text-gray-400" />
              <Input
                id="expectedRevenue"
                {...register('expectedRevenue')}
                placeholder="15,000,000"
                className="pl-10"
              />
            </div>
            {errors.expectedRevenue && (
              <p className="text-red-500 text-sm mt-1">{errors.expectedRevenue.message}</p>
            )}
          </motion.div>
        </div>

        {/* Cost Breakdown */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.2 }}
          className="space-y-4"
        >
          <h3 className="font-semibold text-gray-900">Cost Breakdown</h3>

          <div className="grid grid-cols-3 gap-4">
            <div>
              <Label htmlFor="constructionCost">Construction Cost (€)</Label>
              <Input
                id="constructionCost"
                {...register('constructionCost')}
                placeholder="7,000,000"
                className="mt-1"
              />
              {errors.constructionCost && (
                <p className="text-red-500 text-sm mt-1">{errors.constructionCost.message}</p>
              )}
            </div>

            <div>
              <Label htmlFor="landCost">Land Cost (€)</Label>
              <Input
                id="landCost"
                {...register('landCost')}
                placeholder="2,500,000"
                className="mt-1"
              />
              {errors.landCost && (
                <p className="text-red-500 text-sm mt-1">{errors.landCost.message}</p>
              )}
            </div>

            <div>
              <Label htmlFor="marketingBudget">Marketing Budget (€)</Label>
              <Input
                id="marketingBudget"
                {...register('marketingBudget')}
                placeholder="500,000"
                className="mt-1"
              />
              {errors.marketingBudget && (
                <p className="text-red-500 text-sm mt-1">{errors.marketingBudget.message}</p>
              )}
            </div>
          </div>
        </motion.div>

        {/* Pricing & Margins */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.3 }}
          className="space-y-4"
        >
          <h3 className="font-semibold text-gray-900">Pricing Strategy</h3>

          <div className="grid grid-cols-2 gap-6">
            <div>
              <Label htmlFor="pricePerUnit">Average Price Per Unit (€)</Label>
              <Input
                id="pricePerUnit"
                {...register('pricePerUnit')}
                placeholder="350,000"
                className="mt-1"
              />
              {errors.pricePerUnit && (
                <p className="text-red-500 text-sm mt-1">{errors.pricePerUnit.message}</p>
              )}
            </div>

            <div>
              <Label htmlFor="financingType">Financing Type</Label>
              <Select onValueChange={(value) => setValue('financingType', value)}>
                <SelectTrigger className="mt-1">
                  <SelectValue placeholder="Select financing" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="bank-loan">Bank Loan</SelectItem>
                  <SelectItem value="private-equity">Private Equity</SelectItem>
                  <SelectItem value="joint-venture">Joint Venture</SelectItem>
                  <SelectItem value="crowd-funding">Crowd Funding</SelectItem>
                  <SelectItem value="self-funded">Self Funded</SelectItem>
                </SelectContent>
              </Select>
              {errors.financingType && (
                <p className="text-red-500 text-sm mt-1">{errors.financingType.message}</p>
              )}
            </div>
          </div>

          {/* Sliders for Contingency and Profit Margin */}
          <div className="space-y-6">
            <div>
              <div className="flex justify-between mb-2">
                <Label>Contingency Reserve</Label>
                <span className="text-sm font-medium">{contingency}%</span>
              </div>
              <Slider
                value={[contingency]}
                onValueChange={(value) => {
                  setContingency(value[0]);
                  setValue('contingency', value[0]);
                }}
                min={5}
                max={25}
                step={1}
                className="mt-2"
              />
            </div>

            <div>
              <div className="flex justify-between mb-2">
                <Label>Target Profit Margin</Label>
                <span className="text-sm font-medium">{profitMargin}%</span>
              </div>
              <Slider
                value={[profitMargin]}
                onValueChange={(value) => {
                  setProfitMargin(value[0]);
                  setValue('profitMargin', value[0]);
                }}
                min={10}
                max={50}
                step={1}
                className="mt-2"
              />
            </div>
          </div>
        </motion.div>

        {/* Financial Visualizations */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.4 }}
          className="grid grid-cols-2 gap-6"
        >
          {/* Cost Breakdown Pie Chart */}
          <Card className="p-6">
            <h4 className="font-semibold text-gray-900 mb-4">Cost Distribution</h4>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={costBreakdown}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={(entry) => `${entry.name}: €${(entry.value / 1000000).toFixed(1)}M`}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {costBreakdown.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </Card>

          {/* Cash Flow Projection */}
          <Card className="p-6">
            <h4 className="font-semibold text-gray-900 mb-4">Cash Flow Projection</h4>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={cashFlowData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Area
                    type="monotone"
                    dataKey="cash"
                    stroke="#3B82F6"
                    fill="#3B82F6"
                    fillOpacity={0.3}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </Card>
        </motion.div>

        {/* Financial Metrics Summary */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.5 }}
          className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-6 border border-green-200"
        >
          <h4 className="font-semibold text-gray-900 mb-4">💰 Financial Analysis</h4>
          <div className="grid grid-cols-4 gap-4">
            <div>
              <p className="text-sm text-gray-600">ROI</p>
              <p className="text-2xl font-bold text-green-600">{roi}%</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">IRR (Est.)</p>
              <p className="text-2xl font-bold text-blue-600">18.5%</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Payback Period</p>
              <p className="text-2xl font-bold text-purple-600">24 months</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">NPV</p>
              <p className="text-2xl font-bold text-indigo-600">€2.5M</p>
            </div>
          </div>
          <p className="text-sm text-gray-700 mt-4">
            Based on current market conditions, this project shows strong financial viability with above-average returns.
          </p>
        </motion.div>
      </div>

      <div className="flex justify-between mt-8">
        <Button
          type="button"
          variant="outline"
          onClick={onBack}
        >
          <FiArrowLeft className="mr-2" />
          Back
        </Button>
        <Button
          type="submit"
          className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white"
        >
          Continue
          <FiArrowRight className="ml-2" />
        </Button>
      </div>
    </form>
  );
}