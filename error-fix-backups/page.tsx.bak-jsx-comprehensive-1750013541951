"use client";

import React, { useState } from 'react';
import { useParams } from 'next/navigation';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  CheckCircle2,
  Circle,
  Clock,
  FileText,
  MessageSquare,
  Users,
  Calendar,
  Euro,
  Home,
  AlertCircle,
  Activity,
  Download,
  Eye,
  Send,
  Phone,
  Video,
  Building,
  Briefcase,
  Scale
} from 'lucide-react';
import { format } from 'date-fns';

interface TransactionEvent {
  id: string;
  type: string;
  title: string;
  description: string;
  timestamp: Date;
  actor: {
    name: string;
    role: string;
    avatar?: string;
  };
  status: 'completed' | 'pending' | 'in_progress';
  documents?: Array<{
    id: string;
    name: string;
    type: string;
  }>
  );
}

export default function TransactionDetails() {
  const { id: transactionId } = useParams();
  const [selectedTabsetSelectedTab] = useState('timeline');

  // Fetch transaction details
  const { data: transaction, isLoading } = useQuery({
    queryKey: ['transaction', transactionId],
    queryFn: async () => {
      const response = await fetch(`/api/transactions/${transactionId}`);
      return response.json();
    }
  });

  // Fetch timeline events
  const { data: timeline } = useQuery({
    queryKey: ['transaction-timeline', transactionId],
    queryFn: async () => {
      const response = await fetch(`/api/transactions/${transactionId}/timeline`);
      return response.json();
    }
  });

  if (isLoading) {
    return <div>Loading transaction details...</div>;
  }

  // Calculate progress percentage
  const completedSteps = transaction?.milestones?.filter((m: any) => m.status === 'completed').length || 0;
  const totalSteps = transaction?.milestones?.length || 1;
  const progressPercentage = (completedSteps / totalSteps) * 100;

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="mx-auto max-w-7xl px-4">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-start justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Transaction Details</h1>
              <p className="text-gray-600 mt-1">
                {transaction?.property?.name} - Unit {transaction?.property?.unitNumber}
              </p>
            </div>
            <Badge variant={transaction?.status === 'active' ? 'success' : 'secondary'}>
              {transaction?.status}
            </Badge>
          </div>

          {/* Progress Overview */}
          <Card className="mt-6">
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <p className="text-sm text-gray-600">Overall Progress</p>
                  <p className="text-2xl font-bold">{Math.round(progressPercentage)}%</p>
                </div>
                <div className="text-right">
                  <p className="text-sm text-gray-600">Estimated Completion</p>
                  <p className="text-lg font-semibold">
                    {format(new Date(transaction?.estimatedCompletion || Date.now()), 'MMMM yyyy')}
                  </p>
                </div>
              </div>
              <Progress value={progressPercentage} className="h-3" />
              <div className="grid grid-cols-3 md:grid-cols-6 gap-4 mt-6">
                {transaction?.milestones?.map((milestone: any, index: number) => (
                  <div key={milestone.id} className="text-center">
                    <div className={`w-10 h-10 rounded-full mx-auto mb-2 flex items-center justify-center
                      ${milestone.status === 'completed' ? 'bg-green-600 text-white' : 
                        milestone.status === 'in_progress' ? 'bg-blue-600 text-white' : 
                        'bg-gray-200 text-gray-600'}`}>
                      {milestone.status === 'completed' ? (
                        <CheckCircle2 className="h-6 w-6" />
                      ) : milestone.status === 'in_progress' ? (
                        <Clock className="h-6 w-6" />
                      ) : (
                        <Circle className="h-6 w-6" />
                      )}
                    </div>
                    <p className="text-xs font-medium">{milestone.title}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Column - Timeline & Activity */}
          <div className="lg:col-span-2">
            <Tabs value={selectedTab} onValueChange={setSelectedTab}>
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="timeline">Timeline</TabsTrigger>
                <TabsTrigger value="documents">Documents</TabsTrigger>
                <TabsTrigger value="payments">Payments</TabsTrigger>
                <TabsTrigger value="messages">Messages</TabsTrigger>
              </TabsList>

              {/* Timeline Tab */}
              <TabsContent value="timeline" className="mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Transaction Timeline</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ScrollArea className="h-[600px]">
                      <div className="space-y-6">
                        {timeline?.map((event: TransactionEvent, index: number) => (
                          <div key={event.id} className="flex gap-4">
                            <div className="flex flex-col items-center">
                              <div className={`w-10 h-10 rounded-full flex items-center justify-center
                                ${event.status === 'completed' ? 'bg-green-100 text-green-600' :
                                  event.status === 'in_progress' ? 'bg-blue-100 text-blue-600' :
                                  'bg-gray-100 text-gray-600'}`}>
                                {event.type === 'payment' ? <Euro className="h-5 w-5" /> :
                                 event.type === 'document' ? <FileText className="h-5 w-5" /> :
                                 event.type === 'milestone' ? <CheckCircle2 className="h-5 w-5" /> :
                                 <Activity className="h-5 w-5" />}
                              </div>
                              {index <timeline.length - 1 && (
                                <div className={`w-0.5 h-20 
                                  ${event.status === 'completed' ? 'bg-green-300' : 'bg-gray-300'}`} />
                              )}
                            </div>
                            <div className="flex-1 pb-8">
                              <div className="flex items-start justify-between mb-2">
                                <div>
                                  <h4 className="font-semibold">{event.title}</h4>
                                  <p className="text-sm text-gray-600">{event.description}</p>
                                </div>
                                <time className="text-xs text-gray-500">
                                  {format(new Date(event.timestamp), 'MMM d, h:mm a')}
                                </time>
                              </div>
                              <div className="flex items-center gap-2 mt-2">
                                <Avatar className="h-6 w-6">
                                  <AvatarFallback className="text-xs">
                                    {event.actor.name.split(' ').map(n => n[0]).join('')}
                                  </AvatarFallback>
                                </Avatar>
                                <span className="text-sm text-gray-600">
                                  {event.actor.name} â€¢ {event.actor.role}
                                </span>
                              </div>
                              {event.documents && (
                                <div className="mt-3 space-y-1">
                                  {event.documents.map(doc => (
                                    <div key={doc.id} className="flex items-center gap-2 text-sm">
                                      <FileText className="h-4 w-4 text-gray-400" />
                                      <a href="#" className="text-blue-600 hover:underline">{doc.name}</a>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Documents Tab */}
              <TabsContent value="documents" className="mt-6">
                <Card>
                  <CardHeader>
                    <div className="flex justify-between items-center">
                      <CardTitle>Documents</CardTitle>
                      <Button size="sm">
                        <FileText className="h-4 w-4 mr-1" />
                        Upload Document
                      </Button>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {transaction?.documents?.map((doc: any) => (
                        <div key={doc.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex items-center gap-3">
                            <FileText className="h-8 w-8 text-gray-400" />
                            <div>
                              <p className="font-medium">{doc.name}</p>
                              <p className="text-sm text-gray-600">
                                Uploaded by {doc.uploadedBy} â€¢ {format(new Date(doc.uploadedAt), 'MMM d')}
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <Button size="sm" variant="outline">
                              <Eye className="h-4 w-4 mr-1" />
                              View
                            </Button>
                            <Button size="sm" variant="outline">
                              <Download className="h-4 w-4 mr-1" />
                              Download
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Payments Tab */}
              <TabsContent value="payments" className="mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Payment Schedule</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {transaction?.payments?.map((payment: any) => (
                        <div key={payment.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div>
                            <p className="font-medium">{payment.name}</p>
                            <p className="text-sm text-gray-600">{payment.description}</p>
                            <p className="text-sm text-gray-600 mt-1">
                              Due: {format(new Date(payment.dueDate), 'MMMM d, yyyy')}
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="text-lg font-semibold">â‚¬{payment.amount.toLocaleString()}</p>
                            <Badge variant={payment.status === 'paid' ? 'success' : 
                                          payment.status === 'pending' ? 'warning' : 'secondary'}>
                              {payment.status}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Messages Tab */}
              <TabsContent value="messages" className="mt-6">
                <Card>
                  <CardContent className="p-0">
                    <div className="h-[600px] flex flex-col">
                      <div className="p-4 border-b">
                        <h3 className="font-semibold">Transaction Chat</h3>
                        <p className="text-sm text-gray-600">All stakeholders</p>
                      </div>
                      <ScrollArea className="flex-1 p-4">
                        <div className="space-y-4">
                          {/* Messages would be rendered here */}
                          <div className="text-center text-gray-500 py-8">
                            Messages coming soon...
                          </div>
                        </div>
                      </ScrollArea>
                      <div className="p-4 border-t">
                        <div className="flex gap-2">
                          <input
                            type="text"
                            placeholder="Type a message..."
                            className="flex-1 px-3 py-2 border rounded-lg"
                          />
                          <Button>
                            <Send className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Right Column - Stakeholders & Details */}
          <div className="space-y-6">
            {/* Property Details */}
            <Card>
              <CardHeader>
                <CardTitle>Property Details</CardTitle>
              </CardHeader>
              <CardContent>
                <dl className="space-y-3 text-sm">
                  <div className="flex justify-between">
                    <dt className="text-gray-600">Development</dt>
                    <dd className="font-medium">{transaction?.property?.development}</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt className="text-gray-600">Unit</dt>
                    <dd className="font-medium">{transaction?.property?.unitNumber}</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt className="text-gray-600">Type</dt>
                    <dd className="font-medium">{transaction?.property?.type}</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt className="text-gray-600">Price</dt>
                    <dd className="font-medium">â‚¬{transaction?.property?.price?.toLocaleString()}</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt className="text-gray-600">Completion</dt>
                    <dd className="font-medium">Q{transaction?.property?.completionQuarter} {transaction?.property?.completionYear}</dd>
                  </div>
                </dl>
              </CardContent>
            </Card>

            {/* Stakeholders */}
            <Card>
              <CardHeader>
                <CardTitle>Stakeholders</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* Developer */}
                  <div className="flex items-start gap-3">
                    <Avatar>
                      <AvatarFallback>
                        <Building className="h-5 w-5" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="font-medium">{transaction?.developer?.name}</p>
                      <p className="text-sm text-gray-600">Developer</p>
                      <div className="flex gap-2 mt-2">
                        <Button size="sm" variant="outline">
                          <MessageSquare className="h-3 w-3 mr-1" />
                          Message
                        </Button>
                        <Button size="sm" variant="outline">
                          <Phone className="h-3 w-3 mr-1" />
                          Call
                        </Button>
                      </div>
                    </div>
                  </div>

                  {/* Buyer */}
                  <div className="flex items-start gap-3">
                    <Avatar>
                      <AvatarFallback>
                        <Users className="h-5 w-5" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="font-medium">{transaction?.buyer?.name}</p>
                      <p className="text-sm text-gray-600">Buyer</p>
                      <div className="flex gap-2 mt-2">
                        <Button size="sm" variant="outline">
                          <MessageSquare className="h-3 w-3 mr-1" />
                          Message
                        </Button>
                      </div>
                    </div>
                  </div>

                  {/* Agent */}
                  <div className="flex items-start gap-3">
                    <Avatar>
                      <AvatarFallback>
                        <Briefcase className="h-5 w-5" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="font-medium">{transaction?.agent?.name}</p>
                      <p className="text-sm text-gray-600">Estate Agent</p>
                      <div className="flex gap-2 mt-2">
                        <Button size="sm" variant="outline">
                          <MessageSquare className="h-3 w-3 mr-1" />
                          Message
                        </Button>
                        <Button size="sm" variant="outline">
                          <Video className="h-3 w-3 mr-1" />
                          Video Call
                        </Button>
                      </div>
                    </div>
                  </div>

                  {/* Solicitors */}
                  <div className="flex items-start gap-3">
                    <Avatar>
                      <AvatarFallback>
                        <Scale className="h-5 w-5" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="font-medium">{transaction?.buyerSolicitor?.name}</p>
                      <p className="text-sm text-gray-600">Buyer's Solicitor</p>
                      <div className="flex gap-2 mt-2">
                        <Button size="sm" variant="outline">
                          <MessageSquare className="h-3 w-3 mr-1" />
                          Message
                        </Button>
                      </div>
                    </div>
                  </div>

                  <div className="flex items-start gap-3">
                    <Avatar>
                      <AvatarFallback>
                        <Scale className="h-5 w-5" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="font-medium">{transaction?.sellerSolicitor?.name}</p>
                      <p className="text-sm text-gray-600">Seller's Solicitor</p>
                      <div className="flex gap-2 mt-2">
                        <Button size="sm" variant="outline">
                          <MessageSquare className="h-3 w-3 mr-1" />
                          Message
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Action Items */}
            <Card>
              <CardHeader>
                <CardTitle>Action Required</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {transaction?.actionItems?.map((item: any) => (
                    <div key={item.id} className="flex items-start gap-3">
                      <AlertCircle className="h-5 w-5 text-orange-500 mt-0.5" />
                      <div>
                        <p className="font-medium text-sm">{item.title}</p>
                        <p className="text-sm text-gray-600">{item.description}</p>
                        <Button size="sm" className="mt-2">
                          Complete Action
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}