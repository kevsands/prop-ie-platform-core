'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Progress } from '@/components/ui/progress';
import { 
  Building2, 
  Plus, 
  Edit3, 
  AlertTriangle, 
  CheckCircle,
  Clock,
  Euro,
  Calculator,
  TrendingUp,
  TrendingDown
} from 'lucide-react';
import { useBOQData } from '@/hooks/useBOQData';

interface BOQQuickViewProps {
  projectId?: string;
  selectedItem?: any;
}

export function BOQQuickView({ projectId, selectedItem }: BOQQuickViewProps) {
  const { data: boqData, isLoading } = useBOQData(projectId);
  const [quickCalculation, setQuickCalculation] = useState({
    quantity: '',
    rate: '',
    total: 0
  });

  // Calculate total on quantity/rate change
  useEffect(() => {
    const quantity = parseFloat(quickCalculation.quantity) || 0;
    const rate = parseFloat(quickCalculation.rate) || 0;
    setQuickCalculation(prev => ({
      ...prev,
      total: quantity * rate
    }));
  }, [quickCalculation.quantity, quickCalculation.rate]);

  // Mock BOQ data for demonstration - TEMPLATE ONLY
  const mockBOQItems = [
    {
      id: '1',
      category: 'Foundations',
      description: 'Concrete Foundation (TEMPLATE RATE)',
      quantity: 150,
      unit: 'm³',
      rate: 120, // ⚠️ VERIFY CURRENT RATE
      amount: 18000,
      status: 'approved',
      variance: 5.2
    },
    {
      id: '2',
      category: 'Structural',
      description: 'Steel Frame',
      quantity: 50,
      unit: 'tonnes',
      rate: 2500,
      amount: 125000,
      status: 'pending',
      variance: -2.1
    },
    {
      id: '3',
      category: 'M&E',
      description: 'Electrical Installation',
      quantity: 1,
      unit: 'item',
      rate: 45000,
      amount: 45000,
      status: 'in_progress',
      variance: 12.8
    }
  ];

  const totalBOQValue = mockBOQItems.reduce((sum, item) => sum + item.amount, 0);
  const averageVariance = mockBOQItems.reduce((sum, item) => sum + Math.abs(item.variance), 0) / mockBOQItems.length;

  return (
    <div className="space-y-4">
      {/* BOQ Summary */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm flex items-center gap-2">
            <Building2 className="h-4 w-4" />
            BOQ Summary
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-2 gap-3 text-sm">
            <div>
              <p className="text-muted-foreground">Total Value</p>
              <p className="font-semibold">€{totalBOQValue.toLocaleString()}</p>
            </div>
            <div>
              <p className="text-muted-foreground">Avg Variance</p>
              <p className={`font-semibold ${averageVariance > 5 ? 'text-red-600' : 'text-green-600'}`}>
                {averageVariance.toFixed(1)}%
              </p>
            </div>
          </div>
          
          <div className="space-y-2">
            <div className="flex justify-between text-xs">
              <span>Completion</span>
              <span>75%</span>
            </div>
            <Progress value={75} className="h-2" />
          </div>
        </CardContent>
      </Card>

      {/* Quick Calculator */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm flex items-center gap-2">
            <Calculator className="h-4 w-4" />
            Quick Calculate
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-2 gap-2">
            <div>
              <Label htmlFor="quantity" className="text-xs">Quantity</Label>
              <Input
                id="quantity"
                type="number"
                value={quickCalculation.quantity}
                onChange={(e) => setQuickCalculation(prev => ({ ...prev, quantity: e.target.value }))}
                className="h-8"
                placeholder="0"
              />
            </div>
            <div>
              <Label htmlFor="rate" className="text-xs">Rate (€)</Label>
              <Input
                id="rate"
                type="number"
                value={quickCalculation.rate}
                onChange={(e) => setQuickCalculation(prev => ({ ...prev, rate: e.target.value }))}
                className="h-8"
                placeholder="0.00"
              />
            </div>
          </div>
          
          <div className="bg-muted p-2 rounded text-center">
            <p className="text-xs text-muted-foreground">Total (Verify Rate)</p>
            <p className="font-semibold">€{quickCalculation.total.toLocaleString()}</p>
          </div>
          
          <Button size="sm" className="w-full" disabled>
            <Plus className="h-4 w-4 mr-1" />
            Verify Rate First
          </Button>
          
          <div className="text-xs text-amber-600 text-center mt-1">
            ⚠️ Verify current market rates before adding
          </div>
        </CardContent>
      </Card>

      {/* Recent BOQ Items */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-sm">Recent Items</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          {mockBOQItems.slice(0, 3).map((item) => (
            <div key={item.id} className="space-y-2">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium truncate">{item.description}</p>
                  <p className="text-xs text-muted-foreground">{item.category}</p>
                </div>
                <Badge 
                  variant={
                    item.status === 'approved' ? 'default' :
                    item.status === 'pending' ? 'secondary' : 'outline'
                  }
                  className="text-xs"
                >
                  {item.status === 'approved' && <CheckCircle className="h-3 w-3 mr-1" />}
                  {item.status === 'pending' && <Clock className="h-3 w-3 mr-1" />}
                  {item.status === 'in_progress' && <AlertTriangle className="h-3 w-3 mr-1" />}
                  {item.status}
                </Badge>
              </div>
              
              <div className="flex items-center justify-between text-xs">
                <span className="text-muted-foreground">
                  {item.quantity} {item.unit} × €{item.rate}
                </span>
                <div className="flex items-center gap-2">
                  <span className="font-semibold">€{item.amount.toLocaleString()}</span>
                  <span className={`flex items-center ${item.variance > 0 ? 'text-red-600' : 'text-green-600'}`}>
                    {item.variance > 0 ? <TrendingUp className="h-3 w-3" /> : <TrendingDown className="h-3 w-3" />}
                    {Math.abs(item.variance)}%
                  </span>
                </div>
              </div>
              
              {item !== mockBOQItems[mockBOQItems.length - 1] && <Separator />}
            </div>
          ))}
          
          <Button variant="outline" size="sm" className="w-full">
            <Edit3 className="h-4 w-4 mr-1" />
            View Full BOQ
          </Button>
        </CardContent>
      </Card>

      {/* Variations Alert */}
      {averageVariance > 5 && (
        <Card className="border-amber-200 bg-amber-50">
          <CardContent className="p-3">
            <div className="flex items-start gap-2">
              <AlertTriangle className="h-4 w-4 text-amber-600 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-amber-800">High Variance Detected</p>
                <p className="text-xs text-amber-700">Several BOQ items show significant cost variations. Review recommended.</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}