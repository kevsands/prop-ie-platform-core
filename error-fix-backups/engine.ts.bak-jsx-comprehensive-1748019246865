/**
 * Transaction Engine - Core state machine for property transactions
 * Manages the entire property purchase flow from enquiry to handover
 */

import { PrismaClient } from '@prisma/client';
import { EventEmitter } from 'events';
import { z } from 'zod';
import { Logger } from '@/utils/logger';

const prisma = new PrismaClient();
const logger = new Logger('transaction-engine');

// Transaction phases (states)
export enum TransactionPhase {
  ENQUIRY = 'ENQUIRY',
  VIEWING_SCHEDULED = 'VIEWING_SCHEDULED',
  VIEWED = 'VIEWED',
  RESERVATION = 'RESERVATION',
  CONTRACT_ISSUED = 'CONTRACT_ISSUED',
  CONTRACT_SIGNED = 'CONTRACT_SIGNED',
  DEPOSIT_PAID = 'DEPOSIT_PAID',
  MORTGAGE_APPROVED = 'MORTGAGE_APPROVED',
  CLOSING = 'CLOSING',
  COMPLETED = 'COMPLETED',
  HANDED_OVER = 'HANDED_OVER',
  CANCELLED = 'CANCELLED'
}

// Milestones within each phase
export interface Milestone {
  id: string;
  name: string;
  phase: TransactionPhase;
  required: boolean;
  order: number;
  completionCriteria: string[];
  documentsRequired: string[];
  notifications: NotificationConfig[];
}

export interface NotificationConfig {
  to: string[]; // roles: buyer, agent, solicitor, developer
  template: string;
  timing: 'on_start' | 'on_complete' | 'on_overdue';
  channels: ('email' | 'sms' | 'in_app')[];
}

// State transition rules
const transitionRules: Record<TransactionPhase, TransactionPhase[]> = {
  [TransactionPhase.ENQUIRY]: [TransactionPhase.VIEWING_SCHEDULED, TransactionPhase.CANCELLED],
  [TransactionPhase.VIEWING_SCHEDULED]: [TransactionPhase.VIEWED, TransactionPhase.CANCELLED],
  [TransactionPhase.VIEWED]: [TransactionPhase.RESERVATION, TransactionPhase.CANCELLED],
  [TransactionPhase.RESERVATION]: [TransactionPhase.CONTRACT_ISSUED, TransactionPhase.CANCELLED],
  [TransactionPhase.CONTRACT_ISSUED]: [TransactionPhase.CONTRACT_SIGNED, TransactionPhase.CANCELLED],
  [TransactionPhase.CONTRACT_SIGNED]: [TransactionPhase.DEPOSIT_PAID, TransactionPhase.CANCELLED],
  [TransactionPhase.DEPOSIT_PAID]: [TransactionPhase.MORTGAGE_APPROVED, TransactionPhase.CANCELLED],
  [TransactionPhase.MORTGAGE_APPROVED]: [TransactionPhase.CLOSING, TransactionPhase.CANCELLED],
  [TransactionPhase.CLOSING]: [TransactionPhase.COMPLETED, TransactionPhase.CANCELLED],
  [TransactionPhase.COMPLETED]: [TransactionPhase.HANDED_OVER],
  [TransactionPhase.HANDED_OVER]: [],
  [TransactionPhase.CANCELLED]: []
};

// Validation schemas
const TransitionSchema = z.object({
  saleId: z.string(),
  newPhase: z.nativeEnum(TransactionPhase),
  metadata: z.record(z.any()).optional(),
  documents: z.array(z.string()).optional(),
  notes: z.string().optional(),
  userId: z.string()
});

export type TransitionRequest = z.infer<typeof TransitionSchema>;

export class TransactionEngine extends EventEmitter {
  private milestones: Map<string, Milestone>;

  constructor() {
    super();
    this.milestones = this.initializeMilestones();
  }

  /**
   * Initialize milestone definitions for each phase
   */
  private initializeMilestones(): Map<string, Milestone> {
    const milestones = new Map<string, Milestone>();

    // Enquiry Phase
    milestones.set('initial-enquiry', {
      id: 'initial-enquiry',
      name: 'Initial Enquiry',
      phase: TransactionPhase.ENQUIRY,
      required: true,
      order: 1,
      completionCriteria: ['Contact information captured', 'Requirements documented'],
      documentsRequired: [],
      notifications: [{
        to: ['agent'],
        template: 'new-enquiry',
        timing: 'on_complete',
        channels: ['email', 'in_app']
      }]
    });

    // Viewing Phase
    milestones.set('viewing-scheduled', {
      id: 'viewing-scheduled',
      name: 'Viewing Scheduled',
      phase: TransactionPhase.VIEWING_SCHEDULED,
      required: true,
      order: 2,
      completionCriteria: ['Date and time confirmed', 'Location confirmed'],
      documentsRequired: [],
      notifications: [{
        to: ['buyer', 'agent'],
        template: 'viewing-confirmation',
        timing: 'on_complete',
        channels: ['email', 'sms']
      }]
    });

    // Reservation Phase
    milestones.set('reservation-agreement', {
      id: 'reservation-agreement',
      name: 'Reservation Agreement',
      phase: TransactionPhase.RESERVATION,
      required: true,
      order: 3,
      completionCriteria: ['Agreement signed', 'Deposit paid'],
      documentsRequired: ['reservation_agreement', 'deposit_receipt'],
      notifications: [{
        to: ['buyer', 'developer', 'solicitor'],
        template: 'reservation-confirmed',
        timing: 'on_complete',
        channels: ['email']
      }]
    });

    // Contract Phase
    milestones.set('contract-review', {
      id: 'contract-review',
      name: 'Contract Review',
      phase: TransactionPhase.CONTRACT_ISSUED,
      required: true,
      order: 4,
      completionCriteria: ['Solicitor review complete', 'Buyer approval received'],
      documentsRequired: ['sales_contract', 'legal_review'],
      notifications: [{
        to: ['buyer', 'solicitor'],
        template: 'contract-ready-for-review',
        timing: 'on_start',
        channels: ['email']
      }]
    });

    // Add more milestones...

    return milestones;
  }

  /**
   * Transition a sale to a new phase
   */
  async transition(request: TransitionRequest): Promise<void> {
    const validation = TransitionSchema.safeParse(request);
    if (!validation.success) {
      throw new Error(`Invalid transition request: ${validation.error.message}`);
    }

    const { saleId, newPhase, metadata, documents, notes, userId } = validation.data;

    // Get current sale state
    const sale = await prisma.sale.findUnique({
      where: { id: saleId },
      include: {
        timeline: true,
        statusHistory: true
      }
    });

    if (!sale) {
      throw new Error(`Sale not found: ${saleId}`);
    }

    // Validate transition
    const currentPhase = sale.status as TransactionPhase;
    if (!this.canTransition(currentPhase, newPhase)) {
      throw new Error(`Invalid transition from ${currentPhase} to ${newPhase}`);
    }

    // Begin transaction
    const result = await prisma.$transaction(async (tx) => {
      // Update sale status
      const updatedSale = await tx.sale.update({
        where: { id: saleId },
        data: {
          status: newPhase,
          metadata: {
            ...(sale.metadata as any || {}),
            ...metadata
          }
        }
      });

      // Create status history entry
      await tx.saleStatusHistory.create({
        data: {
          saleId,
          status: newPhase,
          previousStatus: currentPhase,
          updatedById: userId,
          notes
        }
      });

      // Update timeline
      await this.updateTimeline(tx, saleId, newPhase);

      // Process milestones
      await this.processMilestones(tx, saleId, newPhase);

      // Attach documents if provided
      if (documents && documents.length > 0) {
        await this.attachDocuments(tx, saleId, documents);
      }

      return updatedSale;
    });

    // Emit events for notifications
    this.emit('transition', {
      saleId,
      previousPhase: currentPhase,
      newPhase,
      userId,
      timestamp: new Date()
    });

    // Trigger notifications
    await this.sendNotifications(saleId, newPhase, 'on_complete');

    logger.info(`Sale ${saleId} transitioned from ${currentPhase} to ${newPhase}`);
  }

  /**
   * Check if a transition is valid
   */
  private canTransition(from: TransactionPhase, to: TransactionPhase): boolean {
    const allowedTransitions = transitionRules[from];
    return allowedTransitions.includes(to);
  }

  /**
   * Update sale timeline based on phase
   */
  private async updateTimeline(tx: any, saleId: string, phase: TransactionPhase): Promise<void> {
    const updates: any = {};

    switch (phase) {
      case TransactionPhase.VIEWING_SCHEDULED:
        updates.firstViewingDate = new Date();
        break;
      case TransactionPhase.RESERVATION:
        updates.reservationDate = new Date();
        updates.reservationExpiryDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days
        break;
      case TransactionPhase.CONTRACT_ISSUED:
        updates.contractIssuedDate = new Date();
        updates.contractReturnDeadline = new Date(Date.now() + 21 * 24 * 60 * 60 * 1000); // 21 days
        break;
      case TransactionPhase.DEPOSIT_PAID:
        updates.depositPaidDate = new Date();
        break;
      case TransactionPhase.COMPLETED:
        updates.saleCompletedDate = new Date();
        break;
      // Add more timeline updates...
    }

    if (Object.keys(updates).length > 0) {
      await tx.saleTimeline.update({
        where: { saleId },
        data: updates
      });
    }
  }

  /**
   * Process milestones for a phase
   */
  private async processMilestones(tx: any, saleId: string, phase: TransactionPhase): Promise<void> {
    const phaseMilestones = Array.from(this.milestones.values())
      .filter(m => m.phase === phase);

    for (const milestone of phaseMilestones) {
      // Check if milestone is already completed
      const existing = await tx.saleTask.findFirst({
        where: {
          saleId,
          title: milestone.name,
          status: 'completed'
        }
      });

      if (!existing && milestone.required) {
        // Create task for milestone
        await tx.saleTask.create({
          data: {
            saleId,
            title: milestone.name,
            description: `Complete ${milestone.name} for ${phase}`,
            status: 'pending',
            priority: 'high',
            dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
            assignedToId: await this.getAssignedUser(saleId, milestone),
            createdById: 'system'
          }
        });
      }
    }
  }

  /**
   * Get assigned user for a milestone
   */
  private async getAssignedUser(saleId: string, milestone: Milestone): Promise<string> {
    const sale = await prisma.sale.findUnique({
      where: { id: saleId },
      include: {
        sellingAgent: true
      }
    });

    // Logic to determine who should be assigned based on milestone type
    if (milestone.notifications[0]?.to.includes('agent') && sale?.sellingAgentId) {
      return sale.sellingAgentId;
    }

    // Default to agent or system user
    return sale?.sellingAgentId || 'system';
  }

  /**
   * Attach documents to a sale
   */
  private async attachDocuments(tx: any, saleId: string, documentIds: string[]): Promise<void> {
    await tx.document.updateMany({
      where: {
        id: { in: documentIds }
      },
      data: {
        saleId
      }
    });
  }

  /**
   * Send notifications for phase transitions
   */
  private async sendNotifications(
    saleId: string,
    phase: TransactionPhase,
    timing: 'on_start' | 'on_complete' | 'on_overdue'
  ): Promise<void> {
    const phaseMilestones = Array.from(this.milestones.values())
      .filter(m => m.phase === phase);

    for (const milestone of phaseMilestones) {
      const notifications = milestone.notifications.filter(n => n.timing === timing);

      for (const notification of notifications) {
        // Get recipients
        const recipients = await this.getRecipients(saleId, notification.to);

        // Send notifications through each channel
        for (const channel of notification.channels) {
          this.emit('notification', {
            recipients,
            template: notification.template,
            channel,
            data: {
              saleId,
              phase,
              milestone: milestone.name
            }
          });
        }
      }
    }
  }

  /**
   * Get recipients for notifications based on roles
   */
  private async getRecipients(saleId: string, roles: string[]): Promise<string[]> {
    const sale = await prisma.sale.findUnique({
      where: { id: saleId },
      include: {
        sellingAgent: true
      }
    });

    const recipients: string[] = [];

    for (const role of roles) {
      switch (role) {
        case 'buyer':
          recipients.push(sale!.buyerId);
          break;
        case 'agent':
          if (sale?.sellingAgentId) {
            recipients.push(sale.sellingAgentId);
          }
          break;
        case 'solicitor':
          if (sale?.solicitorId) {
            recipients.push(sale.solicitorId);
          }
          break;
        case 'developer':
          const development = await prisma.development.findUnique({
            where: { id: sale!.developmentId }
          });
          if (development) {
            recipients.push(development.developerId);
          }
          break;
      }
    }

    return recipients;
  }

  /**
   * Get available transitions for a sale
   */
  async getAvailableTransitions(saleId: string): Promise<TransactionPhase[]> {
    const sale = await prisma.sale.findUnique({
      where: { id: saleId }
    });

    if (!sale) {
      throw new Error(`Sale not found: ${saleId}`);
    }

    const currentPhase = sale.status as TransactionPhase;
    return transitionRules[currentPhase] || [];
  }

  /**
   * Get milestones for a phase
   */
  getMilestonesForPhase(phase: TransactionPhase): Milestone[] {
    return Array.from(this.milestones.values())
      .filter(m => m.phase === phase)
      .sort((a, b) => a.order - b.order);
  }

  /**
   * Get transaction timeline
   */
  async getTransactionTimeline(saleId: string): Promise<any> {
    const sale = await prisma.sale.findUnique({
      where: { id: saleId },
      include: {
        timeline: true,
        statusHistory: {
          orderBy: { timestamp: 'asc' }
        },
        tasks: {
          orderBy: { createdAt: 'asc' }
        },
        documents: true
      }
    });

    if (!sale) {
      throw new Error(`Sale not found: ${saleId}`);
    }

    // Build comprehensive timeline
    const timeline = {
      currentPhase: sale.status,
      phases: Object.values(TransactionPhase).map(phase => ({
        phase,
        status: this.getPhaseStatus(sale, phase),
        milestones: this.getMilestonesForPhase(phase).map(milestone => ({
          ...milestone,
          status: this.getMilestoneStatus(sale, milestone),
          tasks: sale.tasks.filter(t => t.title === milestone.name)
        }))
      })),
      history: sale.statusHistory,
      documents: sale.documents
    };

    return timeline;
  }

  /**
   * Get phase status
   */
  private getPhaseStatus(sale: any, phase: TransactionPhase): string {
    const currentPhase = sale.status as TransactionPhase;
    const phaseOrder = Object.values(TransactionPhase).indexOf(phase);
    const currentOrder = Object.values(TransactionPhase).indexOf(currentPhase);

    if (phase === currentPhase) return 'active';
    if (phaseOrder < currentOrder) return 'completed';
    return 'pending';
  }

  /**
   * Get milestone status
   */
  private getMilestoneStatus(sale: any, milestone: Milestone): string {
    const task = sale.tasks.find((t: any) => t.title === milestone.name);
    return task?.status || 'pending';
  }
}