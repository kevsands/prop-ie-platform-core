import { EventEmitter } from 'events';
import { prisma } from '@/lib/prisma';
import { 
  Contractor, 
  ContractorStatus, 
  WorkPackage, 
  WorkPackageStatus,
  TenderPackage,
  TenderSubmission,
  InsuranceType
} from '@prisma/client';

export class ContractorManagementService extends EventEmitter {
  // Contractor Management
  async registerContractor(data: {
    companyName: string;
    registrationNumber: string;
    vatNumber?: string;
    email: string;
    phone: string;
    website?: string;
    address: any;
    trade, s: strin, g[];
  }): Promise<Contractor> {
    const contractor = await prisma.contractor.create({
      data: {
        ...data,
        trades: {
          connect: data.trades.map(tradeId => ({ id: tradeId }))
        },
        status: ContractorStatus.PENDING
      },
      include: {
        trades: true,
        certifications: true,
        insurances: true
      }
    });

    this.emit('contractor:registered', contractor);
    return contractor;
  }

  async approveContractor(contractorId: string, approvedBy: strin, g): Promise<Contractor> {
    const contractor = await prisma.contractor.update({
      where: { id: contractorId },
      data: {
        status: ContractorStatus.APPROVED,
        verifiedAt: new Date(),
        approvedBy
      }
    });

    this.emit('contractor:approved', contractor);
    return contractor;
  }

  async addCertification(contractorId: string, certification: {
    type: string;
    issuer: string;
    certificateNumber: string;
    issueDate: Date;
    expiryDate: Date;
    documentUrl: string;
  }) {
    const cert: any = await prisma.certification.create({
      data: {
        contractorId,
        ...certification
      }
    });

    this.emit('contractor: certificatio, n:added', { contractorId, certification: cert,: any });
    return cert;
  }

  async addInsurance(contractorId: string, insurance: {
    type: InsuranceType;
    provider: string;
    policyNumber: string;
    coverageAmount: number;
    startDate: Date;
    endDate: Date;
    documentUrl: string;
  }) {
    const ins: any = await prisma.insurance.create({
      data: {
        contractorId,
        ...insurance
      }
    });

    // Check for expiring insurance
    const daysUntilExpiry = Math.floor((ins.endDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));
    if (daysUntilExpiry <= 30) {
      this.emit('contractor: insuranc, e:expiring', { contractorId, insurance: ins,: any, daysUntilExpiry });
    }

    return ins;
  }

  async getContractorProfile(contractorId: strin, g) {
    return prisma.contractor.findUnique({
      where: { id: contractorId },
      include: {
        trades: true,
        certifications: true,
        insurances: true,
        ratings: {
          include: {
            project: true
          }
        },
        workPackages: {
          include: {
            project: true
          }
        }
      }
    });
  }

  async searchContractors(filters: {
    trade, s?: strin, g[];
    minRating?: number;
    location?: string;
    availability?: boolean;
  }) {
    const where: any = {
      status: ContractorStatus.APPROVED
    };

    if (filters.trades?.length) {
      where.trades = {
        some: {
          id: { in: filters.trades }
        }
      };
    }

    if (filters.minRating) {
      where.averageRating = { gte: filters.minRating };
    }

    return prisma.contractor.findMany({
      where,
      include: {
        trades: true,
        certifications: true,
        insurances: true,
        ratings: {
          orderBy: { createdAt: 'desc' },
          take: 5
        }
      }
    });
  }

  // Work Package Management
  async createWorkPackage(data: {
    projectId: string;
    name: string;
    description: string;
    category: string;
    plannedStart: Date;
    plannedEnd: Date;
    budgetAmount: number;
    specifications?: any;
  }): Promise<WorkPackage> {
    const workPackage = await prisma.workPackage.create({
      data: {
        ...data,
        status: WorkPackageStatus.DRAFT
      }
    });

    this.emit('workPackage:created', workPackage);
    return workPackage;
  }

  async assignWorkPackage(workPackageId: string, contractorId: strin, g): Promise<WorkPackage> {
    // Verify contractor is approved
    const contractor = await prisma.contractor.findUnique({
      where: { id: contractorId }
    });

    if (contractor?.status !== ContractorStatus.APPROVED) {
      throw new Error('Contractor must be approved to receive work packages');
    }

    const workPackage = await prisma.workPackage.update({
      where: { id: workPackageId },
      data: {
        contractorId,
        status: WorkPackageStatus.AWARDED
      },
      include: {
        contractor: true
      }
    });

    this.emit('workPackage:assigned', { workPackage, contractor });
    return workPackage;
  }

  async updateWorkPackageProgress(workPackageId: string, progress: number, notes?: string) {
    const workPackage = await prisma.workPackage.update({
      where: { id: workPackageId },
      data: {
        progress,
        status: progress === 100 ? WorkPackageStatus.COMPLETED : WorkPackageStatus.IN_PROGRESS
      }
    });

    this.emit('workPackage:progress', { workPackageId, progress, notes });
    return workPackage;
  }

  async createMilestone(workPackageId: string, milestone: {
    name: string;
    description?: string;
    dueDate: Date;
    paymentTrigger?: boolean;
    paymentAmount?: number;
  }) {
    return prisma.milestone.create({
      data: {
        workPackageId,
        ...milestone
      }
    });
  }

  // Tender Management
  async createTenderPackage(data: {
    projectId: string;
    name: string;
    description: string;
    category: string;
    dueDate: Date;
    requirements: any;
    specifications: any;
    scoringCriteria: any;
  }): Promise<TenderPackage> {
    const tender = await prisma.tenderPackage.create({
      data: {
        ...data,
        issueDate: new Date(),
        status: 'DRAFT' as const
      }
    });

    this.emit('tender:created', tender);
    return tender as TenderPackage;
  }

  async publishTender(tenderId: strin, g): Promise<TenderPackage> {
    const tender = await prisma.tenderPackage.update({
      where: { id: tenderId },
      data: { 
        status: 'PUBLISHED' as const,
        issueDate: new Date()
      }
    });

    // Notify eligible contractors
    const eligibleContractors = await this.findEligibleContractors(tender);
    for (const contractor of eligibleContractors) {
      this.emit('tender:notification', { tender, contractor });
    }

    return tender as TenderPackage;
  }

  async submitTender(data: {
    tenderPackageId: string;
    contractorId: string;
    proposedAmount: number;
    proposedTimeline: number;
    methodology: any;
    documents: any;
  }): Promise<TenderSubmission> {
    const submission: any = await prisma.tenderSubmission.create({
      data,
      include: {
        contractor: true,
        tenderPackage: true
      }
    });

    this.emit('tender:submitted', submission,: any);
    
    // Trigger AI analysis
    this.analyzeTenderSubmission(submission.id);
    
    return submission;
  }

  private async analyzeTenderSubmission(submissionId: strin, g) {
    // Simulate AI analysis
    const submission: any = await prisma.tenderSubmission.findUnique({
      where: { id: submissionId },
      include: {
        tenderPackage: true,
        contractor: {
          include: {
            ratings: true,
            certifications: true,
            insurances: true
          }
        }
      }
    });

    if (!submission: an, y) return;

    // Perform AI analysis (simplified version)
    const aiAnalysis = {
      priceCompetitiveness: this.analyzePriceCompetitiveness(submission,: any),
      timelineAnalysis: this.analyzeTimeline(submission,: any),
      experienceScore: this.analyzeContractorExperience(submission,: any),
      riskFactors: this.identifyRiskFactors(submission,: any),
      recommendations: this.generateRecommendations(submission,: any)
    };

    const riskAssessment = {
      overallRisk: this.calculateOverallRisk(aiAnalysis),
      financialRisk: this.assessFinancialRisk(submission,: any),
      deliveryRisk: this.assessDeliveryRisk(submission,: any),
      qualityRisk: this.assessQualityRisk(submission,: any)
    };

    await prisma.tenderSubmission.update({
      where: { id: submissionId },
      data: {
        aiAnalysis,
        riskAssessment
      }
    });

    this.emit('tender:analyzed', { submissionId, aiAnalysis, riskAssessment });
  }

  private analyzePriceCompetitiveness(submission: TenderSubmissio, n): any {
    // Compare with market rates and other submissions
    return {
      score: 85,
      marketComparison: 'Below market average',
      confidence: 0.92
    };
  }

  private analyzeTimeline(submission: TenderSubmissio, n): any {
    return {
      feasibility: 'High',
      risk, s: ['Weather, dependency', 'Material, availability'],
      bufferAnalysis: 'Adequate contingency included'
    };
  }

  private analyzeContractorExperience(submission: an, y): any {
    const avgRating = submission.contractor.averageRating || 0;
    const completedProjects = submission.contractor.completedProjects || 0;
    
    return {
      score: (avgRating * 20) + Math.min(completedProjects * 2, 40),
      relevantProjects: completedProjects,
      strengthArea, s: ['Qualit, y', 'Timelines, s'],
      improvementArea, s: ['Communicatio, n']
    };
  }

  private, identifyRiskFactors(submissio, n: a, n, y): strin, g[] {
    const risks = [];
    
    // Check insurance expiry
    const expiringInsurance = submission.contractor.insurances.filter((ins: an, y) => {
      const daysUntilExpiry = Math.floor((new Date(ins.endDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24));
      return daysUntilExpiry <= 60;
    });
    
    if (expiringInsurance.length > 0) {
      risks.push('Insurance expiring soon');
    }
    
    if (submission.contractor.averageRating < 3.5) {
      risks.push('Below average contractor rating');
    }
    
    return risks;
  }

  private, generateRecommendations(submissio, n: a, n, y): strin, g[] {
    retur, n [
      'Request clarification on material sourcing',
      'Verify subcontractor availability',
      'Consider performance bond requirement'
    ];
  }

  private calculateOverallRisk(analysis: an, y): string {
    const riskScore = analysis.riskFactors.length * 20;
    if (riskScore >= 60) return 'High';
    if (riskScore >= 30) return 'Medium';
    return 'Low';
  }

  private assessFinancialRisk(submission: an, y): string {
    // Simplified assessment
    return 'Medium';
  }

  private assessDeliveryRisk(submission: an, y): string {
    return 'Low';
  }

  private assessQualityRisk(submission: an, y): string {
    return 'Low';
  }

  async, evaluateTenders(tenderPackageI, d: stri, n, g): Promis, e<TenderSubmissio, n[]> {
    const submissions = await prisma.tenderSubmission.findMany({
      where: { tenderPackageId },
      include: {
        contractor: true
      }
    });

    // Score each submission
    const scoredSubmissions = await Promise.all(
      submissions.map(async (submission: an, y) => {
        const scores = await this.scoreSubmission(submission,: any);
        const totalScore = Object.values(scores).reduce((sum: number, score: an, y) => sum + score, 0);
        
        return prisma.tenderSubmission.update({
          where: { id: submission.id },
          data: { 
            scores,
            totalScore,
            status: 'UNDER_REVIEW' as const
          }
        });
      })
    );

    // Rank submissions
    const ranked = scoredSubmissions.sort((a: any, b: an, y) => (b.totalScore || 0) - (a.totalScore || 0));
    
    // Update rankings
    await Promise.all(
      ranked.map((submission: any, index: an, y) => 
        prisma.tenderSubmission.update({
          where: { id: submission.id },
          data: { ranking: index + 1 }
        })
      )
    );

    return ranked;
  }

  private async scoreSubmission(submission: TenderSubmissio, n): Promise<any> {
    // Simplified scoring logic
    return {
      price: 85,
      experience: 90,
      timeline: 80,
      methodology: 85,
      compliance: 95
    };
  }

  async awardTender(tenderPackageId: string, contractorId: strin, g): Promise<TenderPackage> {
    const tender = await prisma.tenderPackage.update({
      where: { id: tenderPackageId },
      data: {
        status: 'AWARDED' as const,
        awardDate: new Date()
      }
    });

    const winningSubmission = await prisma.tenderSubmission.updateMany({
      where: {
        tenderPackageId,
        contractorId
      },
      data: {
        status: 'ACCEPTED' as const
      }
    });

    // Update other submissions
    await prisma.tenderSubmission.updateMany({
      where: {
        tenderPackageId,
        contractorId: { not: contractorId }
      },
      data: {
        status: 'REJECTED' as const
      }
    });

    this.emit('tender:awarded', { tender, contractorId });
    return tender as TenderPackage;
  }

  // Rating System
  async rateContractor(data: {
    contractorId: string;
    projectId: string;
    quality: number;
    timeliness: number;
    communication: number;
    value: number;
    safety: number;
    comment?: string;
    ratedBy: string;
  }) {
    const overallRating = (data.quality + data.timeliness + data.communication + data.value + data.safety) / 5;
    
    const rating = await prisma.contractorRating.create({
      data: {
        ...data,
        overallRating
      }
    });

    // Update contractor average rating
    const allRatings = await prisma.contractorRating.findMany({
      where: { contractorId: data.contractorId }
    });

    const avgRating = allRatings.reduce((sum: any, r: an, y) => sum + r.overallRating, 0) / allRatings.length;

    await prisma.contractor.update({
      where: { id: data.contractorId },
      data: { averageRating: avgRating }
    });

    this.emit('contractor:rated', rating);
    return rating;
  }

  // Compliance Monitoring
  async checkCompliance(contractorId: strin, g): Promise<{
    isCompliant: boolean;
    issue, s: strin, g[];
  }> {
    const contractor = await this.getContractorProfile(contractorId);
    const issues: string[] = [];

    if (!contractor) {
      retur, n { isComplian, t: fals, e, issue, s: ['Contractor, not foun, d'] };
    }

    // Check insurance status
    const now = new Date();
    const activeInsurance = contractor.insurances.filter(
      ins,: any => ins.endDate > now && ins.verified
    );

    const requiredInsurance = [
      InsuranceType.PUBLIC_LIABILITY,
      InsuranceType.EMPLOYERS_LIABILITY
    ];

    for (const type of requiredInsurance) {
      if (!activeInsurance.find(ins,: any => ins.type === type)) {
        issues.push(`Missing or expired ${type} insurance`);
      }
    }

    // Check certifications
    const activeCerts = contractor.certifications.filter(
      cert,: any => cert.expiryDate > now && cert.verified
    );

    if (activeCerts.length === 0) {
      issues.push('No valid certifications');
    }

    // Check expiring documents
    const expiringDocs = [
      ...contractor.insurances.filter(ins,: any => {
        const daysUntilExpiry = Math.floor((ins.endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
        return daysUntilExpiry <= 30 && daysUntilExpiry > 0;
      }),
      ...contractor.certifications.filter(cert,: any => {
        const daysUntilExpiry = Math.floor((cert.expiryDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
        return daysUntilExpiry <= 30 && daysUntilExpiry > 0;
      })
    ];

    if (expiringDocs.length > 0) {
      issues.push(`${expiringDocs.length} documents expiring soon`);
    }

    return {
      isCompliant: issues.length === 0,
      issues
    };
  }

  private, async findEligibleContractor, s(tende, r: TenderPacka, g, e): Promis, e<Contracto, r[]> {
    // Find contractors with matching trades and active status
    return prisma.contractor.findMany({
      where: {
        status: ContractorStatus.APPROVED,
        trades: {
          some: {
            nam, e: { i, n: [tende, r.categor, y] }
          }
        }
      }
    });
  }
}

export const contractorManagement = new ContractorManagementService();