'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Icons } from '@/components/ui/icons';
import { EstateAgentCRMService } from '@/lib/estate-agent-crm';
import {
  AutomatedWorkflow,
  WorkflowTrigger,
  WorkflowAction,
  EmailTemplate
} from '@/types/crm';

interface AutomatedFollowUpProps {
  agentId: string;
}

const AutomatedFollowUp: React.FC<AutomatedFollowUpProps> = ({ agentId }) => {
  const crmService = new EstateAgentCRMService();

  const [workflows, setWorkflows] = useState<AutomatedWorkflow[]>([]);
  const [emailTemplates, setEmailTemplates] = useState<EmailTemplate[]>([]);
  const [editingWorkflow, setEditingWorkflow] = useState<AutomatedWorkflow | null>(null);
  const [editingTemplate, setEditingTemplate] = useState<EmailTemplate | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showTemplateEditor, setShowTemplateEditor] = useState(false);

  useEffect(() => {
    loadData();
  }, [agentId]);

  const loadData = async () => {
    setLoading(true);
    try {
      const [workflowsData, templatesData] = await Promise.all([
        crmService.getAutomatedWorkflows(agentId),
        crmService.getEmailTemplates(agentId)
      ]);
      setWorkflows(workflowsData);
      setEmailTemplates(templatesData);
    } catch (error) {
      setError('Failed to load automation data');

    } finally {
      setLoading(false);
    }
  };

  const createWorkflow = () => {
    const newWorkflow: AutomatedWorkflow = {
      id: Date.now().toString(),
      name: 'New Workflow',
      description: '',
      trigger: {
        type: 'lead_created',
        conditions: {}
      },
      actions: [],
      isActive: false,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    setEditingWorkflow(newWorkflow);
  };

  const saveWorkflow = async () => {
    if (!editingWorkflow) return;

    try {
      const saved = await crmService.saveWorkflow(editingWorkflow);
      setWorkflows(prev => {
        const index = prev.findIndex(w => w.id === saved.id);
        if (index >= 0) {
          return [...prev.slice(0, index), saved, ...prev.slice(index + 1)];
        }
        return [...prev, saved];
      });
      setEditingWorkflow(null);
      setError(null);
    } catch (error) {
      setError('Failed to save workflow');

    }
  };

  const deleteWorkflow = async (workflowId: string) => {
    try {
      await crmService.deleteWorkflow(workflowId);
      setWorkflows(prev => prev.filter(w => w.id !== workflowId));
    } catch (error) {
      setError('Failed to delete workflow');

    }
  };

  const createEmailTemplate = () => {
    const newTemplate: EmailTemplate = {
      id: Date.now().toString(),
      name: 'New Template',
      subject: '',
      body: '',
      variables: [],
      category: 'follow-up',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    setEditingTemplate(newTemplate);
    setShowTemplateEditor(true);
  };

  const saveEmailTemplate = async () => {
    if (!editingTemplate) return;

    try {
      const saved = await crmService.saveEmailTemplate(editingTemplate);
      setEmailTemplates(prev => {
        const index = prev.findIndex(t => t.id === saved.id);
        if (index >= 0) {
          return [...prev.slice(0, index), saved, ...prev.slice(index + 1)];
        }
        return [...prev, saved];
      });
      setEditingTemplate(null);
      setShowTemplateEditor(false);
      setError(null);
    } catch (error) {
      setError('Failed to save email template');

    }
  };

  const triggerTypes = [
    { value: 'lead_created', label: 'New Lead Created' },
    { value: 'viewing_scheduled', label: 'Viewing Scheduled' },
    { value: 'viewing_completed', label: 'Viewing Completed' },
    { value: 'property_matched', label: 'Property Matched' },
    { value: 'time_based', label: 'Time Based' },
    { value: 'lead_status_change', label: 'Lead Status Changed' }
  ];

  const actionTypes = [
    { value: 'send_email', label: 'Send Email' },
    { value: 'send_sms', label: 'Send SMS' },
    { value: 'create_task', label: 'Create Task' },
    { value: 'update_lead_status', label: 'Update Lead Status' },
    { value: 'add_to_campaign', label: 'Add to Campaign' },
    { value: 'notify_agent', label: 'Notify Agent' }
  ];

  return (
    <div className="space-y-6">
      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Automated Workflows */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle>Automated Workflows</CardTitle>
            <Button onClick={createWorkflow}>
              <Icons.Plus className="w-4 h-4 mr-2" />
              New Workflow
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {workflows.length === 0 ? (
            <p className="text-center text-gray-600 py-4">
              No workflows created yet. Create your first automated workflow.
            </p>
          ) : (
            <div className="space-y-4">
              {workflows.map((workflow) => (
                <div
                  key={workflow.id}
                  className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <h4 className="font-medium">{workflow.name}</h4>
                        <Badge variant={workflow.isActive ? 'default' : 'secondary'}>
                          {workflow.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">
                        {workflow.description}
                      </p>
                      <div className="mt-2 flex items-center gap-4 text-sm">
                        <span className="flex items-center gap-1">
                          <Icons.Zap className="w-4 h-4" />
                          Trigger: {triggerTypes.find(t => t.value === workflow.trigger.type)?.label}
                        </span>
                        <span className="flex items-center gap-1">
                          <Icons.Activity className="w-4 h-4" />
                          {workflow.actions.length} Actions
                        </span>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => setEditingWorkflow(workflow)}
                      >
                        Edit
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => deleteWorkflow(workflow.id)}
                      >
                        Delete
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Email Templates */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle>Email Templates</CardTitle>
            <Button onClick={createEmailTemplate}>
              <Icons.Plus className="w-4 h-4 mr-2" />
              New Template
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {emailTemplates.length === 0 ? (
            <p className="text-center text-gray-600 py-4">
              No email templates created yet.
            </p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {emailTemplates.map((template) => (
                <div
                  key={template.id}
                  className="border rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer"
                  onClick={() => {
                    setEditingTemplate(template);
                    setShowTemplateEditor(true);
                  }}
                >
                  <h4 className="font-medium">{template.name}</h4>
                  <p className="text-sm text-gray-600 mt-1">
                    Subject: {template.subject}
                  </p>
                  <div className="mt-2">
                    <Badge variant="outline">{template.category}</Badge>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Workflow Editor Modal */}
      {editingWorkflow && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <h2 className="text-xl font-bold mb-4">
              {editingWorkflow.id ? 'Edit' : 'Create'} Workflow
            </h2>

            <div className="space-y-4">
              <div>
                <Label>Workflow Name</Label>
                <Input
                  value={editingWorkflow.name}
                  onChange={(e) => setEditingWorkflow({
                    ...editingWorkflow,
                    name: e.target.value
                  })}
                />
              </div>

              <div>
                <Label>Description</Label>
                <Textarea
                  value={editingWorkflow.description}
                  onChange={(e) => setEditingWorkflow({
                    ...editingWorkflow,
                    description: e.target.value
                  })}
                />
              </div>

              <div>
                <Label>Trigger</Label>
                <select
                  className="w-full border rounded-md px-3 py-2"
                  value={editingWorkflow.trigger.type}
                  onChange={(e) => setEditingWorkflow({
                    ...editingWorkflow,
                    trigger: {
                      ...editingWorkflow.trigger,
                      type: e.target.value as WorkflowTrigger['type']
                    }
                  })}
                >
                  {triggerTypes.map(type => (
                    <option key={type.value} value={type.value}>
                      {type.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <div className="flex justify-between items-center mb-2">
                  <Label>Actions</Label>
                  <Button
                    size="sm"
                    onClick={() => {
                      const newAction: WorkflowAction = {
                        id: Date.now().toString(),
                        type: 'send_email',
                        parameters: {}
                      };
                      setEditingWorkflow({
                        ...editingWorkflow,
                        actions: [...editingWorkflow.actions, newAction]
                      });
                    }}
                  >
                    Add Action
                  </Button>
                </div>
                <div className="space-y-2">
                  {editingWorkflow.actions.map((action, index) => (
                    <div key={action.id} className="border rounded p-3">
                      <div className="flex items-center gap-2">
                        <select
                          className="flex-1 border rounded-md px-3 py-2"
                          value={action.type}
                          onChange={(e) => {
                            const updatedActions = [...editingWorkflow.actions];
                            updatedActions[index] = {
                              ...action,
                              type: e.target.value as WorkflowAction['type']
                            };
                            setEditingWorkflow({
                              ...editingWorkflow,
                              actions: updatedActions
                            });
                          }}
                        >
                          {actionTypes.map(type => (
                            <option key={type.value} value={type.value}>
                              {type.label}
                            </option>
                          ))}
                        </select>
                        <Button
                          size="sm"
                          variant="destructive"
                          onClick={() => {
                            setEditingWorkflow({
                              ...editingWorkflow,
                              actions: editingWorkflow.actions.filter((_, i) => i !== index)
                            });
                          }}
                        >
                          Remove
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex items-center gap-2">
                <Switch
                  checked={editingWorkflow.isActive}
                  onCheckedChange={(checked) => setEditingWorkflow({
                    ...editingWorkflow,
                    isActive: checked
                  })}
                />
                <Label>Active</Label>
              </div>

              <div className="flex justify-end gap-3 pt-4">
                <Button
                  variant="outline"
                  onClick={() => setEditingWorkflow(null)}
                >
                  Cancel
                </Button>
                <Button onClick={saveWorkflow}>
                  Save Workflow
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Email Template Editor Modal */}
      {showTemplateEditor && editingTemplate && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <h2 className="text-xl font-bold mb-4">
              {editingTemplate.id ? 'Edit' : 'Create'} Email Template
            </h2>

            <div className="space-y-4">
              <div>
                <Label>Template Name</Label>
                <Input
                  value={editingTemplate.name}
                  onChange={(e) => setEditingTemplate({
                    ...editingTemplate,
                    name: e.target.value
                  })}
                />
              </div>

              <div>
                <Label>Subject</Label>
                <Input
                  value={editingTemplate.subject}
                  onChange={(e) => setEditingTemplate({
                    ...editingTemplate,
                    subject: e.target.value
                  })}
                  placeholder="Email subject line..."
                />
              </div>

              <div>
                <Label>Body</Label>
                <Textarea
                  value={editingTemplate.body}
                  onChange={(e) => setEditingTemplate({
                    ...editingTemplate,
                    body: e.target.value
                  })}
                  rows={10}
                  placeholder="Email content... Use {{variable}} for dynamic content"
                />
              </div>

              <div>
                <Label>Category</Label>
                <select
                  className="w-full border rounded-md px-3 py-2"
                  value={editingTemplate.category}
                  onChange={(e) => setEditingTemplate({
                    ...editingTemplate,
                    category: e.target.value
                  })}
                >
                  <option value="follow-up">Follow Up</option>
                  <option value="welcome">Welcome</option>
                  <option value="viewing">Viewing</option>
                  <option value="offer">Offer</option>
                  <option value="closing">Closing</option>
                </select>
              </div>

              <div>
                <Label>Available Variables</Label>
                <div className="bg-gray-50 p-3 rounded text-sm">
                  <code>{'{{firstName}}'}</code>, <code>{'{{lastName}}'}</code>, 
                  <code>{'{{propertyAddress}}'}</code>, <code>{'{{propertyPrice}}'}</code>, 
                  <code>{'{{viewingDate}}'}</code>, <code>{'{{agentName}}'}</code>
                </div>
              </div>

              <div className="flex justify-end gap-3 pt-4">
                <Button
                  variant="outline"
                  onClick={() => {
                    setEditingTemplate(null);
                    setShowTemplateEditor(false);
                  }}
                >
                  Cancel
                </Button>
                <Button onClick={saveEmailTemplate}>
                  Save Template
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AutomatedFollowUp;