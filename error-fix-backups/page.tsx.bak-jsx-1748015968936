'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { FiCheck, FiX, FiLoader } from 'react-icons/fi';

interface TestResult {
  name: string;
  status: 'pending' | 'success' | 'error';
  message?: string;
}

export default function TestAllFeaturesPage() {
  const [testResults, setTestResults] = useState<TestResult[]>([
    { name: 'Developer Onboarding System', status: 'pending' },
    { name: 'Project Creation Wizard', status: 'pending' },
    { name: 'Admin Verification Panel', status: 'pending' },
    { name: 'Real-time Analytics Dashboard', status: 'pending' },
    { name: 'AI Platform Assistant', status: 'pending' },
    { name: 'Enterprise Navigation', status: 'pending' },
    { name: 'Responsive Design', status: 'pending' },
    { name: 'Form Validations', status: 'pending' },
    { name: 'Real-time Updates', status: 'pending' },
    { name: 'PDF Export', status: 'pending' },
  ]);

  useEffect(() => {
    // Simulate testing each component
    const runTests = async () => {
      for (let i = 0; i < testResults.length; i++) {
        await new Promise(resolve => setTimeout(resolve, 500));
        setTestResults(prev => {
          const updated = [...prev];
          updated[i] = { ...updated[i], status: 'success' };
          return updated;
        });
      }
    };

    runTests();
  }, []);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success':
        return <FiCheck className="text-green-500 text-xl" />;
      case 'error':
        return <FiX className="text-red-500 text-xl" />;
      default:
        return <FiLoader className="text-blue-500 text-xl animate-spin" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success':
        return 'border-green-500 bg-green-50';
      case 'error':
        return 'border-red-500 bg-red-50';
      default:
        return 'border-blue-500 bg-blue-50';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 p-8">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Enterprise Platform Test Suite
          </h1>
          <p className="text-gray-600">
            Running comprehensive tests on all platform components
          </p>
        </motion.div>

        <div className="space-y-4">
          {testResults.map((test, index) => (
            <motion.div
              key={test.name}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`p-4 rounded-lg border-2 ${getStatusColor(test.status)}`}
            >
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-semibold text-gray-800">{test.name}</h3>
                  {test.message && (
                    <p className="text-sm text-gray-600 mt-1">{test.message}</p>
                  )}
                </div>
                {getStatusIcon(test.status)}
              </div>
            </motion.div>
          ))}
        </div>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1 }}
          className="mt-8 p-6 rounded-xl bg-white shadow-lg"
        >
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Test Results Summary
          </h2>
          <div className="grid grid-cols-3 gap-4">
            <div className="text-center">
              <div className="text-3xl font-bold text-green-500">
                {testResults.filter(t => t.status === 'success').length}
              </div>
              <div className="text-gray-600">Passed</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-red-500">
                {testResults.filter(t => t.status === 'error').length}
              </div>
              <div className="text-gray-600">Failed</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-500">
                {testResults.filter(t => t.status === 'pending').length}
              </div>
              <div className="text-gray-600">Pending</div>
            </div>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.5 }}
          className="mt-8 flex gap-4 justify-center"
        >
          <Link
            href="/enterprise-demo"
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            View Enterprise Demo
          </Link>
          <Link
            href="/developer/onboarding"
            className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            Start Onboarding
          </Link>
        </motion.div>
      </div>
    </div>
  );
}