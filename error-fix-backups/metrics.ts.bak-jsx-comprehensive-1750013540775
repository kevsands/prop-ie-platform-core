import { CloudWatch } from '@aws-sdk/client-cloudwatch';
import { config } from '@/config/env';
import { logInfo, logError } from './logger';

// Initialize CloudWatch client
const cloudwatch = new CloudWatch({
  region: config.aws.region,
  credentials: {
    accessKeyId: config.aws.accessKeyId,
    secretAccessKey: config.aws.secretAccessKey,
  },
});

// Namespace for our custom metrics
const METRICS_NAMESPACE = 'PropIE/Business';

// Business metric types
export interface BusinessMetric {
  name: string;
  value: number;
  unit?: string;
  timestamp?: Date;
  dimensions?: Record<string, string>;
}

// Core business metrics for the Irish property platform
export class BusinessMetrics {
  
  // Property-related metrics
  static async trackPropertyView(propertyId: string, userId?: string, location?: string) {
    await this.sendMetric({
      name: 'PropertyViews',
      value: 1,
      unit: 'Count',
      dimensions: {
        PropertyId: propertyId,
        Location: location || 'Unknown',
        UserType: userId ? 'Authenticated' : 'Anonymous'
      }
    });
  }

  static async trackPropertySearch(searchTerm: string, resultCount: number, location?: string) {
    await this.sendMetric({
      name: 'PropertySearches',
      value: 1,
      unit: 'Count',
      dimensions: {
        SearchTerm: searchTerm.substring(0, 50), // Limit length
        Location: location || 'Unknown',
        HasResults: resultCount > 0 ? 'true' : 'false'
      }
    });

    await this.sendMetric({
      name: 'SearchResultCount',
      value: resultCount,
      unit: 'Count',
      dimensions: {
        Location: location || 'Unknown'
      }
    });
  }

  // User journey metrics
  static async trackUserRegistration(userType: string, source?: string) {
    await this.sendMetric({
      name: 'UserRegistrations',
      value: 1,
      unit: 'Count',
      dimensions: {
        UserType: userType, // 'buyer', 'developer', 'agent', etc.
        Source: source || 'direct'
      }
    });
  }

  static async trackLoginAttempt(success: boolean, method: string) {
    await this.sendMetric({
      name: 'LoginAttempts',
      value: 1,
      unit: 'Count',
      dimensions: {
        Success: success.toString(),
        Method: method // 'credentials', 'google', 'azure'
      }
    });
  }

  // Transaction metrics (core business value)
  static async trackPropertyReservation(propertyId: string, amount: number, buyerType: string) {
    await this.sendMetric({
      name: 'PropertyReservations',
      value: 1,
      unit: 'Count',
      dimensions: {
        PropertyId: propertyId,
        BuyerType: buyerType, // 'first-time', 'investor', 'upgrader'
        AmountRange: this.getAmountRange(amount)
      }
    });

    await this.sendMetric({
      name: 'ReservationValue',
      value: amount,
      unit: 'None', // Euro amount
      dimensions: {
        BuyerType: buyerType
      }
    });
  }

  static async trackTransactionProgress(transactionId: string, stage: string, daysFromStart: number) {
    await this.sendMetric({
      name: 'TransactionProgress',
      value: 1,
      unit: 'Count',
      dimensions: {
        Stage: stage, // 'reserved', 'legal-started', 'mortgage-approved', 'completed'
        TransactionId: transactionId
      }
    });

    await this.sendMetric({
      name: 'TransactionDuration',
      value: daysFromStart,
      unit: 'Count',
      dimensions: {
        Stage: stage
      }
    });
  }

  // Help-to-Buy (HTB) specific metrics - critical for Irish market
  static async trackHTBApplication(status: string, amount: number, region: string) {
    await this.sendMetric({
      name: 'HTBApplications',
      value: 1,
      unit: 'Count',
      dimensions: {
        Status: status, // 'submitted', 'approved', 'rejected'
        Region: region,
        AmountRange: this.getAmountRange(amount)
      }
    });

    if (status === 'approved') {
      await this.sendMetric({
        name: 'HTBApprovedValue',
        value: amount,
        unit: 'None',
        dimensions: {
          Region: region
        }
      });
    }
  }

  // Developer portal metrics
  static async trackDeveloperActivity(developerId: string, action: string, projectId?: string) {
    await this.sendMetric({
      name: 'DeveloperActivity',
      value: 1,
      unit: 'Count',
      dimensions: {
        DeveloperId: developerId,
        Action: action, // 'project-created', 'unit-added', 'sales-updated'
        HasProject: projectId ? 'true' : 'false'
      }
    });
  }

  static async trackSalesMetrics(developerId: string, unitsSold: number, totalValue: number) {
    await this.sendMetric({
      name: 'UnitsSold',
      value: unitsSold,
      unit: 'Count',
      dimensions: {
        DeveloperId: developerId
      }
    });

    await this.sendMetric({
      name: 'SalesValue',
      value: totalValue,
      unit: 'None',
      dimensions: {
        DeveloperId: developerId
      }
    });
  }

  // Platform performance metrics
  static async trackAPIPerformance(endpoint: string, duration: number, statusCode: number) {
    await this.sendMetric({
      name: 'APIResponseTime',
      value: duration,
      unit: 'Milliseconds',
      dimensions: {
        Endpoint: endpoint,
        StatusCode: statusCode.toString()
      }
    });

    await this.sendMetric({
      name: 'APIRequests',
      value: 1,
      unit: 'Count',
      dimensions: {
        Endpoint: endpoint,
        StatusCode: statusCode.toString(),
        Success: statusCode < 400 ? 'true' : 'false'
      }
    });
  }

  // Revenue and financial metrics
  static async trackRevenue(source: string, amount: number, currency = 'EUR') {
    await this.sendMetric({
      name: 'Revenue',
      value: amount,
      unit: 'None',
      dimensions: {
        Source: source, // 'developer-subscription', 'transaction-fee', 'premium-listing'
        Currency: currency
      }
    });
  }

  // Error and support metrics
  static async trackUserError(errorType: string, page: string, userId?: string) {
    await this.sendMetric({
      name: 'UserErrors',
      value: 1,
      unit: 'Count',
      dimensions: {
        ErrorType: errorType,
        Page: page,
        UserType: userId ? 'Authenticated' : 'Anonymous'
      }
    });
  }

  static async trackSupportRequest(category: string, priority: string, userId: string) {
    await this.sendMetric({
      name: 'SupportRequests',
      value: 1,
      unit: 'Count',
      dimensions: {
        Category: category,
        Priority: priority,
        UserId: userId
      }
    });
  }

  // Helper methods
  private static getAmountRange(amount: number): string {
    if (amount < 200000) return 'Under-200k';
    if (amount < 400000) return '200k-400k';
    if (amount < 600000) return '400k-600k';
    if (amount < 800000) return '600k-800k';
    return 'Over-800k';
  }

  // Core method to send metrics to CloudWatch
  private static async sendMetric(metric: BusinessMetric) {
    try {
      const params = {
        Namespace: METRICS_NAMESPACE,
        MetricData: [
          {
            MetricName: metric.name,
            Value: metric.value,
            Unit: metric.unit || 'Count',
            Timestamp: metric.timestamp || new Date(),
            Dimensions: metric.dimensions 
              ? Object.entries(metric.dimensions).map(([Name, Value]) => ({ Name, Value }))
              : undefined,
          },
        ],
      };

      await cloudwatch.putMetricData(params);
      
      logInfo(`Business metric sent: ${metric.name}`, {
        value: metric.value,
        dimensions: metric.dimensions
      });
      
    } catch (error) {
      logError('Failed to send business metric', error as Error, {
        metricName: metric.name,
        metricValue: metric.value
      });
    }
  }

  // Batch metrics for efficiency
  static async sendBatchMetrics(metrics: BusinessMetric[]) {
    try {
      const metricData = metrics.map(metric => ({
        MetricName: metric.name,
        Value: metric.value,
        Unit: metric.unit || 'Count',
        Timestamp: metric.timestamp || new Date(),
        Dimensions: metric.dimensions
          ? Object.entries(metric.dimensions).map(([Name, Value]) => ({ Name, Value }))
          : undefined,
      }));

      // CloudWatch allows max 20 metrics per batch
      const batches = [];
      for (let i = 0; i < metricData.length; i += 20) {
        batches.push(metricData.slice(i, i + 20));
      }

      for (const batch of batches) {
        await cloudwatch.putMetricData({
          Namespace: METRICS_NAMESPACE,
          MetricData: batch,
        });
      }

      logInfo(`Batch business metrics sent: ${metrics.length} metrics`);
      
    } catch (error) {
      logError('Failed to send batch business metrics', error as Error, {
        metricCount: metrics.length
      });
    }
  }
}

// Custom hooks for React components
export const useBusinessMetrics = () => {
  return {
    trackPropertyView: BusinessMetrics.trackPropertyView,
    trackPropertySearch: BusinessMetrics.trackPropertySearch,
    trackUserRegistration: BusinessMetrics.trackUserRegistration,
    trackHTBApplication: BusinessMetrics.trackHTBApplication,
    trackUserError: BusinessMetrics.trackUserError,
  };
};

// Export for direct usage
export { BusinessMetrics };
export default BusinessMetrics;