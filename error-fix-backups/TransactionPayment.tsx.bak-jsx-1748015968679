/**
 * Transaction Payment Component
 * Handles payment processing and history for property transactions
 */

'use client';

import React, { useState, useEffect } from 'react';
import { 
  CreditCard, 
  DollarSign, 
  CheckCircle, 
  AlertCircle, 
  Clock, 
  Download, 
  ChevronDown, 
  ChevronUp,
  ArrowRight,
  Building, // Changed from Buildings to Building
  Receipt
} from 'lucide-react';

interface TransactionPaymentProps {
  transactionId: string;
}

interface PaymentOption {
  id: string;
  name: string;
  description: string;
  type: string;
  amount: number;
  dueDate?: string;
  required: boolean;
  instructions?: string;
  accountDetails?: {
    bank: string;
    accountName: string;
    iban: string;
    bic: string;
    reference: string;
  };
}

interface PaymentMethod {
  id: string;
  name: string;
  description: string;
  fee?: string;
  supportedCards?: string[];
  instructions?: string;
  accountDetails?: any;
}

interface Payment {
  id: string;
  transactionId: string;
  type: string;
  amount: number;
  method: string;
  status: string;
  reference: string;
  description?: string;
  dueDate?: string;
  paidDate?: string;
  clearedDate?: string;
  receiptNumber?: string;
  createdAt: string;
}

export default function TransactionPayment({ transactionId }: TransactionPaymentProps) {
  const [loading, setLoading] = useState(true);
  const [paymentOptions, setPaymentOptions] = useState<PaymentOption[]>([]);
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [pendingPayments, setPendingPayments] = useState<Payment[]>([]);
  const [completedPayments, setCompletedPayments] = useState<Payment[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [selectedPayment, setSelectedPayment] = useState<PaymentOption | null>(null);
  const [selectedMethod, setSelectedMethod] = useState<string>('');
  const [showPaymentForm, setShowPaymentForm] = useState(false);
  const [paymentProcessing, setPaymentProcessing] = useState(false);
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  const [transactionInfo, setTransactionInfo] = useState<any>(null);

  useEffect(() => {
    fetchPaymentInfo();
  }, [transactionId]);

  const fetchPaymentInfo = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/transactions/${transactionId}/payment-process`);
      if (!response.ok) throw new Error('Failed to fetch payment information');
      
      const data = await response.json();
      setTransactionInfo({
        transactionId: data.transactionId,
        status: data.transactionStatus,
        stage: data.transactionStage,
        agreedPrice: data.agreedPrice,
        totalPaid: data.totalPaid,
        outstandingBalance: data.outstandingBalance
      });
      
      setPaymentMethods(data.paymentMethods || []);
      setPendingPayments(data.pendingPayments || []);
      setCompletedPayments(data.completedPayments || []);
      
      // Set next required payment if available
      if (data.nextRequiredPayment) {
        setPaymentOptions([data.nextRequiredPayment]);
        setSelectedPayment(data.nextRequiredPayment);
      }
    } catch (err) {
      setError((err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  const handleInitiatePayment = () => {
    if (!selectedPayment) return;
    setShowPaymentForm(true);
  };

  const handleMethodChange = (methodId: string) => {
    setSelectedMethod(methodId);
  };

  const handleSubmitPayment = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    if (!selectedPayment || !selectedMethod) return;
    
    try {
      setPaymentProcessing(true);
      
      // Create the payment via API
      const response = await fetch(`/api/transactions/${transactionId}/payment-process`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: selectedPayment.type,
          amount: selectedPayment.amount,
          method: selectedMethod,
          status: 'INITIATED'
        }),
      });
      
      if (!response.ok) throw new Error('Failed to process payment');
      
      const result = await response.json();
      
      // Handle success
      setPaymentSuccess(true);
      setShowPaymentForm(false);
      
      // Refresh payment info after a short delay
      setTimeout(() => {
        fetchPaymentInfo();
        setPaymentSuccess(false);
        setPaymentProcessing(false);
      }, 2000);
      
    } catch (err) {
      setError((err as Error).message);
      setPaymentProcessing(false);
    }
  };

  const handleDownloadReceipt = async (paymentId: string) => {
    try {
      const response = await fetch(`/api/transactions/${transactionId}/payments/receipt?paymentId=${paymentId}`);
      if (!response.ok) throw new Error('Failed to generate receipt');
      
      const receiptData = await response.json();
      
      // In a real implementation, you would generate and download a PDF
      // For this example, we'll just show an alert
      alert(`Receipt generated: ${receiptData.receiptNumber}`);
      
    } catch (err) {
      console.error('Error generating receipt:', err);
    }
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center gap-3">
            <AlertCircle className="w-5 h-5 text-red-500" />
            <p className="text-red-700">Error: {error}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-900">Payments & Financial</h3>
        <DollarSign className="w-5 h-5 text-gray-400" />
      </div>

      {/* Financial Summary */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div className="bg-gray-50 rounded-lg p-4">
          <p className="text-sm text-gray-600">Agreed Price</p>
          <p className="text-2xl font-bold text-gray-900">
            €{transactionInfo?.agreedPrice?.toLocaleString() || 'N/A'}
          </p>
        </div>
        
        <div className="bg-gray-50 rounded-lg p-4">
          <p className="text-sm text-gray-600">Total Paid</p>
          <p className="text-2xl font-bold text-green-600">
            €{transactionInfo?.totalPaid?.toLocaleString() || '0'}
          </p>
        </div>
        
        <div className="bg-gray-50 rounded-lg p-4">
          <p className="text-sm text-gray-600">Outstanding Balance</p>
          <p className="text-2xl font-bold text-blue-600">
            €{transactionInfo?.outstandingBalance?.toLocaleString() || transactionInfo?.agreedPrice?.toLocaleString() || 'N/A'}
          </p>
        </div>
      </div>

      {/* Payment Status Message */}
      {paymentSuccess && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <div className="flex items-center gap-3">
            <CheckCircle className="w-5 h-5 text-green-500" />
            <div>
              <p className="font-medium text-green-700">Payment initiated successfully!</p>
              <p className="text-sm text-green-600">The payment process has started. You will receive updates as it progresses.</p>
            </div>
          </div>
        </div>
      )}

      {/* Next Payment Section */}
      {selectedPayment && (
        <div className="border rounded-lg overflow-hidden mb-8">
          <div className="bg-blue-50 p-4 border-b">
            <h4 className="font-semibold text-gray-900">Next Payment Required</h4>
          </div>
          
          <div className="p-4">
            <div className="flex justify-between items-center mb-4">
              <div>
                <p className="font-medium text-gray-900">{selectedPayment.name || getPaymentTypeLabel(selectedPayment.type)}</p>
                <p className="text-sm text-gray-600">{selectedPayment.description || 'Required payment for transaction progress'}</p>
                {selectedPayment.dueDate && (
                  <p className="text-sm text-red-600 mt-1">
                    Due by: {new Date(selectedPayment.dueDate).toLocaleDateString()}
                  </p>
                )}
              </div>
              <div className="text-right">
                <p className="text-2xl font-bold text-gray-900">€{selectedPayment.amount?.toLocaleString()}</p>
                {selectedPayment.required && (
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                    Required
                  </span>
                )}
              </div>
            </div>
            
            {/* Payment Method Selection & Form */}
            {showPaymentForm ? (
              <form onSubmit={handleSubmitPayment} className="mt-4 border rounded-lg p-4">
                <h5 className="font-medium text-gray-900 mb-4">Select Payment Method</h5>
                
                <div className="space-y-3 mb-6">
                  {paymentMethods.map((method) => (
                    <div key={method.id} className="flex items-center">
                      <input
                        type="radio"
                        id={`method-${method.id}`}
                        name="paymentMethod"
                        value={method.id}
                        checked={selectedMethod === method.id}
                        onChange={() => handleMethodChange(method.id)}
                        className="mr-3"
                        required
                      />
                      <label htmlFor={`method-${method.id}`} className="flex items-center gap-2">
                        {method.id === 'BANK_TRANSFER' ? (
                          <Building className="w-5 h-5 text-blue-600" />
                        ) : method.id === 'CREDIT_CARD' ? (
                          <CreditCard className="w-5 h-5 text-purple-600" />
                        ) : (
                          <CreditCard className="w-5 h-5 text-green-600" />
                        )}
                        <div>
                          <p className="font-medium text-gray-900">{method.name}</p>
                          <p className="text-sm text-gray-600">{method.description}</p>
                          {method.fee && <p className="text-xs text-gray-500">Fee: {method.fee}</p>}
                        </div>
                      </label>
                    </div>
                  ))}
                </div>
                
                {/* Bank Transfer Details */}
                {selectedMethod === 'BANK_TRANSFER' && (
                  <div className="bg-gray-50 p-4 rounded-lg mb-6">
                    <h6 className="font-medium text-gray-900 mb-2">Bank Transfer Details</h6>
                    <p className="text-sm text-gray-600 mb-3">
                      Please make a transfer to the following account. Include the reference number in your payment.
                    </p>
                    
                    <div className="space-y-2 text-sm">
                      <p><span className="font-medium">Bank:</span> {paymentMethods[0]?.accountDetails?.bank}</p>
                      <p><span className="font-medium">Account Name:</span> {paymentMethods[0]?.accountDetails?.accountName}</p>
                      <p><span className="font-medium">IBAN:</span> {paymentMethods[0]?.accountDetails?.iban}</p>
                      <p><span className="font-medium">BIC:</span> {paymentMethods[0]?.accountDetails?.bic}</p>
                      <p><span className="font-medium">Reference:</span> {paymentMethods[0]?.accountDetails?.reference}</p>
                    </div>
                  </div>
                )}
                
                {/* Credit/Debit Card Form */}
                {(selectedMethod === 'CREDIT_CARD' || selectedMethod === 'DEBIT_CARD') && (
                  <div className="space-y-4 mb-6">
                    <div>
                      <label htmlFor="cardNumber" className="block text-sm font-medium text-gray-700 mb-1">Card Number</label>
                      <input
                        type="text"
                        id="cardNumber"
                        placeholder="1234 5678 9012 3456"
                        className="w-full px-3 py-2 border rounded-md"
                        required
                      />
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label htmlFor="expiry" className="block text-sm font-medium text-gray-700 mb-1">Expiry Date</label>
                        <input
                          type="text"
                          id="expiry"
                          placeholder="MM/YY"
                          className="w-full px-3 py-2 border rounded-md"
                          required
                        />
                      </div>
                      <div>
                        <label htmlFor="cvv" className="block text-sm font-medium text-gray-700 mb-1">CVV</label>
                        <input
                          type="text"
                          id="cvv"
                          placeholder="123"
                          className="w-full px-3 py-2 border rounded-md"
                          required
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label htmlFor="cardName" className="block text-sm font-medium text-gray-700 mb-1">Name on Card</label>
                      <input
                        type="text"
                        id="cardName"
                        placeholder="John Smith"
                        className="w-full px-3 py-2 border rounded-md"
                        required
                      />
                    </div>
                  </div>
                )}
                
                {/* Submit Buttons */}
                <div className="flex gap-3">
                  <button
                    type="button"
                    onClick={() => setShowPaymentForm(false)}
                    className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                    disabled={paymentProcessing}
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                    disabled={!selectedMethod || paymentProcessing}
                  >
                    {paymentProcessing ? (
                      <div className="flex items-center gap-2">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        Processing...
                      </div>
                    ) : (
                      `Pay €${selectedPayment.amount.toLocaleString()}`
                    )}
                  </button>
                </div>
              </form>
            ) : (
              <button
                onClick={handleInitiatePayment}
                className="mt-4 w-full flex items-center justify-center gap-2 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <CreditCard className="w-5 h-5" />
                Make Payment
              </button>
            )}
          </div>
        </div>
      )}

      {/* Pending Payments */}
      {pendingPayments.length > 0 && (
        <div className="border rounded-lg overflow-hidden mb-8">
          <div className="bg-yellow-50 p-4 border-b">
            <h4 className="font-semibold text-gray-900">Pending Payments</h4>
          </div>
          
          <div className="divide-y">
            {pendingPayments.map((payment) => (
              <div key={payment.id} className="p-4">
                <div className="flex justify-between items-center">
                  <div className="flex items-center gap-3">
                    <Clock className="w-5 h-5 text-yellow-500" />
                    <div>
                      <p className="font-medium text-gray-900">{getPaymentTypeLabel(payment.type)}</p>
                      <p className="text-sm text-gray-600">
                        {payment.description || `Payment reference: ${payment.reference}`}
                      </p>
                      <div className="flex items-center gap-2 mt-1">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeColor(payment.status)}`}>
                          {getStatusLabel(payment.status)}
                        </span>
                        <span className="text-xs text-gray-500">
                          Method: {getPaymentMethodLabel(payment.method)}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-gray-900">€{payment.amount.toLocaleString()}</p>
                    <p className="text-xs text-gray-500">
                      Created: {new Date(payment.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Completed Payments */}
      {completedPayments.length > 0 && (
        <div className="border rounded-lg overflow-hidden">
          <div className="bg-green-50 p-4 border-b">
            <h4 className="font-semibold text-gray-900">Completed Payments</h4>
          </div>
          
          <div className="divide-y">
            {completedPayments.map((payment) => (
              <div key={payment.id} className="p-4">
                <div className="flex justify-between items-center">
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                    <div>
                      <p className="font-medium text-gray-900">{getPaymentTypeLabel(payment.type)}</p>
                      <p className="text-sm text-gray-600">
                        {payment.description || `Payment reference: ${payment.reference}`}
                      </p>
                      <div className="flex items-center gap-2 mt-1">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          Completed
                        </span>
                        <span className="text-xs text-gray-500">
                          Method: {getPaymentMethodLabel(payment.method)}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right flex flex-col items-end">
                    <p className="font-bold text-gray-900">€{payment.amount.toLocaleString()}</p>
                    <p className="text-xs text-gray-500">
                      Paid: {payment.paidDate ? new Date(payment.paidDate).toLocaleDateString() : 'N/A'}
                    </p>
                    <button
                      onClick={() => handleDownloadReceipt(payment.id)}
                      className="mt-2 text-blue-600 hover:text-blue-700 text-xs flex items-center gap-1"
                    >
                      <Receipt className="w-3 h-3" /> 
                      Download Receipt
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* No Payments */}
      {!selectedPayment && pendingPayments.length === 0 && completedPayments.length === 0 && (
        <div className="text-center py-8">
          <DollarSign className="w-12 h-12 text-gray-300 mx-auto mb-3" />
          <p className="font-medium text-gray-700">No payments required at this time</p>
          <p className="text-sm text-gray-500">
            You will be notified when a payment is required for this transaction
          </p>
        </div>
      )}
    </div>
  );
}

// Helper functions
function getPaymentTypeLabel(type: string): string {
  const labels: Record<string, string> = {
    'BOOKING_DEPOSIT': 'Booking Deposit',
    'CONTRACT_DEPOSIT': 'Contract Deposit',
    'STAGE_PAYMENT': 'Stage Payment',
    'FINAL_PAYMENT': 'Final Payment',
    'CUSTOMIZATION_PAYMENT': 'Customization Payment',
    'LEGAL_FEE': 'Legal Fee',
    'STAMP_DUTY': 'Stamp Duty',
    'OTHER_FEE': 'Other Fee',
    'REFUND': 'Refund'
  };
  return labels[type] || type;
}

function getPaymentMethodLabel(method: string): string {
  const labels: Record<string, string> = {
    'BANK_TRANSFER': 'Bank Transfer',
    'CREDIT_CARD': 'Credit Card',
    'DEBIT_CARD': 'Debit Card',
    'CASH': 'Cash',
    'CHEQUE': 'Cheque',
    'MORTGAGE_DRAWDOWN': 'Mortgage Drawdown',
    'OTHER': 'Other Method'
  };
  return labels[method] || method;
}

function getStatusLabel(status: string): string {
  const labels: Record<string, string> = {
    'PENDING': 'Pending',
    'PROCESSING': 'Processing',
    'COMPLETED': 'Completed',
    'FAILED': 'Failed',
    'CANCELLED': 'Cancelled',
    'REFUNDED': 'Refunded',
    'PARTIALLY_REFUNDED': 'Partially Refunded'
  };
  return labels[status] || status;
}

function getStatusBadgeColor(status: string): string {
  const colors: Record<string, string> = {
    'PENDING': 'bg-yellow-100 text-yellow-800',
    'PROCESSING': 'bg-blue-100 text-blue-800',
    'COMPLETED': 'bg-green-100 text-green-800',
    'FAILED': 'bg-red-100 text-red-800',
    'CANCELLED': 'bg-gray-100 text-gray-800',
    'REFUNDED': 'bg-purple-100 text-purple-800',
    'PARTIALLY_REFUNDED': 'bg-indigo-100 text-indigo-800'
  };
  return colors[status] || 'bg-gray-100 text-gray-800';
}