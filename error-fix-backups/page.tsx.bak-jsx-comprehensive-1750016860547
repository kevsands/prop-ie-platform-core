'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Users, 
  UserPlus, 
  Building, 
  Shield, 
  Clock, 
  CheckCircle, 
  AlertTriangle,
  Calendar,
  Search,
  Filter,
  Download,
  Upload,
  Mail,
  Phone,
  MapPin,
  Award,
  TrendingUp,
  Activity,
  Eye,
  Edit,
  MoreHorizontal,
  Star,
  DollarSign,
  UserCheck,
  UserX,
  Briefcase,
  Settings,
  MessageSquare,
  FileText,
  Zap,
  BarChart3,
  Target,
  Layers,
  Calculator,
  PieChart,
  LineChart,
  Coins,
  Clock4,
  Hammer,
  HardHat,
  Ruler,
  Wrench
} from 'lucide-react';
import Link from 'next/link';
import { 
  REAL_DEVELOPMENT_PHASES, 
  FITZGERALD_GARDENS_FINANCIALS,
  RealTeamMember,
  RealContractor,
  SCurveCalculator,
  CashFlowCalculator,
  PhaseAssignment,
  PaymentMilestone
} from '@/lib/propertyDevelopmentLogic';

// Real Team Data for Fitzgerald Gardens
const REAL_TEAM_MEMBERS: RealTeamMember[] = [
  {
    id: 'tm-001',
    name: 'Sarah O\'Brien',
    role: 'Project Director', 
    department: 'Development',
    annual_salary: 185000, // €185K salary
    daily_rate: 950, // €950/day (€185K / 195 working days)
    current_phase_assignments: [
      {
        phase_id: 8, // M&E - currently active
        start_date: '2025-05-01',
        end_date: '2025-08-15',
        allocation_percentage: 40, // 40% of time
        role_in_phase: 'Project Oversight',
        budget_allocation: 45600 // 16 weeks * 2 days/week * €950
      },
      {
        phase_id: 13, // Sales - running parallel
        start_date: '2024-09-01',
        end_date: '2026-03-31',
        allocation_percentage: 30, // 30% of time
        role_in_phase: 'Sales Strategy',
        budget_allocation: 89100 // 78 weeks * 1.5 days/week * €950
      }
    ],
    start_date: '2022-01-15',
    project_allocation_percentage: 70, // 70% of total time on Fitzgerald Gardens
    cost_center: 'Development-Core',
    certifications: ['PMP', 'PRINCE2', 'RICS'],
    last_performance_review: 4.8
  },
  {
    id: 'tm-002',
    name: 'Michael Chen',
    role: 'Lead Architect',
    department: 'Design',
    annual_salary: 125000, // €125K salary
    daily_rate: 640, // €640/day
    current_phase_assignments: [
      {
        phase_id: 10, // Internal Fit-Out - upcoming
        start_date: '2025-09-01',
        end_date: '2025-12-15',
        allocation_percentage: 60, // 60% of time
        role_in_phase: 'Design Coordination',
        budget_allocation: 35840 // 14 weeks * 4 days/week * €640
      }
    ],
    start_date: '2021-06-01',
    project_allocation_percentage: 60, // 60% time on Fitzgerald Gardens
    cost_center: 'Design-Architecture',
    certifications: ['RIAI', 'ARB', 'LEED AP'],
    last_performance_review: 4.6
  },
  {
    id: 'tm-003',
    name: 'Emma Thompson',
    role: 'Site Manager',
    department: 'Construction',
    annual_salary: 95000, // €95K salary
    daily_rate: 485, // €485/day
    current_phase_assignments: [
      {
        phase_id: 8, // M&E - currently active
        start_date: '2025-05-01',
        end_date: '2025-08-15',
        allocation_percentage: 80, // 80% of time - on-site daily
        role_in_phase: 'Site Supervision',
        budget_allocation: 49984 // 16 weeks * 6.4 days/week * €485
      }
    ],
    start_date: '2022-03-20',
    project_allocation_percentage: 95, // 95% time on Fitzgerald Gardens
    cost_center: 'Construction-Management',
    certifications: ['SMSTS', 'CSCS', 'First Aid'],
    last_performance_review: 4.4
  },
  {
    id: 'tm-004',
    name: 'James Murphy',
    role: 'Commercial Manager',
    department: 'Commercial',
    annual_salary: 135000, // €135K salary
    daily_rate: 690, // €690/day
    current_phase_assignments: [
      {
        phase_id: 8, // M&E - cost control
        start_date: '2025-05-01',
        end_date: '2025-08-15',
        allocation_percentage: 25, // 25% of time
        role_in_phase: 'Cost Control',
        budget_allocation: 17940 // 16 weeks * 1.25 days/week * €690
      },
      {
        phase_id: 13, // Sales - commercial
        start_date: '2024-09-01',
        end_date: '2026-03-31',
        allocation_percentage: 45, // 45% of time
        role_in_phase: 'Sales Commercial',
        budget_allocation: 135720 // 78 weeks * 2.8 days/week * €690
      }
    ],
    start_date: '2020-09-10',
    project_allocation_percentage: 70, // 70% time on Fitzgerald Gardens
    cost_center: 'Commercial',
    certifications: ['MRICS', 'CPA', 'MBA'],
    last_performance_review: 4.7
  }
];

// Real Contractor Data
const REAL_CONTRACTORS: RealContractor[] = [
  {
    id: 'con-001',
    company_name: 'Murphy Construction Ltd',
    contact_person: 'David Murphy',
    specialty: 'Main_Contractor',
    contract_value: 14500000, // €14.5M main contract
    phase_assignments: [6, 7, 8910], // Foundations through fit-out
    payment_schedule: [
      {
        milestone_name: 'Foundation Complete',
        target_date: '2025-03-31',
        payment_amount: 2175000, // 15% of contract
        payment_percentage: 15,
        requirements: ['Foundation Pour Complete', 'Quality Tests Passed'],
        certified_date: '2025-03-28',
        paid_date: '2025-04-15',
        status: 'paid'
      },
      {
        milestone_name: 'Frame Complete',
        target_date: '2025-07-31',
        payment_amount: 4350000, // 30% of contract
        payment_percentage: 30,
        requirements: ['Structural Frame Complete', 'Block Work Complete'],
        status: 'pending'
      },
      {
        milestone_name: 'M&E First Fix',
        target_date: '2025-08-15',
        payment_amount: 2175000, // 15% of contract
        payment_percentage: 15,
        requirements: ['M&E First Fix Complete', 'Testing Complete'],
        status: 'pending'
      }
    ],
    retention_percentage: 5, // 5% retention
    performance_bond_value: 1450000, // 10% of contract
    insurance_value: 10000000, // €10M public liability
    start_date: '2025-02-15',
    completion_date: '2025-12-20',
    current_s_curve_position: 42, // 42% complete
    monthly_payment_cap: 1800000, // €1.8M max per month
    quality_rating: 4.2,
    safety_rating: 4.6,
    timeliness_rating: 3.8 // Slightly behind schedule
  },
  {
    id: 'con-002', 
    company_name: 'Celtic Electrical Services',
    contact_person: 'Siobhan O\'Connell',
    specialty: 'Electrical',
    contract_value: 1850000, // €1.85M electrical contract
    phase_assignments: [8], // M&E phase only
    payment_schedule: [
      {
        milestone_name: 'First Fix Complete',
        target_date: '2025-06-30',
        payment_amount: 740000, // 40% of contract
        payment_percentage: 40,
        requirements: ['First Fix Installation', 'Containment Systems'],
        status: 'pending'
      },
      {
        milestone_name: 'Second Fix Complete',
        target_date: '2025-08-15',
        payment_amount: 555000, // 30% of contract  
        payment_percentage: 30,
        requirements: ['Final Installation', 'Testing & Commissioning'],
        status: 'pending'
      }
    ],
    retention_percentage: 3,
    performance_bond_value: 185000,
    insurance_value: 5000000,
    start_date: '2025-05-15',
    completion_date: '2025-08-30',
    current_s_curve_position: 15, // 15% complete - just started
    monthly_payment_cap: 450000,
    quality_rating: 4.8,
    safety_rating: 4.9,
    timeliness_rating: 4.7
  },
  {
    id: 'con-003',
    company_name: 'Premier Mechanical Services',
    contact_person: 'Tom Bradley',
    specialty: 'Mechanical',
    contract_value: 1650000, // €1.65M mechanical contract
    phase_assignments: [8], // M&E phase only
    payment_schedule: [
      {
        milestone_name: 'Plant Installation',
        target_date: '2025-07-15',
        payment_amount: 660000, // 40% of contract
        payment_percentage: 40,
        requirements: ['Plant Room Complete', 'Ductwork Installation'],
        status: 'pending'
      }
    ],
    retention_percentage: 3,
    performance_bond_value: 165000,
    insurance_value: 5000000,
    start_date: '2025-05-01',
    completion_date: '2025-08-15',
    current_s_curve_position: 22, // 22% complete
    monthly_payment_cap: 400000,
    quality_rating: 4.5,
    safety_rating: 4.7,
    timeliness_rating: 4.3
  }
];

export default function RealEnterpriseTeamPage() {
  const [activeTabsetActiveTab] = useState('dashboard');
  const [selectedPhasesetSelectedPhase] = useState<number | null>(null);
  const [teamMembers] = useState<RealTeamMember[]>(REAL_TEAM_MEMBERS);
  const [contractors] = useState<RealContractor[]>(REAL_CONTRACTORS);
  const [loadingsetLoading] = useState(false);

  // Calculate real current project status
  const getCurrentPhaseStatus = (phaseId: number) => {
    const currentDate = new Date();
    const projectStartDate = new Date('2024-01-15'); // Fitzgerald Gardens start
    
    // Phase 6-7: Completed
    if (phaseId <= 7) return 'completed';
    // Phase 8: In Progress (M&E)
    if (phaseId === 8) return 'in-progress';
    // Phase 9+: Not Started
    return 'not-started';
  };

  const calculateRealPhaseProgress = (phaseId: number) => {
    const currentDate = new Date();
    
    switch (phaseId) {
      case 1: case 2: case 3: case 4: case 5: case 6: case 7:
        return 100; // Completed phases
      case 8:
        // M&E phase - calculate based on contractor S-curve
        const meContractors = contractors.filter(c => c.phase_assignments.includes(8));
        const avgProgress = meContractors.reduce((sumc) => sum + c.current_s_curve_position0) / meContractors.length;
        return Math.round(avgProgress);
      default:
        return 0; // Future phases
    }
  };

  const calculateRealTeamCosts = () => {
    let totalMonthlyCost = 0;
    let totalProjectAllocation = 0;
    
    teamMembers.forEach(member => {
      // Calculate monthly cost based on daily rate and allocation
      const workingDaysPerMonth = 21;
      const memberMonthlyCost = (member.daily_rate * workingDaysPerMonth * member.project_allocation_percentage) / 100;
      totalMonthlyCost += memberMonthlyCost;
      totalProjectAllocation += member.project_allocation_percentage;
    });

    const totalContractValue = contractors.reduce((sumc) => sum + c.contract_value0);
    const totalMonthlyContractorPayments = contractors.reduce((sumc) => sum + c.monthly_payment_cap0);
    
    return {
      teamMonthlyCost: Math.round(totalMonthlyCost),
      avgProjectAllocation: Math.round(totalProjectAllocation / teamMembers.length),
      totalContractValue,
      monthlyContractorPayments: totalMonthlyContractorPayments,
      totalProjectCost: FITZGERALD_GARDENS_FINANCIALS.total_development_cost
    };
  };

  const getActivePhases = () => {
    return REAL_DEVELOPMENT_PHASES.filter(phase => {
      const status = getCurrentPhaseStatus(phase.id);
      return status === 'in-progress';
    });
  };

  const calculateProjectProgress = () => {
    // Calculate overall project progress based on completed phases
    const completedPhases = REAL_DEVELOPMENT_PHASES.filter(phase => 
      getCurrentPhaseStatus(phase.id) === 'completed'
    ).length;
    
    const inProgressPhases = REAL_DEVELOPMENT_PHASES.filter(phase =>
      getCurrentPhaseStatus(phase.id) === 'in-progress'
    );
    
    let inProgressWeight = 0;
    inProgressPhases.forEach(phase => {
      const progress = calculateRealPhaseProgress(phase.id);
      inProgressWeight += (progress / 100);
    });
    
    return Math.round(((completedPhases + inProgressWeight) / REAL_DEVELOPMENT_PHASES.length) * 100);
  };

  if (loading) {
    return (
      <div className="container mx-auto py-8">
        <div className="flex items-center justify-center h-60">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </div>
    );
  }

  const realMetrics = calculateRealTeamCosts();
  const overallProgress = calculateProjectProgress();
  const activePhases = getActivePhases();

  return (
    <div className="container mx-auto py-8">
      {/* Real Enterprise Header */}
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold mb-2">Fitzgerald Gardens Team Management</h1>
          <p className="text-gray-500">
            €{(FITZGERALD_GARDENS_FINANCIALS.total_development_value / 1000000).toFixed(1)}M Development • 
            €{(realMetrics.totalContractValue / 1000000).toFixed(1)}M Contract Value • 
            {overallProgress}% Complete
          </p>
        </div>
        <div className="flex space-x-3">
          <Button variant="outline">
            <Upload className="w-4 h-4 mr-2" />
            Import Excel Data
          </Button>
          <Button variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Export S-Curves
          </Button>
          <Button>
            <UserPlus className="w-4 h-4 mr-2" />
            Add Team Member
          </Button>
        </div>
      </div>

      {/* Real Enterprise KPIs */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Project Progress</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{overallProgress}%</div>
            <div className="flex items-center text-xs text-muted-foreground mt-1">
              <Activity className="w-3 h-3 mr-1" />
              Phase 8 (M&E) in progress
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Phases</CardTitle>
            <Layers className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{activePhases.length}/15</div>
            <div className="flex items-center text-xs text-muted-foreground mt-1">
              <Clock className="w-3 h-3 mr-1" />
              {activePhases.map(p => p.name).join(', ')}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Team Cost/Month</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">€{(realMetrics.teamMonthlyCost / 1000).toFixed(0)}K</div>
            <div className="flex items-center text-xs text-muted-foreground mt-1">
              <Calculator className="w-3 h-3 mr-1" />
              {realMetrics.avgProjectAllocation}% avg allocation
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Contract Value</CardTitle>
            <Briefcase className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">€{(realMetrics.totalContractValue / 1000000).toFixed(1)}M</div>
            <div className="flex items-center text-xs text-muted-foreground mt-1">
              <Building className="w-3 h-3 mr-1" />
              {contractors.length} active contractors
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Monthly Payments</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">€{(realMetrics.monthlyContractorPayments / 1000000).toFixed(1)}M</div>
            <div className="flex items-center text-xs text-muted-foreground mt-1">
              <Coins className="w-3 h-3 mr-1" />
              Payment cap limit
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Real Phase Dashboard */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="dashboard">Phase Dashboard</TabsTrigger>
          <TabsTrigger value="team">Team Allocation</TabsTrigger>
          <TabsTrigger value="contractors">Contractor S-Curves</TabsTrigger>
          <TabsTrigger value="financials">Real Financials</TabsTrigger>
          <TabsTrigger value="payments">Payment Schedule</TabsTrigger>
        </TabsList>

        {/* Real Phase Dashboard */}
        <TabsContent value="dashboard" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Fitzgerald Gardens - 15 Phase Development</CardTitle>
              <CardDescription>
                €{(FITZGERALD_GARDENS_FINANCIALS.total_development_value / 1000000).toFixed(1)}M Development Value • 
                {FITZGERALD_GARDENS_FINANCIALS.profit_margin.toFixed(1)}% Profit Margin • 
                36 Month Timeline
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {REAL_DEVELOPMENT_PHASES.map((phase) => {
                  const status = getCurrentPhaseStatus(phase.id);
                  const progress = calculateRealPhaseProgress(phase.id);
                  const phaseBudget = (FITZGERALD_GARDENS_FINANCIALS.total_development_cost * phase.typical_budget_percentage) / 100;
                  
                  return (
                    <Card 
                      key={phase.id} 
                      className={`cursor-pointer transition-all hover:shadow-lg ${
                        selectedPhase === phase.id ? 'ring-2 ring-blue-500' : ''
                      } ${status === 'completed' ? 'border-green-200' : status === 'in-progress' ? 'border-blue-200' : 'border-gray-200'}`}
                      onClick={() => setSelectedPhase(phase.id)}
                    >
                      <CardHeader className="pb-2">
                        <div className="flex items-center justify-between">
                          <div className={`p-2 rounded-lg ${
                            status === 'completed' ? 'bg-green-100' : 
                            status === 'in-progress' ? 'bg-blue-100' : 'bg-gray-100'
                          }`}>
                            <span className="text-sm font-bold">P{phase.id}</span>
                          </div>
                          <Badge className={
                            status === 'completed' ? 'bg-green-100 text-green-800' :
                            status === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                            'bg-gray-100 text-gray-800'
                          }>
                            {status.replace('-', ' ')}
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <h4 className="font-semibold text-sm mb-1">{phase.name}</h4>
                        <p className="text-xs text-gray-600 mb-2">{phase.category}</p>
                        <p className="text-xs text-gray-600 mb-2">€{(phaseBudget / 1000).toFixed(0)}K budget</p>
                        <Progress value={progress} className="h-2 mb-1" />
                        <div className="flex justify-between text-xs text-gray-500">
                          <span>{progress}%</span>
                          <span>{phase.duration_weeks}w</span>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </CardContent>
          </Card>

          {/* Selected Phase Real Details */}
          {selectedPhase && (
            <Card>
              <CardHeader>
                <CardTitle>
                  Phase {selectedPhase}: {REAL_DEVELOPMENT_PHASES.find(p => p.id === selectedPhase)?.name}
                </CardTitle>
                <CardDescription>
                  Real project data and current status
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                  <div>
                    <h4 className="font-semibold mb-2">Team Members</h4>
                    <div className="space-y-2">
                      {teamMembers
                        .filter(tm => tm.current_phase_assignments.some(pa => pa.phase_id === selectedPhase))
                        .map(tm => {
                          const assignment = tm.current_phase_assignments.find(pa => pa.phase_id === selectedPhase);
                          return (
                            <div key={tm.id} className="p-2 bg-gray-50 rounded">
                              <div className="flex justify-between items-start">
                                <span className="text-sm font-medium">{tm.name}</span>
                                <span className="text-xs text-gray-500">{assignment?.allocation_percentage}%</span>
                              </div>
                              <div className="text-xs text-gray-600">{assignment?.role_in_phase}</div>
                              <div className="text-xs text-gray-500">€{assignment?.budget_allocation.toLocaleString()}</div>
                            </div>
                          );
                        })
                      }
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="font-semibold mb-2">Contractors</h4>
                    <div className="space-y-2">
                      {contractors
                        .filter(c => c.phase_assignments.includes(selectedPhase))
                        .map(c => (
                          <div key={c.id} className="p-2 bg-gray-50 rounded">
                            <div className="flex justify-between items-start">
                              <span className="text-sm font-medium">{c.company_name}</span>
                              <span className="text-xs text-gray-500">{c.current_s_curve_position}%</span>
                            </div>
                            <div className="text-xs text-gray-600">{c.specialty.replace('_', ' ')}</div>
                            <div className="text-xs text-gray-500">€{(c.contract_value / 1000).toFixed(0)}K</div>
                          </div>
                        ))
                      }
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="font-semibold mb-2">Financial</h4>
                    <div className="space-y-2">
                      {(() => {
                        const phase = REAL_DEVELOPMENT_PHASES.find(p => p.id === selectedPhase);
                        const phaseBudget = phase ? (FITZGERALD_GARDENS_FINANCIALS.total_development_cost * phase.typical_budget_percentage) / 100 : 0;
                        const progress = calculateRealPhaseProgress(selectedPhase);
                        const spent = (phaseBudget * progress) / 100;
                        const remaining = phaseBudget - spent;
                        
                        return (
                          <div className="space-y-1">
                            <div className="flex justify-between text-sm">
                              <span>Budget:</span>
                              <span>€{(phaseBudget / 1000).toFixed(0)}K</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span>Spent:</span>
                              <span>€{(spent / 1000).toFixed(0)}K</span>
                            </div>
                            <div className="flex justify-between text-sm font-semibold">
                              <span>Remaining:</span>
                              <span>€{(remaining / 1000).toFixed(0)}K</span>
                            </div>
                            <div className="flex justify-between text-sm text-gray-600">
                              <span>% of Total:</span>
                              <span>{phase?.typical_budget_percentage.toFixed(1)}%</span>
                            </div>
                          </div>
                        );
                      })()}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-2">Timeline</h4>
                    <div className="space-y-2">
                      {(() => {
                        const phase = REAL_DEVELOPMENT_PHASES.find(p => p.id === selectedPhase);
                        const status = getCurrentPhaseStatus(selectedPhase);
                        
                        return (
                          <div className="space-y-1">
                            <div className="flex justify-between text-sm">
                              <span>Duration:</span>
                              <span>{phase?.duration_weeks} weeks</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span>Critical Path:</span>
                              <span>{phase?.critical_path ? 'Yes' : 'No'}</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span>Risk Level:</span>
                              <span className={`capitalize ${
                                phase?.risk_level === 'high' ? 'text-red-600' :
                                phase?.risk_level === 'medium' ? 'text-yellow-600' :
                                'text-green-600'
                              }`}>
                                {phase?.risk_level}
                              </span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span>Status:</span>
                              <span className="capitalize">{status.replace('-', ' ')}</span>
                            </div>
                          </div>
                        );
                      })()}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Real Team Allocation Matrix */}
        <TabsContent value="team" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Real Team Allocation Matrix</CardTitle>
              <CardDescription>Based on actual daily rates and project percentages - €{(realMetrics.teamMonthlyCost / 1000).toFixed(0)}K monthly cost</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-3 font-semibold">Team Member</th>
                      <th className="text-left p-3 font-semibold">Daily Rate</th>
                      <th className="text-left p-3 font-semibold">Project %</th>
                      <th className="text-left p-3 font-semibold">Monthly Cost</th>
                      <th className="text-left p-3 font-semibold">Current Phases</th>
                      <th className="text-left p-3 font-semibold">Next Assignment</th>
                      <th className="text-left p-3 font-semibold">Performance</th>
                    </tr>
                  </thead>
                  <tbody>
                    {teamMembers.map(member => {
                      const monthlyCost = (member.daily_rate * 21 * member.project_allocation_percentage) / 100;
                      const currentPhases = member.current_phase_assignments.map(pa => 
                        REAL_DEVELOPMENT_PHASES.find(p => p.id === pa.phase_id)?.name || `Phase ${pa.phase_id}`
                      );
                      
                      return (
                        <tr key={member.id} className="border-b hover:bg-gray-50">
                          <td className="p-3">
                            <div>
                              <div className="font-medium">{member.name}</div>
                              <div className="text-sm text-gray-600">{member.role}</div>
                              <div className="text-xs text-gray-500">{member.department}</div>
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{member.daily_rate}</div>
                            <div className="text-xs text-gray-500">€{member.annual_salary.toLocaleString()} annual</div>
                          </td>
                          <td className="p-3">
                            <div className="flex items-center">
                              <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                                <div 
                                  className="bg-blue-500 h-2 rounded-full" 
                                  style={ width: `${member.project_allocation_percentage}%` }
                                ></div>
                              </div>
                              <span className="text-sm font-medium">{member.project_allocation_percentage}%</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{monthlyCost.toLocaleString('en-IE', { maximumFractionDigits: 0 })}</div>
                            <div className="text-xs text-gray-500">{(member.project_allocation_percentage * 21 / 100).toFixed(1)} days/month</div>
                          </td>
                          <td className="p-3">
                            <div className="space-y-1">
                              {member.current_phase_assignments.map(pa => {
                                const phase = REAL_DEVELOPMENT_PHASES.find(p => p.id === pa.phase_id);
                                return (
                                  <div key={pa.phase_id} className="flex items-center text-sm">
                                    <Badge className={`mr-2 text-xs ${
                                      getCurrentPhaseStatus(pa.phase_id) === 'completed' ? 'bg-green-100 text-green-800' :
                                      getCurrentPhaseStatus(pa.phase_id) === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                                      'bg-gray-100 text-gray-800'
                                    }`}>
                                      P{pa.phase_id}
                                    </Badge>
                                    <span className="text-xs">{pa.allocation_percentage}% • {pa.role_in_phase}</span>
                                  </div>
                                );
                              })}
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="text-sm">
                              {(() => {
                                // Find next logical phase assignment
                                const activePhaseIds = member.current_phase_assignments.map(pa => pa.phase_id);
                                const nextPhase = REAL_DEVELOPMENT_PHASES.find(phase => 
                                  !activePhaseIds.includes(phase.id) && 
                                  getCurrentPhaseStatus(phase.id) === 'not-started' &&
                                  phase.id> Math.max(...activePhaseIds)
                                );
                                
                                if (nextPhase) {
                                  return (
                                    <div>
                                      <div className="font-medium text-gray-700">Phase {nextPhase.id}</div>
                                      <div className="text-xs text-gray-500">{nextPhase.name}</div>
                                      <div className="text-xs text-gray-400">
                                        {nextPhase.duration_weeks}w • {nextPhase.category}
                                      </div>
                                    </div>
                                  );
                                } else {
                                  return <span className="text-gray-400 text-xs">No future assignment</span>\n  );
                                }
                              })()}
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="flex items-center">
                              <div className="flex items-center mr-2">
                                <Star className="w-4 h-4 text-yellow-400 mr-1" />
                                <span className="text-sm font-medium">{member.last_performance_review}</span>
                              </div>
                              <div className="text-xs text-gray-500">
                                {member.certifications.slice(0).join(', ')}
                                {member.certifications.length> 2 && ` +${member.certifications.length - 2}`}
                              </div>
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>

          {/* Phase Resource Allocation Summary */}
          <Card>
            <CardHeader>
              <CardTitle>Phase Resource Allocation</CardTitle>
              <CardDescription>Team member allocation across active and upcoming phases</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {REAL_DEVELOPMENT_PHASES.slice(712).map(phase => { // Phases 8-12 (upcoming)
                  const phaseTeamMembers = teamMembers.filter(tm => 
                    tm.current_phase_assignments.some(pa => pa.phase_id === phase.id)
                  );
                  const phaseBudget = (FITZGERALD_GARDENS_FINANCIALS.total_development_cost * phase.typical_budget_percentage) / 100;
                  const totalPhaseAllocation = phaseTeamMembers.reduce((sumtm) => {
                    const assignment = tm.current_phase_assignments.find(pa => pa.phase_id === phase.id);
                    return sum + (assignment ? assignment.budget_allocation : 0);
                  }, 0);
                  
                  return (
                    <Card key={phase.id} className="border-l-4 border-l-blue-500">
                      <CardHeader className="pb-2">
                        <div className="flex items-center justify-between">
                          <CardTitle className="text-lg">Phase {phase.id}</CardTitle>
                          <Badge className={
                            getCurrentPhaseStatus(phase.id) === 'completed' ? 'bg-green-100 text-green-800' :
                            getCurrentPhaseStatus(phase.id) === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                            'bg-gray-100 text-gray-800'
                          }>
                            {getCurrentPhaseStatus(phase.id).replace('-', ' ')}
                          </Badge>
                        </div>
                        <CardDescription className="text-sm">{phase.name}</CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-3">
                          <div className="flex justify-between text-sm">
                            <span>Phase Budget:</span>
                            <span className="font-medium">€{(phaseBudget / 1000).toFixed(0)}K</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span>Team Allocation:</span>
                            <span className="font-medium">€{(totalPhaseAllocation / 1000).toFixed(0)}K</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span>Team Count:</span>
                            <span className="font-medium">{phaseTeamMembers.length} members</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span>Duration:</span>
                            <span className="font-medium">{phase.duration_weeks} weeks</span>
                          </div>
                          
                          {phaseTeamMembers.length> 0 && (
                            <div className="mt-3 pt-3 border-t">
                              <div className="text-xs text-gray-600 mb-2">Assigned Team:</div>
                              {phaseTeamMembers.map(tm => {
                                const assignment = tm.current_phase_assignments.find(pa => pa.phase_id === phase.id);
                                return (
                                  <div key={tm.id} className="flex justify-between items-center text-xs mb-1">
                                    <span>{tm.name}</span>
                                    <span className="text-gray-500">{assignment?.allocation_percentage}%</span>
                                  </div>
                                );
                              })}
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="contractors" className="space-y-6">
          {/* Contractor Performance Overview */}
          <Card>
            <CardHeader>
              <CardTitle>Contractor S-Curve Performance</CardTitle>
              <CardDescription>
                €{(realMetrics.totalContractValue / 1000000).toFixed(1)}M total contract value • 
                €{(realMetrics.monthlyContractorPayments / 1000000).toFixed(1)}M monthly payment cap • 
                {contractors.length} active contractors
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">
                    {Math.round(contractors.reduce((sumc) => sum + c.current_s_curve_position0) / contractors.length)}%
                  </div>
                  <div className="text-sm text-gray-600">Average Progress</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    €{(contractors.reduce((sumc) => 
                      sum + c.payment_schedule
                        .filter(p => p.status === 'paid')
                        .reduce((pSump) => pSum + p.payment_amount0)
                    , 0) / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Paid to Date</div>
                </div>
                <div className="text-center p-4 bg-yellow-50 rounded-lg">
                  <div className="text-2xl font-bold text-yellow-600">
                    €{(contractors.reduce((sumc) => 
                      sum + c.payment_schedule
                        .filter(p => p.status === 'pending')
                        .reduce((pSump) => pSum + p.payment_amount0)
                    , 0) / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Pending Payments</div>
                </div>
                <div className="text-center p-4 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-gray-600">
                    {contractors.reduce((sumc) => sum + c.retention_percentage0) / contractors.length}%
                  </div>
                  <div className="text-sm text-gray-600">Avg Retention</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Individual Contractor S-Curves */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {contractors.map(contractor => {
              const totalPaid = contractor.payment_schedule
                .filter(p => p.status === 'paid')
                .reduce((sump) => sum + p.payment_amount0);
              const totalPending = contractor.payment_schedule
                .filter(p => p.status === 'pending')
                .reduce((sump) => sum + p.payment_amount0);
              const nextMilestone = contractor.payment_schedule
                .find(p => p.status === 'pending');
              
              return (
                <Card key={contractor.id} className="border-l-4 border-l-blue-500">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-lg">{contractor.company_name}</CardTitle>
                        <CardDescription>
                          {contractor.specialty.replace('_', ' ')} • €{(contractor.contract_value / 1000000).toFixed(1)}M Contract
                        </CardDescription>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-blue-600">{contractor.current_s_curve_position}%</div>
                        <div className="text-xs text-gray-500">Progress</div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {/* Progress Bar */}
                      <div>
                        <div className="flex justify-between text-sm mb-1">
                          <span>Overall Progress</span>
                          <span>{contractor.current_s_curve_position}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-3">
                          <div 
                            className="bg-blue-600 h-3 rounded-full transition-all duration-300" 
                            style={ width: `${contractor.current_s_curve_position}%` }
                          ></div>
                        </div>
                      </div>

                      {/* Financial Summary */}
                      <div className="grid grid-cols-3 gap-4 text-center">
                        <div>
                          <div className="font-semibold text-green-600">€{(totalPaid / 1000).toFixed(0)}K</div>
                          <div className="text-xs text-gray-500">Paid</div>
                        </div>
                        <div>
                          <div className="font-semibold text-yellow-600">€{(totalPending / 1000).toFixed(0)}K</div>
                          <div className="text-xs text-gray-500">Pending</div>
                        </div>
                        <div>
                          <div className="font-semibold text-blue-600">€{(contractor.retention_percentage * contractor.contract_value / 100 / 1000).toFixed(0)}K</div>
                          <div className="text-xs text-gray-500">Retention</div>
                        </div>
                      </div>

                      {/* Payment Milestones */}
                      <div>
                        <div className="text-sm font-semibold mb-2">Payment Milestones</div>
                        <div className="space-y-2">
                          {contractor.payment_schedule.map((milestoneindex) => (
                            <div key={index} className={`p-2 rounded text-sm border-l-4 ${
                              milestone.status === 'paid' ? 'border-l-green-500 bg-green-50' :
                              milestone.status === 'pending' ? 'border-l-yellow-500 bg-yellow-50' :
                              'border-l-red-500 bg-red-50'
                            }`}>
                              <div className="flex justify-between items-center">
                                <div>
                                  <div className="font-medium">{milestone.milestone_name}</div>
                                  <div className="text-xs text-gray-600">
                                    {milestone.payment_percentage}% • €{(milestone.payment_amount / 1000).toFixed(0)}K
                                  </div>
                                </div>
                                <div className="text-right text-xs">
                                  <div className={`font-medium capitalize ${
                                    milestone.status === 'paid' ? 'text-green-700' : 
                                    milestone.status === 'pending' ? 'text-yellow-700' : 'text-red-700'
                                  }`}>
                                    {milestone.status}
                                  </div>
                                  <div className="text-gray-500">{milestone.target_date}</div>
                                  {milestone.paid_date && (
                                    <div className="text-green-600">Paid: {milestone.paid_date}</div>
                                  )}
                                </div>
                              </div>
                              {milestone.requirements && (
                                <div className="mt-1 text-xs text-gray-600">
                                  Requirements: {milestone.requirements.join(', ')}
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Performance Ratings */}
                      <div>
                        <div className="text-sm font-semibold mb-2">Performance Ratings</div>
                        <div className="grid grid-cols-3 gap-3">
                          <div className="text-center">
                            <div className="flex items-center justify-center mb-1">
                              <Award className="w-4 h-4 mr-1 text-blue-500" />
                              <span className="text-sm font-medium">{contractor.quality_rating}</span>
                            </div>
                            <div className="text-xs text-gray-500">Quality</div>
                          </div>
                          <div className="text-center">
                            <div className="flex items-center justify-center mb-1">
                              <Shield className="w-4 h-4 mr-1 text-green-500" />
                              <span className="text-sm font-medium">{contractor.safety_rating}</span>
                            </div>
                            <div className="text-xs text-gray-500">Safety</div>
                          </div>
                          <div className="text-center">
                            <div className="flex items-center justify-center mb-1">
                              <Clock className="w-4 h-4 mr-1 text-yellow-500" />
                              <span className="text-sm font-medium">{contractor.timeliness_rating}</span>
                            </div>
                            <div className="text-xs text-gray-500">Schedule</div>
                          </div>
                        </div>
                      </div>

                      {/* Next Actions */}
                      {nextMilestone && (
                        <div className="pt-3 border-t">
                          <div className="text-sm font-semibold mb-1">Next Milestone</div>
                          <div className="text-sm text-gray-700">
                            <span className="font-medium">{nextMilestone.milestone_name}</span> - €{(nextMilestone.payment_amount / 1000).toFixed(0)}K
                          </div>
                          <div className="text-xs text-gray-500">
                            Due: {nextMilestone.target_date} • {nextMilestone.payment_percentage}% of contract
                          </div>
                        </div>
                      )}

                      {/* Contact Info */}
                      <div className="pt-3 border-t">
                        <div className="flex items-center justify-between text-sm">
                          <div>
                            <div className="font-medium">{contractor.contact_person}</div>
                            <div className="text-xs text-gray-500">Main Contact</div>
                          </div>
                          <div className="text-right text-xs text-gray-500">
                            <div>Contract: {contractor.start_date} - {contractor.completion_date}</div>
                            <div>Monthly Cap: €{(contractor.monthly_payment_cap / 1000).toFixed(0)}K</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {/* Phase-Contractor Matrix */}
          <Card>
            <CardHeader>
              <CardTitle>Contractor Phase Assignment Matrix</CardTitle>
              <CardDescription>Contractor allocation across development phases</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-2 font-semibold">Contractor</th>
                      <th className="text-left p-2 font-semibold">Specialty</th>
                      <th className="text-left p-2 font-semibold">Contract Value</th>
                      <th className="text-left p-2 font-semibold">Progress</th>
                      <th className="text-left p-2 font-semibold">Assigned Phases</th>
                      <th className="text-left p-2 font-semibold">Insurance</th>
                      <th className="text-left p-2 font-semibold">Bond</th>
                    </tr>
                  </thead>
                  <tbody>
                    {contractors.map(contractor => (
                      <tr key={contractor.id} className="border-b hover:bg-gray-50">
                        <td className="p-2">
                          <div className="font-medium">{contractor.company_name}</div>
                          <div className="text-xs text-gray-500">{contractor.contact_person}</div>
                        </td>
                        <td className="p-2">
                          <Badge className="text-xs">
                            {contractor.specialty.replace('_', ' ')}
                          </Badge>
                        </td>
                        <td className="p-2">
                          <div className="font-medium">€{(contractor.contract_value / 1000000).toFixed(1)}M</div>
                          <div className="text-xs text-gray-500">€{(contractor.monthly_payment_cap / 1000).toFixed(0)}K/month</div>
                        </td>
                        <td className="p-2">
                          <div className="flex items-center">
                            <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                              <div 
                                className="bg-blue-500 h-2 rounded-full" 
                                style={ width: `${contractor.current_s_curve_position}%` }
                              ></div>
                            </div>
                            <span className="text-xs font-medium">{contractor.current_s_curve_position}%</span>
                          </div>
                        </td>
                        <td className="p-2">
                          <div className="flex flex-wrap gap-1">
                            {contractor.phase_assignments.map(phaseId => (
                              <Badge key={phaseId} className={`text-xs ${
                                getCurrentPhaseStatus(phaseId) === 'completed' ? 'bg-green-100 text-green-800' :
                                getCurrentPhaseStatus(phaseId) === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                P{phaseId}
                              </Badge>
                            ))}
                          </div>
                        </td>
                        <td className="p-2">
                          <div className="text-xs">€{(contractor.insurance_value / 1000000).toFixed(0)}M</div>
                        </td>
                        <td className="p-2">
                          <div className="text-xs">€{(contractor.performance_bond_value / 1000000).toFixed(1)}M</div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Real Financials Tab */}
        <TabsContent value="financials" className="space-y-6">
          {/* Financial Overview */}
          <Card>
            <CardHeader>
              <CardTitle>Fitzgerald Gardens Financial Dashboard</CardTitle>
              <CardDescription>
                Real-time financial tracking based on €25M development cost and €32.5M sales value
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">
                    €{(FITZGERALD_GARDENS_FINANCIALS.total_development_value / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Total Sales Value</div>
                  <div className="text-xs text-gray-500 mt-1">
                    €{(FITZGERALD_GARDENS_FINANCIALS.total_development_value / FITZGERALD_GARDENS_FINANCIALS.total_development_cost).toFixed(1)}x Cost Multiple
                  </div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    €{(FITZGERALD_GARDENS_FINANCIALS.gross_profit / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Gross Profit</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {FITZGERALD_GARDENS_FINANCIALS.profit_margin.toFixed(1)}% Margin
                  </div>
                </div>
                <div className="text-center p-4 bg-yellow-50 rounded-lg">
                  <div className="text-2xl font-bold text-yellow-600">
                    €{(FITZGERALD_GARDENS_FINANCIALS.peak_funding_requirement / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Peak Funding</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {((FITZGERALD_GARDENS_FINANCIALS.peak_funding_requirement / FITZGERALD_GARDENS_FINANCIALS.total_development_cost) * 100).toFixed(0)}% of Total Cost
                  </div>
                </div>
                <div className="text-center p-4 bg-purple-50 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">
                    €{(realMetrics.teamMonthlyCost / 1000).toFixed(0)}K
                  </div>
                  <div className="text-sm text-gray-600">Monthly Team Cost</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {teamMembers.length} Team Members
                  </div>
                </div>
                <div className="text-center p-4 bg-red-50 rounded-lg">
                  <div className="text-2xl font-bold text-red-600">
                    €{(realMetrics.monthlyContractorPayments / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Monthly Contractor Cap</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {contractors.length} Active Contractors
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Cost Breakdown */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Development Cost Breakdown</CardTitle>
                <CardDescription>€{(FITZGERALD_GARDENS_FINANCIALS.total_development_cost / 1000000).toFixed(1)}M total development cost</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {[
                    { label: 'Land Cost', amount: FITZGERALD_GARDENS_FINANCIALS.land_cost, color: 'bg-blue-500' },
                    { label: 'Construction Cost', amount: FITZGERALD_GARDENS_FINANCIALS.construction_cost, color: 'bg-green-500' },
                    { label: 'Professional Fees', amount: FITZGERALD_GARDENS_FINANCIALS.professional_fees, color: 'bg-yellow-500' },
                    { label: 'Finance Costs', amount: FITZGERALD_GARDENS_FINANCIALS.finance_costs, color: 'bg-purple-500' },
                    { label: 'Marketing Costs', amount: FITZGERALD_GARDENS_FINANCIALS.marketing_costs, color: 'bg-red-500' },
                    { label: 'Contingency', amount: FITZGERALD_GARDENS_FINANCIALS.contingency, color: 'bg-gray-500' }
                  ].map((itemindex) => {
                    const percentage = (item.amount / FITZGERALD_GARDENS_FINANCIALS.total_development_cost) * 100;
                    return (
                      <div key={index} className="flex items-center justify-between">
                        <div className="flex items-center">
                          <div className={`w-4 h-4 rounded ${item.color} mr-3`}></div>
                          <span className="text-sm font-medium">{item.label}</span>
                        </div>
                        <div className="text-right">
                          <div className="font-semibold">€{(item.amount / 1000000).toFixed(1)}M</div>
                          <div className="text-xs text-gray-500">{percentage.toFixed(1)}%</div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Revenue Structure</CardTitle>
                <CardDescription>€{(FITZGERALD_GARDENS_FINANCIALS.gross_sales_value / 1000000).toFixed(1)}M gross sales value</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-3 bg-green-50 rounded">
                    <span className="font-medium">Gross Sales Value</span>
                    <span className="font-bold text-green-600">€{(FITZGERALD_GARDENS_FINANCIALS.gross_sales_value / 1000000).toFixed(1)}M</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-yellow-50 rounded">
                    <span className="font-medium">Sales Costs (3%)</span>
                    <span className="font-bold text-yellow-600">-€{(FITZGERALD_GARDENS_FINANCIALS.sales_costs / 1000000).toFixed(1)}M</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-blue-50 rounded">
                    <span className="font-medium">Net Sales Value</span>
                    <span className="font-bold text-blue-600">€{(FITZGERALD_GARDENS_FINANCIALS.net_sales_value / 1000000).toFixed(1)}M</span>
                  </div>
                  <div className="border-t pt-3">
                    <div className="flex items-center justify-between p-3 bg-gray-50 rounded">
                      <span className="font-medium">Total Development Cost</span>
                      <span className="font-bold text-gray-600">-€{(FITZGERALD_GARDENS_FINANCIALS.total_development_cost / 1000000).toFixed(1)}M</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-green-100 rounded border-2 border-green-200">
                    <span className="font-bold">Net Profit</span>
                    <span className="font-bold text-green-700 text-lg">€{(FITZGERALD_GARDENS_FINANCIALS.gross_profit / 1000000).toFixed(1)}M</span>
                  </div>
                  <div className="text-center text-sm text-gray-600">
                    ROI: {((FITZGERALD_GARDENS_FINANCIALS.gross_profit / FITZGERALD_GARDENS_FINANCIALS.total_development_cost) * 100).toFixed(1)}% • 
                    Profit Margin: {FITZGERALD_GARDENS_FINANCIALS.profit_margin.toFixed(1)}%
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Phase Financial Analysis */}
          <Card>
            <CardHeader>
              <CardTitle>Phase-by-Phase Financial Analysis</CardTitle>
              <CardDescription>Budget allocation and spending across all 15 development phases</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-3 font-semibold">Phase</th>
                      <th className="text-left p-3 font-semibold">Budget Allocated</th>
                      <th className="text-left p-3 font-semibold">Progress</th>
                      <th className="text-left p-3 font-semibold">Spent to Date</th>
                      <th className="text-left p-3 font-semibold">Remaining</th>
                      <th className="text-left p-3 font-semibold">Forecast to Complete</th>
                      <th className="text-left p-3 font-semibold">Variance</th>
                    </tr>
                  </thead>
                  <tbody>
                    {REAL_DEVELOPMENT_PHASES.map(phase => {
                      const phaseBudget = (FITZGERALD_GARDENS_FINANCIALS.total_development_cost * phase.typical_budget_percentage) / 100;
                      const progress = calculateRealPhaseProgress(phase.id);
                      const spentToDate = (phaseBudget * progress) / 100;
                      const remaining = phaseBudget - spentToDate;
                      const forecastComplete = phaseBudget; // Assume on budget for now
                      const variance = forecastComplete - phaseBudget;
                      const status = getCurrentPhaseStatus(phase.id);
                      
                      return (
                        <tr key={phase.id} className={`border-b hover:bg-gray-50 ${
                          status === 'completed' ? 'bg-green-50' :
                          status === 'in-progress' ? 'bg-blue-50' : ''
                        }`}>
                          <td className="p-3">
                            <div>
                              <div className="flex items-center">
                                <Badge className={`mr-2 text-xs ${
                                  status === 'completed' ? 'bg-green-100 text-green-800' :
                                  status === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                                  'bg-gray-100 text-gray-800'
                                }`}>
                                  P{phase.id}
                                </Badge>
                                <span className="font-medium">{phase.name}</span>
                              </div>
                              <div className="text-xs text-gray-500">{phase.category} • {phase.duration_weeks}w</div>
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{(phaseBudget / 1000).toFixed(0)}K</div>
                            <div className="text-xs text-gray-500">{phase.typical_budget_percentage.toFixed(1)}% of total</div>
                          </td>
                          <td className="p-3">
                            <div className="flex items-center">
                              <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                                <div 
                                  className={`h-2 rounded-full ${
                                    status === 'completed' ? 'bg-green-500' :
                                    status === 'in-progress' ? 'bg-blue-500' : 'bg-gray-400'
                                  }`}
                                  style={ width: `${progress}%` }
                                ></div>
                              </div>
                              <span className="text-xs font-medium">{progress}%</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{(spentToDate / 1000).toFixed(0)}K</div>
                            <div className="text-xs text-gray-500">{progress> 0 ? `${((spentToDate / phaseBudget) * 100).toFixed(0)}% of budget` : 'Not started'}</div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{(remaining / 1000).toFixed(0)}K</div>
                            <div className="text-xs text-gray-500">{remaining> 0 ? `${((remaining / phaseBudget) * 100).toFixed(0)}% remaining` : 'Complete'}</div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{(forecastComplete / 1000).toFixed(0)}K</div>
                            <div className="text-xs text-gray-500">On budget</div>
                          </td>
                          <td className="p-3">
                            <div className={`font-medium ${variance === 0 ? 'text-green-600' : variance> 0 ? 'text-red-600' : 'text-green-600'}`}>
                              {variance === 0 ? '€0' : (variance> 0 ? '+' : '') + `€${(variance / 1000).toFixed(0)}K`}
                            </div>
                            <div className="text-xs text-gray-500">
                              {variance === 0 ? 'On target' : variance> 0 ? 'Over budget' : 'Under budget'}
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                  <tfoot>
                    <tr className="border-t-2 font-semibold bg-gray-50">
                      <td className="p-3">Total Project</td>
                      <td className="p-3">€{(FITZGERALD_GARDENS_FINANCIALS.total_development_cost / 1000000).toFixed(1)}M</td>
                      <td className="p-3">{overallProgress}%</td>
                      <td className="p-3">€{((FITZGERALD_GARDENS_FINANCIALS.total_development_cost * overallProgress / 100) / 1000000).toFixed(1)}M</td>
                      <td className="p-3">€{((FITZGERALD_GARDENS_FINANCIALS.total_development_cost * (100 - overallProgress) / 100) / 1000000).toFixed(1)}M</td>
                      <td className="p-3">€{(FITZGERALD_GARDENS_FINANCIALS.total_development_cost / 1000000).toFixed(1)}M</td>
                      <td className="p-3 text-green-600">€0</td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            </CardContent>
          </Card>

          {/* Cash Flow and Funding */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Cash Flow Analysis</CardTitle>
                <CardDescription>Current cash position and funding requirements</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center p-3 bg-blue-50 rounded">
                      <div className="font-bold text-blue-600">€{(FITZGERALD_GARDENS_FINANCIALS.peak_funding_requirement / 1000000).toFixed(1)}M</div>
                      <div className="text-xs text-gray-600">Peak Funding Required</div>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded">
                      <div className="font-bold text-green-600">€{((FITZGERALD_GARDENS_FINANCIALS.total_development_value - FITZGERALD_GARDENS_FINANCIALS.total_development_cost) / 1000000).toFixed(1)}M</div>
                      <div className="text-xs text-gray-600">Expected Net Cash</div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Current Month Spend:</span>
                      <span className="font-medium">€{((realMetrics.teamMonthlyCost + realMetrics.monthlyContractorPayments) / 1000).toFixed(0)}K</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Remaining Months:</span>
                      <span className="font-medium">{FITZGERALD_GARDENS_FINANCIALS.development_period_months - Math.round(overallProgress * FITZGERALD_GARDENS_FINANCIALS.development_period_months / 100)} months</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Burn Rate:</span>
                      <span className="font-medium">€{((realMetrics.teamMonthlyCost + realMetrics.monthlyContractorPayments) * 12 / 1000000).toFixed(1)}M/year</span>
                    </div>
                  </div>
                  
                  <div className="pt-3 border-t">
                    <div className="text-sm font-semibold mb-2">Funding Milestones</div>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Initial Funding (Land):</span>
                        <span>€{(FITZGERALD_GARDENS_FINANCIALS.land_cost / 1000000).toFixed(1)}M</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Construction Draw:</span>
                        <span>€{(FITZGERALD_GARDENS_FINANCIALS.construction_cost / 1000000).toFixed(1)}M</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Sales Proceeds:</span>
                        <span>€{(FITZGERALD_GARDENS_FINANCIALS.gross_sales_value / 1000000).toFixed(1)}M</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Risk Analysis</CardTitle>
                <CardDescription>Financial risk factors and contingencies</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <div className="text-sm font-semibold mb-2">Contingency Allocation</div>
                    <div className="flex justify-between items-center p-3 bg-yellow-50 rounded">
                      <span>Total Contingency:</span>
                      <span className="font-bold">€{(FITZGERALD_GARDENS_FINANCIALS.contingency / 1000).toFixed(0)}K</span>
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {((FITZGERALD_GARDENS_FINANCIALS.contingency / FITZGERALD_GARDENS_FINANCIALS.total_development_cost) * 100).toFixed(1)}% of total development cost
                    </div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-semibold mb-2">Risk Factors</div>
                    <div className="space-y-2">
                      {[
                        { factor: 'Construction Cost Inflation', risk: 'Medium', impact: '€500K' },
                        { factor: 'Planning Delays', risk: 'Low', impact: '€250K' },
                        { factor: 'Sales Price Volatility', risk: 'Medium', impact: '€1M' },
                        { factor: 'Interest Rate Changes', risk: 'High', impact: '€750K' }
                      ].map((itemindex) => (
                        <div key={index} className="flex justify-between items-center text-sm p-2 bg-gray-50 rounded">
                          <span>{item.factor}</span>
                          <div className="text-right">
                            <Badge className={`text-xs mr-2 ${
                              item.risk === 'High' ? 'bg-red-100 text-red-800' :
                              item.risk === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-green-100 text-green-800'
                            }`}>
                              {item.risk}
                            </Badge>
                            <span className="font-medium">{item.impact}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div className="pt-3 border-t">
                    <div className="text-sm font-semibold mb-2">Sensitivity Analysis</div>
                    <div className="text-xs text-gray-600">
                      <div>10% cost increase: €{((FITZGERALD_GARDENS_FINANCIALS.gross_profit - FITZGERALD_GARDENS_FINANCIALS.total_development_cost * 0.1) / 1000000).toFixed(1)}M profit</div>
                      <div>5% sales decrease: €{((FITZGERALD_GARDENS_FINANCIALS.gross_profit - FITZGERALD_GARDENS_FINANCIALS.gross_sales_value * 0.05) / 1000000).toFixed(1)}M profit</div>
                      <div>Combined scenario: €{((FITZGERALD_GARDENS_FINANCIALS.gross_profit - FITZGERALD_GARDENS_FINANCIALS.total_development_cost * 0.1 - FITZGERALD_GARDENS_FINANCIALS.gross_sales_value * 0.05) / 1000000).toFixed(1)}M profit</div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Payment Schedule & Invoice Management */}
        <TabsContent value="payments" className="space-y-6">
          {/* Payment Overview */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Schedule & Invoice Management</CardTitle>
              <CardDescription>
                Monthly invoice tracking and contractor payment workflows • 
                €{(contractors.reduce((sumc) => sum + c.payment_schedule.filter(p => p.status === 'pending').reduce((pSump) => pSum + p.payment_amount0), 0) / 1000000).toFixed(1)}M pending payments
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    €{(contractors.reduce((sumc) => sum + c.payment_schedule.filter(p => p.status === 'paid').reduce((pSump) => pSum + p.payment_amount0), 0) / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Total Paid</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {contractors.reduce((sumc) => sum + c.payment_schedule.filter(p => p.status === 'paid').length0)} payments
                  </div>
                </div>
                <div className="text-center p-4 bg-yellow-50 rounded-lg">
                  <div className="text-2xl font-bold text-yellow-600">
                    €{(contractors.reduce((sumc) => sum + c.payment_schedule.filter(p => p.status === 'pending').reduce((pSump) => pSum + p.payment_amount0), 0) / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Pending Approval</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {contractors.reduce((sumc) => sum + c.payment_schedule.filter(p => p.status === 'pending').length0)} invoices
                  </div>
                </div>
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">
                    €{(contractors.reduce((sumc) => sum + (c.contract_value * c.retention_percentage / 100), 0) / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Total Retention</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {(contractors.reduce((sumc) => sum + c.retention_percentage0) / contractors.length).toFixed(1)}% avg rate
                  </div>
                </div>
                <div className="text-center p-4 bg-purple-50 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">
                    €{(realMetrics.monthlyContractorPayments / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-gray-600">Monthly Cap</div>
                  <div className="text-xs text-gray-500 mt-1">Current limit</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Monthly Invoice Tracking */}
          <Card>
            <CardHeader>
              <CardTitle>Monthly Invoice Schedule - June 2025</CardTitle>
              <CardDescription>Current month payment processing and approval workflow</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {contractors.map(contractor => {
                  const pendingPayments = contractor.payment_schedule.filter(p => p.status === 'pending');
                  const totalPending = pendingPayments.reduce((sump) => sum + p.payment_amount0);
                  const nextPayment = pendingPayments[0];
                  
                  if (!nextPayment) return null;
                  
                  return (
                    <div key={contractor.id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-4">
                        <div>
                          <h4 className="font-semibold text-lg">{contractor.company_name}</h4>
                          <p className="text-sm text-gray-600">
                            {contractor.specialty.replace('_', ' ')} • €{(contractor.contract_value / 1000000).toFixed(1)}M Contract
                          </p>
                        </div>
                        <div className="text-right">
                          <div className="text-xl font-bold text-blue-600">€{(totalPending / 1000).toFixed(0)}K</div>
                          <div className="text-xs text-gray-500">Pending This Month</div>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                        {/* Payment Details */}
                        <div className="lg:col-span-2">
                          <div className="space-y-3">
                            {pendingPayments.slice(0).map((paymentindex) => (
                              <div key={index} className="border-l-4 border-l-blue-500 pl-4 py-2 bg-blue-50 rounded-r">
                                <div className="flex justify-between items-start">
                                  <div>
                                    <div className="font-medium">{payment.milestone_name}</div>
                                    <div className="text-sm text-gray-600">
                                      {payment.payment_percentage}% of contract • Due: {payment.target_date}
                                    </div>
                                    <div className="text-xs text-gray-500 mt-1">
                                      Requirements: {payment.requirements.join(', ')}
                                    </div>
                                  </div>
                                  <div className="text-right">
                                    <div className="font-bold text-blue-700">€{(payment.payment_amount / 1000).toFixed(0)}K</div>
                                    <Badge className="mt-1 bg-yellow-100 text-yellow-800 text-xs">
                                      {payment.status}
                                    </Badge>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                        
                        {/* Progress & Actions */}
                        <div className="space-y-3">
                          <div>
                            <div className="text-sm font-medium mb-2">Contract Progress</div>
                            <div className="flex items-center">
                              <div className="w-full bg-gray-200 rounded-full h-3 mr-2">
                                <div 
                                  className="bg-blue-600 h-3 rounded-full" 
                                  style={ width: `${contractor.current_s_curve_position}%` }
                                ></div>
                              </div>
                              <span className="text-sm font-medium">{contractor.current_s_curve_position}%</span>
                            </div>
                          </div>
                          
                          <div>
                            <div className="text-sm font-medium mb-2">Quality Metrics</div>
                            <div className="grid grid-cols-3 gap-2 text-center">
                              <div>
                                <div className="text-sm font-semibold">{contractor.quality_rating}</div>
                                <div className="text-xs text-gray-500">Quality</div>
                              </div>
                              <div>
                                <div className="text-sm font-semibold">{contractor.safety_rating}</div>
                                <div className="text-xs text-gray-500">Safety</div>
                              </div>
                              <div>
                                <div className="text-sm font-semibold">{contractor.timeliness_rating}</div>
                                <div className="text-xs text-gray-500">Schedule</div>
                              </div>
                            </div>
                          </div>
                          
                          <div className="space-y-2">
                            <Button className="w-full" size="sm">
                              <CheckCircle className="w-4 h-4 mr-2" />
                              Approve Payment
                            </Button>
                            <Button variant="outline" className="w-full" size="sm">
                              <Eye className="w-4 h-4 mr-2" />
                              Review Invoice
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>

          {/* Payment Workflow & Approvals */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Payment Approval Workflow</CardTitle>
                <CardDescription>Current approvals and workflow status</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {[
                    { stage: 'Invoice Submitted', status: 'completed', date: '2025-06-10', approver: 'System Auto-Import' },
                    { stage: 'Technical Review', status: 'completed', date: '2025-06-12', approver: 'Emma Thompson' },
                    { stage: 'Commercial Review', status: 'in-progress', date: '2025-06-15', approver: 'James Murphy' },
                    { stage: 'Director Approval', status: 'pending', date: '2025-06-16', approver: 'Sarah O\'Brien' },
                    { stage: 'Payment Processing', status: 'pending', date: '2025-06-17', approver: 'Finance Team' }
                  ].map((workflowindex) => (
                    <div key={index} className="flex items-center justify-between p-3 rounded border">
                      <div className="flex items-center">
                        <div className={`w-3 h-3 rounded-full mr-3 ${
                          workflow.status === 'completed' ? 'bg-green-500' :
                          workflow.status === 'in-progress' ? 'bg-blue-500' : 'bg-gray-300'
                        }`}></div>
                        <div>
                          <div className="font-medium text-sm">{workflow.stage}</div>
                          <div className="text-xs text-gray-500">{workflow.approver}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-xs text-gray-500">{workflow.date}</div>
                        <Badge className={`text-xs ${
                          workflow.status === 'completed' ? 'bg-green-100 text-green-800' :
                          workflow.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {workflow.status.replace('-', ' ')}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Cash Flow Impact</CardTitle>
                <CardDescription>Payment impact on project cash flow</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center p-3 bg-red-50 rounded">
                      <div className="font-bold text-red-600">€{(contractors.reduce((sumc) => sum + c.payment_schedule.filter(p => p.status === 'pending').reduce((pSump) => pSum + p.payment_amount0), 0) / 1000000).toFixed(1)}M</div>
                      <div className="text-xs text-gray-600">Cash Out (Pending)</div>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded">
                      <div className="font-bold text-green-600">€{((FITZGERALD_GARDENS_FINANCIALS.gross_sales_value * 0.3) / 1000000).toFixed(1)}M</div>
                      <div className="text-xs text-gray-600">Cash In (Sales)</div>
                    </div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-medium mb-2">Monthly Cash Position</div>
                    <div className="space-y-2">
                      {[
                        { month: 'May 2025', cashOut: 2.1, cashIn: 3.2, balance: 1.1 },
                        { month: 'Jun 2025', cashOut: 2.6, cashIn: 2.8, balance: 0.2 },
                        { month: 'Jul 2025', cashOut: 2.3, cashIn: 4.1, balance: 1.8 },
                        { month: 'Aug 2025', cashOut: 1.9, cashIn: 3.5, balance: 1.6 }
                      ].map((monthindex) => (
                        <div key={index} className="flex justify-between items-center text-sm p-2 bg-gray-50 rounded">
                          <span className="font-medium">{month.month}</span>
                          <div className="flex items-center space-x-3">
                            <span className="text-red-600">-€{month.cashOut}M</span>
                            <span className="text-green-600">+€{month.cashIn}M</span>
                            <span className={`font-semibold ${month.balance> 0 ? 'text-green-700' : 'text-red-700'}`}>
                              €{month.balance> 0 ? '+' : ''}€{month.balance}M
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div className="pt-3 border-t">
                    <div className="text-sm font-medium mb-2">Key Metrics</div>
                    <div className="grid grid-cols-2 gap-3 text-sm">
                      <div className="flex justify-between">
                        <span>Avg Payment Days:</span>
                        <span className="font-medium">28 days</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Payment Compliance:</span>
                        <span className="font-medium text-green-600">94%</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Retention Released:</span>
                        <span className="font-medium">€0.2M</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Disputed Payments:</span>
                        <span className="font-medium text-yellow-600">€0</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Retention Management */}
          <Card>
            <CardHeader>
              <CardTitle>Retention & Bond Management</CardTitle>
              <CardDescription>Security deposits and performance bond tracking</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-3 font-semibold">Contractor</th>
                      <th className="text-left p-3 font-semibold">Contract Value</th>
                      <th className="text-left p-3 font-semibold">Retention Rate</th>
                      <th className="text-left p-3 font-semibold">Retention Held</th>
                      <th className="text-left p-3 font-semibold">Performance Bond</th>
                      <th className="text-left p-3 font-semibold">Insurance</th>
                      <th className="text-left p-3 font-semibold">Release Date</th>
                    </tr>
                  </thead>
                  <tbody>
                    {contractors.map(contractor => {
                      const retentionHeld = (contractor.contract_value * contractor.retention_percentage) / 100;
                      const completionDate = new Date(contractor.completion_date);
                      const releaseDate = new Date(completionDate.getTime() + (365 * 24 * 60 * 60 * 1000)); // 1 year after completion
                      
                      return (
                        <tr key={contractor.id} className="border-b hover:bg-gray-50">
                          <td className="p-3">
                            <div className="font-medium">{contractor.company_name}</div>
                            <div className="text-xs text-gray-500">{contractor.contact_person}</div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{(contractor.contract_value / 1000000).toFixed(1)}M</div>
                            <div className="text-xs text-gray-500">{contractor.current_s_curve_position}% complete</div>
                          </td>
                          <td className="p-3">
                            <Badge className="bg-blue-100 text-blue-800">
                              {contractor.retention_percentage}%
                            </Badge>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{(retentionHeld / 1000).toFixed(0)}K</div>
                            <div className="text-xs text-gray-500">Currently held</div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{(contractor.performance_bond_value / 1000000).toFixed(1)}M</div>
                            <div className="text-xs text-gray-500">10% of contract</div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">€{(contractor.insurance_value / 1000000).toFixed(0)}M</div>
                            <div className="text-xs text-gray-500">Public liability</div>
                          </td>
                          <td className="p-3">
                            <div className="font-medium">{releaseDate.toLocaleDateString()}</div>
                            <div className="text-xs text-gray-500">
                              {contractor.current_s_curve_position === 100 ? 'Available for release' : 'Pending completion'}
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                  <tfoot>
                    <tr className="border-t-2 font-semibold bg-gray-50">
                      <td className="p-3">Total</td>
                      <td className="p-3">€{(contractors.reduce((sumc) => sum + c.contract_value0) / 1000000).toFixed(1)}M</td>
                      <td className="p-3">{(contractors.reduce((sumc) => sum + c.retention_percentage0) / contractors.length).toFixed(1)}%</td>
                      <td className="p-3">€{(contractors.reduce((sumc) => sum + (c.contract_value * c.retention_percentage / 100), 0) / 1000000).toFixed(1)}M</td>
                      <td className="p-3">€{(contractors.reduce((sumc) => sum + c.performance_bond_value0) / 1000000).toFixed(1)}M</td>
                      <td className="p-3">€{(contractors.reduce((sumc) => sum + c.insurance_value0) / 1000000).toFixed(0)}M</td>
                      <td className="p-3">-</td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}