// Architect Collaboration Service

import { EventEmitter } from 'events';
import { 
  Project, 
  Drawing, 
  DrawingRevision, 
  ProjectTask,
  ChangeOrder,
  BuildingModel,
  Specification,
  ProjectDocument,
  DrawingMarkup
} from '@/types/collaboration';

export class CollaborationService extends EventEmitter {
  private subscribers: Map<string, Set<(data: any) => void>> = new Map();

  // Project Management
  async createProject(data: {
    name: string;
    description?: string;
    propertyId: string;
    developmentId?: string;
    leadArchitectId: string;
    startDate: Date;
    targetCompletion?: Date;
    budget?: number;
  }): Promise<Project> {
    // Mock implementation
    const project: Project = {
      id: `proj-${Date.now()}`,
      name: data.name,
      description: data.description,
      propertyId: data.propertyId,
      developmentId: data.developmentId,
      status: 'PLANNING',
      leadArchitectId: data.leadArchitectId,
      architectIds: [],
      engineerIds: [],
      contractorIds: [],
      startDate: data.startDate,
      targetCompletion: data.targetCompletion,
      budget: data.budget,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.emit('projectCreated', project);
    return project;
  }

  async updateProject(projectId: string, updates: Partial<Project>): Promise<Project> {
    // Mock implementation
    const updatedProject = { ...updates, id: projectId, updatedAt: new Date() } as Project;
    this.emit('projectUpdated', updatedProject);
    return updatedProject;
  }

  // Drawing Management
  async uploadDrawing(data: {
    projectId: string;
    type: Drawing['type'];
    title: string;
    description?: string;
    fileUrl: string;
    fileSize: number;
    mimeType: string;
    createdById: string;
    discipline: Drawing['discipline'];
  }): Promise<Drawing> {
    const drawingNumber = this.generateDrawingNumber(data.projectId, data.type);

    const drawing: Drawing = {
      id: `drw-${Date.now()}`,
      projectId: data.projectId,
      type: data.type,
      title: data.title,
      description: data.description,
      drawingNumber,
      fileUrl: data.fileUrl,
      fileSize: data.fileSize,
      mimeType: data.mimeType,
      version: 1,
      status: 'DRAFT',
      createdById: data.createdById,
      lastModifiedById: data.createdById,
      tags: [],
      discipline: data.discipline,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.emit('drawingUploaded', drawing);
    this.notifyRealtimeUpdate('drawing', drawing);
    return drawing;
  }

  async createRevision(drawingId: string, data: {
    revisionNumber: string;
    description: string;
    fileUrl: string;
    changesMade: string[];
    createdById: string;
  }): Promise<DrawingRevision> {
    const revision: DrawingRevision = {
      id: `rev-${Date.now()}`,
      drawingId,
      revisionNumber: data.revisionNumber,
      description: data.description,
      fileUrl: data.fileUrl,
      changesMade: data.changesMade,
      status: 'PENDING',
      createdById: data.createdById,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.emit('revisionCreated', revision);
    this.notifyRealtimeUpdate('revision', revision);
    return revision;
  }

  async addMarkup(revisionId: string, data: {
    type: DrawingMarkup['type'];
    coordinates: any;
    content: string;
    color: string;
    authorId: string;
  }): Promise<DrawingMarkup> {
    const markup: DrawingMarkup = {
      id: `mkp-${Date.now()}`,
      revisionId,
      type: data.type,
      coordinates: data.coordinates,
      content: data.content,
      color: data.color,
      authorId: data.authorId,
      resolved: false,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.emit('markupAdded', markup);
    this.notifyRealtimeUpdate('markup', markup);
    return markup;
  }

  // Task Management
  async createTask(data: {
    projectId: string;
    title: string;
    description?: string;
    priority?: ProjectTask['priority'];
    assignedToId: string;
    dueDate?: Date;
    relatedDrawingIds?: string[];
    createdById: string;
  }): Promise<ProjectTask> {
    const task: ProjectTask = {
      id: `tsk-${Date.now()}`,
      projectId: data.projectId,
      title: data.title,
      description: data.description,
      priority: data.priority || 'MEDIUM',
      status: 'PENDING',
      assignedToId: data.assignedToId,
      dueDate: data.dueDate,
      dependentTaskIds: [],
      blockingTaskIds: [],
      relatedDrawingIds: data.relatedDrawingIds || [],
      relatedDocumentIds: [],
      createdById: data.createdById,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.emit('taskCreated', task);
    this.notifyRealtimeUpdate('task', task);
    return task;
  }

  async updateTaskStatus(taskId: string, status: ProjectTask['status']): Promise<ProjectTask> {
    const updatedTask = {
      id: taskId,
      status,
      completedAt: status === 'COMPLETED' ? new Date() : undefined,
      updatedAt: new Date()
    } as ProjectTask;

    this.emit('taskStatusUpdated', { taskId, status });
    this.notifyRealtimeUpdate('task', updatedTask);
    return updatedTask;
  }

  // Change Orders
  async createChangeOrder(data: {
    projectId: string;
    title: string;
    description: string;
    requestedById: string;
    costImpact?: number;
    scheduleImpact?: number;
    priority?: ChangeOrder['priority'];
  }): Promise<ChangeOrder> {
    const orderNumber = this.generateChangeOrderNumber(data.projectId);

    const changeOrder: ChangeOrder = {
      id: `co-${Date.now()}`,
      projectId: data.projectId,
      orderNumber,
      title: data.title,
      description: data.description,
      requestedById: data.requestedById,
      costImpact: data.costImpact,
      scheduleImpact: data.scheduleImpact,
      status: 'PENDING',
      priority: data.priority || 'MEDIUM',
      affectedDrawings: [],
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.emit('changeOrderCreated', changeOrder);
    return changeOrder;
  }

  // BIM/3D Model Management
  async uploadModel(data: {
    projectId: string;
    name: string;
    description?: string;
    type: BuildingModel['type'];
    fileUrl: string;
    fileSize: number;
    format: string;
    createdById: string;
  }): Promise<BuildingModel> {
    const model: BuildingModel = {
      id: `mdl-${Date.now()}`,
      projectId: data.projectId,
      name: data.name,
      description: data.description,
      type: data.type,
      fileUrl: data.fileUrl,
      fileSize: data.fileSize,
      format: data.format,
      modelVersion: '1.0',
      softwareUsed: this.detectSoftware(data.format),
      createdById: data.createdById,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.emit('modelUploaded', model);
    return model;
  }

  // Specifications
  async createSpecification(data: {
    projectId: string;
    section: string;
    title: string;
    content: string;
    type: Specification['type'];
    createdById: string;
  }): Promise<Specification> {
    const spec: Specification = {
      id: `spec-${Date.now()}`,
      projectId: data.projectId,
      section: data.section,
      title: data.title,
      content: data.content,
      type: data.type,
      relatedDrawingIds: [],
      relatedProductIds: [],
      version: 1,
      status: 'DRAFT',
      createdById: data.createdById,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.emit('specificationCreated', spec);
    return spec;
  }

  // Real-time collaboration
  subscribeToUpdates(entityType: string, callback: (data: any) => void): () => void {
    if (!this.subscribers.has(entityType)) {
      this.subscribers.set(entityType, new Set());
    }

    this.subscribers.get(entityType)!.add(callback);

    // Return unsubscribe function
    return () => {
      this.subscribers.get(entityType)?.delete(callback);
    };
  }

  private notifyRealtimeUpdate(entityType: string, data: any) {
    const callbacks = this.subscribers.get(entityType);
    if (callbacks) {
      callbacks.forEach(callback => callback(data));
    }
  }

  // Helper methods
  private generateDrawingNumber(projectId: string, type: Drawing['type']): string {
    const typePrefix = type.substring(0, 2).toUpperCase();
    const timestamp = Date.now().toString().slice(-6);
    return `${typePrefix}-${timestamp}`;
  }

  private generateChangeOrderNumber(projectId: string): string {
    const timestamp = Date.now().toString().slice(-4);
    return `CO-${timestamp}`;
  }

  private detectSoftware(format: string): string {
    const softwareMap: Record<string, string> = {
      'rvt': 'Autodesk Revit',
      'dwg': 'AutoCAD',
      'ifc': 'IFC-compatible',
      'skp': 'SketchUp',
      'pln': 'ArchiCAD',
      'nwd': 'Navisworks'
    };

    const extension = format.toLowerCase().split('.').pop() || '';
    return softwareMap[extension] || 'Unknown';
  }

  // Search and filtering
  async searchDrawings(filters: {
    projectId?: string;
    type?: Drawing['type'];
    discipline?: Drawing['discipline'];
    status?: Drawing['status'];
    tags?: string[];
  }): Promise<Drawing[]> {
    // Mock implementation - would query database

    return [];
  }

  async getProjectTimeline(projectId: string): Promise<any> {
    // Mock implementation - would aggregate project events
    return {
      milestones: [],
      tasks: [],
      drawings: [],
      changeOrders: []
    };
  }

  // Permissions and access control
  async checkDrawingAccess(drawingId: string, userId: string): Promise<boolean> {
    // Mock implementation - would check user permissions
    return true;
  }

  async shareDocument(documentId: string, userIds: string[], accessLevel: 'view' | 'edit'): Promise<void> {
    // Mock implementation
    this.emit('documentShared', { documentId, userIds, accessLevel });
  }
}

// Create singleton instance
export const collaborationService = new CollaborationService();