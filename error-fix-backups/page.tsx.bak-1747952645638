"use client";

import React, { useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Home, 
  MapPin, 
  Euro, 
  Calendar,
  Upload,
  CheckCircle,
  AlertCircle,
  FileText,
  CreditCard
} from 'lucide-react';
import Image from 'next/image';
import { toast } from '@/components/ui/use-toast';

export default function ReserveProperty() {
  const router = useRouter();
  const { id: propertyId } = useParams();
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    addressLine1: '',
    addressLine2: '',
    city: '',
    county: '',
    postcode: '',
    idDocument: null,
    proofOfAddress: null,
    proofOfIncome: null,
    agreedToTerms: false,
    depositAmount: 5000,
  });

  // Fetch property details
  const { data: property, isLoading } = useQuery({
    queryKey: ['property', propertyId],
    queryFn: async () => {
      const response = await fetch(`/api/properties/${propertyId}`);
      return response.json();
    }
  });

  // Reservation mutation
  const reserveMutation = useMutation({
    mutationFn: async (data: any) => {
      const response = await fetch(`/api/properties/${propertyId}/reserve`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('Reservation failed');
      return response.json();
    },
    onSuccess: (data: any) => {
      toast({
        title: "Reservation Successful!",
        description: "Your booking deposit has been processed.",
      });
      router.push(`/transactions/${data.transactionId}`);
    },
    onError: () => {
      toast({
        title: "Reservation Failed",
        description: "There was an error processing your reservation.",
        variant: "destructive",
      });
    }
  });

  if (isLoading) {
    return <div>Loading property details...</div>;
  }

  const handleFileUpload = (field: string, file: File) => {
    setFormData(prev => ({ ...prev, [field]: file }));
  };

  const handleNext = () => {
    if (step < 4) setStep(step + 1);
  };

  const handleBack = () => {
    if (step > 1) setStep(step - 1);
  };

  const handleSubmit = async () => {
    // Process payment and create reservation
    const formDataToSend = new FormData();
    Object.entries(formData).forEach(([key, value]) => {
      if (value !== null) {
        formDataToSend.append(key, value as any);
      }
    });

    reserveMutation.mutate(formDataToSend);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="mx-auto max-w-4xl px-4">
        {/* Property Summary */}
        <Card className="mb-6">
          <CardHeader>
            <div className="flex items-start justify-between">
              <div>
                <CardTitle className="text-2xl">{property?.name}</CardTitle>
                <p className="text-gray-600 mt-1">{property?.location}</p>
              </div>
              <Badge variant="secondary">
                Unit {property?.unitNumber}
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="flex items-center gap-2">
                <Home className="h-4 w-4 text-gray-500" />
                <span>{property?.bedrooms} Bed {property?.propertyType}</span>
              </div>
              <div className="flex items-center gap-2">
                <Euro className="h-4 w-4 text-gray-500" />
                <span>â‚¬{property?.price?.toLocaleString()}</span>
              </div>
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4 text-gray-500" />
                <span>Q{property?.completionQuarter} {property?.completionYear}</span>
              </div>
              <div className="flex items-center gap-2">
                <MapPin className="h-4 w-4 text-gray-500" />
                <span>Floor {property?.floor}</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Progress Indicator */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="flex items-center">
                <div className={`h-10 w-10 rounded-full flex items-center justify-center
                  ${step >= i ? 'bg-primary text-white' : 'bg-gray-200 text-gray-600'}`}>
                  {step > i ? <CheckCircle className="h-6 w-6" /> : i}
                </div>
                {i < 4 && (
                  <div className={`h-1 w-16 md:w-32 
                    ${step > i ? 'bg-primary' : 'bg-gray-200'}`} />
                )}
              </div>
            ))}
          </div>
          <div className="flex justify-between mt-2 text-sm text-gray-600">
            <span>Personal Details</span>
            <span>KYC Documents</span>
            <span>Review</span>
            <span>Payment</span>
          </div>
        </div>

        {/* Form Steps */}
        <Card>
          <CardContent className="p-6">
            {/* Step 1: Personal Details */}
            {step === 1 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold mb-4">Personal Information</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="firstName">First Name</Label>
                    <Input
                      id="firstName"
                      value={formData.firstName}
                      onChange={(e) => setFormData({...formData, firstName: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input
                      id="lastName"
                      value={formData.lastName}
                      onChange={(e) => setFormData({...formData, lastName: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => setFormData({...formData, email: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">Phone</Label>
                    <Input
                      id="phone"
                      type="tel"
                      value={formData.phone}
                      onChange={(e) => setFormData({...formData, phone: e.target.value})}
                      required
                    />
                  </div>
                </div>
                
                <h4 className="font-semibold mt-6 mb-4">Address</h4>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="addressLine1">Address Line 1</Label>
                    <Input
                      id="addressLine1"
                      value={formData.addressLine1}
                      onChange={(e) => setFormData({...formData, addressLine1: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="addressLine2">Address Line 2</Label>
                    <Input
                      id="addressLine2"
                      value={formData.addressLine2}
                      onChange={(e) => setFormData({...formData, addressLine2: e.target.value})}
                    />
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <Label htmlFor="city">City</Label>
                      <Input
                        id="city"
                        value={formData.city}
                        onChange={(e) => setFormData({...formData, city: e.target.value})}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="county">County</Label>
                      <Input
                        id="county"
                        value={formData.county}
                        onChange={(e) => setFormData({...formData, county: e.target.value})}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="postcode">Postcode</Label>
                      <Input
                        id="postcode"
                        value={formData.postcode}
                        onChange={(e) => setFormData({...formData, postcode: e.target.value})}
                        required
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Step 2: KYC Documents */}
            {step === 2 && (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold mb-4">KYC Documentation</h3>
                
                <div className="space-y-4">
                  <div>
                    <Label>ID Document (Passport/Driving License)</Label>
                    <div className="mt-2 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                      <Upload className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                      <p className="text-sm text-gray-600 mb-2">
                        Click to upload or drag and drop
                      </p>
                      <input
                        type="file"
                        accept="image/*,.pdf"
                        onChange={(e) => handleFileUpload('idDocument', e.target.files?.[0]!)}
                        className="hidden"
                        id="idDocument"
                      />
                      <label htmlFor="idDocument" className="cursor-pointer">
                        <Button size="sm" variant="outline">Select File</Button>
                      </label>
                      {formData.idDocument && (
                        <p className="text-sm text-green-600 mt-2">
                          âœ“ {(formData.idDocument as any).name}
                        </p>
                      )}
                    </div>
                  </div>

                  <div>
                    <Label>Proof of Address (Utility Bill/Bank Statement)</Label>
                    <div className="mt-2 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                      <Upload className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                      <p className="text-sm text-gray-600 mb-2">
                        Click to upload or drag and drop
                      </p>
                      <input
                        type="file"
                        accept="image/*,.pdf"
                        onChange={(e) => handleFileUpload('proofOfAddress', e.target.files?.[0]!)}
                        className="hidden"
                        id="proofOfAddress"
                      />
                      <label htmlFor="proofOfAddress" className="cursor-pointer">
                        <Button size="sm" variant="outline">Select File</Button>
                      </label>
                      {formData.proofOfAddress && (
                        <p className="text-sm text-green-600 mt-2">
                          âœ“ {(formData.proofOfAddress as any).name}
                        </p>
                      )}
                    </div>
                  </div>

                  <div>
                    <Label>Proof of Income (Payslip/Bank Statement)</Label>
                    <div className="mt-2 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                      <Upload className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                      <p className="text-sm text-gray-600 mb-2">
                        Click to upload or drag and drop
                      </p>
                      <input
                        type="file"
                        accept="image/*,.pdf"
                        onChange={(e) => handleFileUpload('proofOfIncome', e.target.files?.[0]!)}
                        className="hidden"
                        id="proofOfIncome"
                      />
                      <label htmlFor="proofOfIncome" className="cursor-pointer">
                        <Button size="sm" variant="outline">Select File</Button>
                      </label>
                      {formData.proofOfIncome && (
                        <p className="text-sm text-green-600 mt-2">
                          âœ“ {(formData.proofOfIncome as any).name}
                        </p>
                      )}
                    </div>
                  </div>
                </div>

                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="flex items-start gap-2">
                    <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5" />
                    <div className="text-sm text-blue-800">
                      <p className="font-semibold mb-1">Document Requirements:</p>
                      <ul className="list-disc list-inside space-y-1">
                        <li>Documents must be less than 3 months old</li>
                        <li>Files must be in PDF or image format</li>
                        <li>Maximum file size: 10MB per document</li>
                        <li>Ensure all text is clearly readable</li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Step 3: Review */}
            {step === 3 && (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold mb-4">Review Your Reservation</h3>
                
                <div className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-base">Personal Information</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <dl className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                          <dt className="font-medium text-gray-600">Name</dt>
                          <dd>{formData.firstName} {formData.lastName}</dd>
                        </div>
                        <div>
                          <dt className="font-medium text-gray-600">Email</dt>
                          <dd>{formData.email}</dd>
                        </div>
                        <div>
                          <dt className="font-medium text-gray-600">Phone</dt>
                          <dd>{formData.phone}</dd>
                        </div>
                        <div>
                          <dt className="font-medium text-gray-600">Address</dt>
                          <dd>
                            {formData.addressLine1}<br />
                            {formData.addressLine2 && <>{formData.addressLine2}<br /></>}
                            {formData.city}, {formData.county} {formData.postcode}
                          </dd>
                        </div>
                      </dl>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-base">Documents Uploaded</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ul className="space-y-2 text-sm">
                        <li className="flex items-center gap-2">
                          <CheckCircle className="h-4 w-4 text-green-600" />
                          ID Document: {(formData.idDocument as any)?.name}
                        </li>
                        <li className="flex items-center gap-2">
                          <CheckCircle className="h-4 w-4 text-green-600" />
                          Proof of Address: {(formData.proofOfAddress as any)?.name}
                        </li>
                        <li className="flex items-center gap-2">
                          <CheckCircle className="h-4 w-4 text-green-600" />
                          Proof of Income: {(formData.proofOfIncome as any)?.name}
                        </li>
                      </ul>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-base">Reservation Details</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <dl className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <dt className="font-medium text-gray-600">Property</dt>
                          <dd>{property?.name} - Unit {property?.unitNumber}</dd>
                        </div>
                        <div className="flex justify-between">
                          <dt className="font-medium text-gray-600">Price</dt>
                          <dd>â‚¬{property?.price?.toLocaleString()}</dd>
                        </div>
                        <div className="flex justify-between">
                          <dt className="font-medium text-gray-600">Booking Deposit</dt>
                          <dd>â‚¬{formData.depositAmount.toLocaleString()}</dd>
                        </div>
                      </dl>
                    </CardContent>
                  </Card>

                  <div className="space-y-4">
                    <div className="flex items-start gap-2">
                      <Checkbox
                        id="terms"
                        checked={formData.agreedToTerms}
                        onCheckedChange={(checked) => 
                          setFormData({...formData, agreedToTerms: checked as boolean})}
                      />
                      <Label htmlFor="terms" className="text-sm">
                        I agree to the terms and conditions and understand that this booking
                        deposit is refundable subject to the terms of the purchase agreement.
                      </Label>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Step 4: Payment */}
            {step === 4 && (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold mb-4">Payment</h3>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Booking Deposit</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="flex justify-between text-lg font-semibold">
                        <span>Amount Due:</span>
                        <span>â‚¬{formData.depositAmount.toLocaleString()}</span>
                      </div>
                      
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <div className="flex items-center gap-3 mb-4">
                          <CreditCard className="h-6 w-6 text-gray-600" />
                          <span className="font-medium">Secure Payment via Stripe</span>
                        </div>
                        
                        {/* Stripe payment form would go here */}
                        <div className="space-y-4">
                          <div>
                            <Label htmlFor="cardNumber">Card Number</Label>
                            <Input id="cardNumber" placeholder="4242 4242 4242 4242" />
                          </div>
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="expiry">Expiry Date</Label>
                              <Input id="expiry" placeholder="MM/YY" />
                            </div>
                            <div>
                              <Label htmlFor="cvc">CVC</Label>
                              <Input id="cvc" placeholder="123" />
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="text-sm text-gray-600">
                        <p>Your payment information is secure and encrypted.</p>
                        <p>You will receive a confirmation email once payment is processed.</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="flex justify-between mt-8">
              <Button
                variant="outline"
                onClick={handleBack}
                disabled={step === 1}
              >
                Back
              </Button>
              
              {step < 4 ? (
                <Button
                  onClick={handleNext}
                  disabled={
                    (step === 1 && (!formData.firstName || !formData.lastName || !formData.email)) ||
                    (step === 2 && (!formData.idDocument || !formData.proofOfAddress || !formData.proofOfIncome)) ||
                    (step === 3 && !formData.agreedToTerms)
                  }
                >
                  Next
                </Button>
              ) : (
                <Button
                  onClick={handleSubmit}
                  disabled={reserveMutation.isPending}
                >
                  {reserveMutation.isPending ? 'Processing...' : 'Complete Reservation'}
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}