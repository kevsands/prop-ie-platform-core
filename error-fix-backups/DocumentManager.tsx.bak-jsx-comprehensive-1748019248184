'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Upload, FileText, Download, CheckCircle, XCircle } from 'lucide-react';

export interface Document {
  id: string;
  caseId: string;
  name: string;
  type: 'contract' | 'search' | 'identification' | 'mortgage' | 'title' | 'other';
  status: 'pending' | 'uploaded' | 'verified' | 'rejected';
  uploadedBy: string;
  uploadedDate: Date;
  size: number;
  url: string;
  notes?: string;
}

export function DocumentManager() {
  const [documents, setDocuments] = useState<Document[]>([]);
  const [filterType, setFilterType] = useState<string>('all');

  const filteredDocuments = documents.filter(doc => 
    filterType === 'all' || doc.type === filterType
  );

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'verified':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'rejected':
        return <XCircle className="h-4 w-4 text-red-500" />;
      default:
        return <FileText className="h-4 w-4 text-gray-500" />;
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return bytes + ' B';
    else if (bytes < 1048576) return Math.round(bytes / 1024) + ' KB';
    else return Math.round(bytes / 1048576) + ' MB';
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Document Manager</h1>
        <Button variant="default">
          <Upload className="mr-2 h-4 w-4" />
          Upload Document
        </Button>
      </div>

      <div className="mb-4">
        <select
          className="px-4 py-2 border rounded-lg"
          value={filterType}
          onChange={(e) => setFilterType(e.target.value)}
        >
          <option value="all">All Documents</option>
          <option value="contract">Contracts</option>
          <option value="search">Searches</option>
          <option value="identification">ID Documents</option>
          <option value="mortgage">Mortgage</option>
          <option value="title">Title</option>
          <option value="other">Other</option>
        </select>
      </div>

      <div className="grid gap-4">
        {filteredDocuments.map((doc) => (
          <Card key={doc.id} className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                {getStatusIcon(doc.status)}
                <div>
                  <h3 className="font-semibold">{doc.name}</h3>
                  <div className="flex items-center gap-4 mt-1 text-sm text-gray-600">
                    <Badge variant="outline">{doc.type}</Badge>
                    <span>{formatFileSize(doc.size)}</span>
                    <span>Uploaded by {doc.uploadedBy}</span>
                    <span>{new Date(doc.uploadedDate).toLocaleDateString()}</span>
                  </div>
                  {doc.notes && (
                    <p className="text-sm text-gray-600 mt-1">{doc.notes}</p>
                  )}
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Badge>{doc.status}</Badge>
                <Button variant="outline" size="sm">
                  <Download className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );
}