import * as XLSX from 'xlsx';

export interface ExportOptions {
  type: string;
  format: 'xlsx' | 'csv';
  data?: any;
  projectId?: string;
  context?: string;
}

export interface ExportResult {
  success: boolean;
  filename: string;
  url?: string;
  error?: string;
}

class ExcelExportService {
  private templates = {
    'fitzgerald-template': {
      name: 'Fitzgerald_Gardens_Template',
      sheets: ['Inputs', 'Scenarios', 'Revenue Inputs', 'Cost Inputs', 'Cash Flows', 'Outputs']
    },
    'financial-summary': {
      name: 'Financial_Summary',
      sheets: ['Summary', 'Revenue', 'Costs', 'Projections']
    },
    'boq-export': {
      name: 'BOQ_Export',
      sheets: ['BOQ Items', 'Variations', 'Approvals', 'Summary']
    },
    'development-appraisal': {
      name: 'Development_Appraisal',
      sheets: ['Appraisal', 'Cash Flow', 'Returns', 'Sensitivity']
    }
  };

  async exportToExcel(options: ExportOptions): Promise<ExportResult> {
    try {
      // Log warning about template data
      console.warn('⚠️ TEMPLATE DATA EXPORT WARNING ⚠️');
      console.warn('- All rates require verification');
      console.warn('- Data is for template purposes only');
      console.warn('- Professional review required before use');
      
      const workbook = await this.createWorkbook(options);
      const filename = this.generateFilename(options);
      
      if (options.format === 'csv') {
        return await this.exportAsCSV(workbook, filenameoptions);
      } else {
        return await this.exportAsExcel(workbookfilename);
      }
    } catch (error) {
      console.error('Excel export error:', error);
      return {
        success: false,
        filename: '',
        error: error instanceof Error ? error.message : 'Export failed'
      };
    }
  }

  private async createWorkbook(options: ExportOptions): Promise<XLSX.WorkBook> {
    const workbook = XLSX.utils.book_new();

    switch (options.type) {
      case 'fitzgerald-template':
        return this.createFitzgeraldTemplate(workbookoptions);
      
      case 'financial-summary':
        return this.createFinancialSummary(workbookoptions);
      
      case 'boq-export':
        return this.createBOQExport(workbookoptions);
      
      case 'development-appraisal':
        return this.createDevelopmentAppraisal(workbookoptions);
      
      case 'cash-flow':
        return this.createCashFlowAnalysis(workbookoptions);
      
      case 'current-data':
        return this.createCurrentDataExport(workbookoptions);
      
      default:
        return this.createGenericExport(workbookoptions);
    }
  }

  private createFitzgeraldTemplate(workbook: XLSX.WorkBook, options: ExportOptions): XLSX.WorkBook {
    // Inputs Sheet
    const inputsData = [
      ['⚠️ TEMPLATE ONLY - VERIFY ALL DATA BEFORE USE ⚠️', '', '', ''],
      ['Fitzgerald Gardens Development Appraisal', '', '', ''],
      ['⚠️ ALL RATES AND COSTS REQUIRE VERIFICATION ⚠️', '', '', ''],
      ['Generated: ' + new Date().toLocaleDateString(), '', '', ''],
      ['', '', '', ''],
      ['⚠️ WARNING: Template Data Only', '', '', ''],
      ['• All rates are examples only', '', '', ''],
      ['• Verify with current suppliers', '', '', ''],
      ['• Confirm with project team', '', '', ''],
      ['• Update with actual project data', '', '', ''],
      ['', '', '', ''],
      ['Development Inputs', '', '', ''],
      ['Total Development Value', '€32,500,000', '', ''],
      ['Total Development Cost', '€25,000,000', '', ''],
      ['Land Cost', '€3,000,000', '12%', ''],
      ['Construction Cost', '€17,500,000', '70%', ''],
      ['Professional Fees', '€1,875,000', '7.5%', ''],
      ['Finance Costs', '€1,250,000', '5%', ''],
      ['Marketing Costs', '€625,000', '2.5%', ''],
      ['Contingency', '€750,000', '3%', ''],
      ['', '', '', ''],
      ['Development Timeline', '', '', ''],
      ['Total Period (months)', '36', '', ''],
      ['Construction Period (months)', '24', '', ''],
      ['Sales Period (months)', '30', '', ''],
      ['', '', '', ''],
      ['Unit Mix', '', '', ''],
      ['2-bed apartments', '20', '€345,000', '€6,900,000'],
      ['3-bed semi-detached', '20', '€385,000', '€7,700,000'],
      ['4-bed detached', '10', '€495,000', '€4,950,000'],
      ['Total Units', '50', '', '€19,550,000']
    ];
    
    const inputsSheet = XLSX.utils.aoa_to_sheet(inputsData);
    
    // Set column widths
    inputsSheet['!cols'] = [
      { width: 25 },
      { width: 15 },
      { width: 10 },
      { width: 15 }
    ];
    
    XLSX.utils.book_append_sheet(workbook, inputsSheet, 'Inputs');

    // Cash Flow Sheet
    const cashFlowData = this.generateCashFlowData();
    const cashFlowSheet = XLSX.utils.aoa_to_sheet(cashFlowData);
    XLSX.utils.book_append_sheet(workbook, cashFlowSheet, 'Cash Flow');

    // Summary Sheet
    const summaryData = [
      ['Fitzgerald Gardens - Financial Summary', '', '', ''],
      ['', '', '', ''],
      ['Key Metrics', '', '', ''],
      ['Gross Development Value', '€32,500,000', '', ''],
      ['Total Development Cost', '€25,000,000', '', ''],
      ['Gross Profit', '€7,500,000', '', ''],
      ['Profit Margin', '23.08%', '', ''],
      ['', '', '', ''],
      ['Returns Analysis', '', '', ''],
      ['ROI', '30.0%', '', ''],
      ['IRR', '24.5%', '', ''],
      ['NPV @ 8%', '€4,250,000', '', ''],
      ['Payback Period', '2.8 years', '', '']
    ];
    
    const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');

    return workbook;
  }

  private createFinancialSummary(workbook: XLSX.WorkBook, options: ExportOptions): XLSX.WorkBook {
    const data = [
      ['⚠️ TEMPLATE DATA - VERIFY BEFORE USE ⚠️', '', '', ''],
      ['Financial Summary Report', '', '', ''],
      ['Generated: ' + new Date().toLocaleDateString(), '', '', ''],
      ['⚠️ All financial data requires verification', '', '', ''],
      ['', '', '', ''],
      ['Revenue Summary', '', '', ''],
      ['Gross Revenue', '€32,500,000', '', ''],
      ['Net Revenue', '€30,875,000', '', ''],
      ['', '', '', ''],
      ['Cost Summary', '', '', ''],
      ['Land Cost', '€3,000,000', '12.0%', ''],
      ['Construction', '€17,500,000', '70.0%', ''],
      ['Professional Fees', '€1,875,000', '7.5%', ''],
      ['Finance Costs', '€1,250,000', '5.0%', ''],
      ['Other Costs', '€1,375,000', '5.5%', ''],
      ['Total Costs', '€25,000,000', '100.0%', ''],
      ['', '', '', ''],
      ['Profitability', '', '', ''],
      ['Gross Profit', '€7,500,000', '', ''],
      ['Profit Margin', '23.08%', '', ''],
      ['ROI', '30.0%', '', '']
    ];
    
    const sheet = XLSX.utils.aoa_to_sheet(data);
    XLSX.utils.book_append_sheet(workbook, sheet, 'Financial Summary');
    
    return workbook;
  }

  private createBOQExport(workbook: XLSX.WorkBook, options: ExportOptions): XLSX.WorkBook {
    // BOQ Items Sheet
    const boqData = [
      ['⚠️ TEMPLATE BOQ - ALL RATES REQUIRE VERIFICATION ⚠️', '', '', '', '', '', ''],
      ['Bills of Quantities Export', '', '', '', '', '', ''],
      ['Project: ' + (options.projectId || 'Current Project'), '', '', '', '', '', ''],
      ['Generated: ' + new Date().toLocaleDateString(), '', '', '', '', '', ''],
      ['⚠️ WARNING: Verify all rates with current suppliers', '', '', '', '', '', ''],
      ['', '', '', '', '', '', ''],
      ['Item No.', 'Category', 'Description', 'Quantity', 'Unit', 'Rate (€)', 'Amount (€)'],
      ['1.1', 'Site Preparation', 'Site clearance and preparation', '1', 'item', '25,000', '25,000'],
      ['1.2', 'Site Preparation', 'Temporary site setup', '1', 'item', '15,000', '15,000'],
      ['2.1', 'Foundations', 'Excavation', '500', 'm³', '35', '17,500'],
      ['2.2', 'Foundations', 'Concrete foundations', '150', 'm³', '120', '18,000'],
      ['2.3', 'Foundations', 'Foundation waterproofing', '300', 'm²', '25', '7,500'],
      ['3.1', 'Structural', 'Steel frame', '50', 'tonnes', '2,500', '125,000'],
      ['3.2', 'Structural', 'Precast concrete panels', '200', 'm²', '85', '17,000'],
      ['4.1', 'Roofing', 'Roof structure', '800', 'm²', '45', '36,000'],
      ['4.2', 'Roofing', 'Roof covering', '800', 'm²', '35', '28,000'],
      ['5.1', 'External Works', 'Roads and pavements', '1,200', 'm²', '65', '78,000'],
      ['5.2', 'External Works', 'Landscaping', '1', 'item', '45,000', '45,000'],
      ['', '', '', '', '', 'TOTAL:', '412,000']
    ];
    
    const boqSheet = XLSX.utils.aoa_to_sheet(boqData);
    boqSheet['!cols'] = [
      { width: 8 },
      { width: 15 },
      { width: 30 },
      { width: 10 },
      { width: 8 },
      { width: 12 },
      { width: 12 }
    ];
    
    XLSX.utils.book_append_sheet(workbook, boqSheet, 'BOQ Items');

    // Variations Sheet
    const variationsData = [
      ['BOQ Variations', '', '', '', '', ''],
      ['', '', '', '', '', ''],
      ['Variation No.', 'Description', 'Original Amount', 'Variation Amount', 'New Amount', 'Status'],
      ['V001', 'Additional excavation due to soil conditions', '17,500', '5,250', '22,750', 'Approved'],
      ['V002', 'Upgrade to premium roof tiles', '28,000', '12,000', '40,000', 'Pending'],
      ['V003', 'Additional landscaping features', '45,000', '8,500', '53,500', 'Approved'],
      ['', '', '', 'Total Variations:', '25,750', '']
    ];
    
    const variationsSheet = XLSX.utils.aoa_to_sheet(variationsData);
    XLSX.utils.book_append_sheet(workbook, variationsSheet, 'Variations');

    return workbook;
  }

  private createDevelopmentAppraisal(workbook: XLSX.WorkBook, options: ExportOptions): XLSX.WorkBook {
    // Based on the real Fitzgerald Gardens model structure
    const appraisalData = [
      ['Development Appraisal - Fitzgerald Gardens Model', '', '', ''],
      ['', '', '', ''],
      ['DEVELOPMENT INPUTS', '', '', ''],
      ['Site Area (acres)', '5.2', '', ''],
      ['Net Developable Area (acres)', '4.1', '', ''],
      ['Total Units', '50', '', ''],
      ['Density (units/acre)', '12.2', '', ''],
      ['', '', '', ''],
      ['REVENUE ANALYSIS', '', '', ''],
      ['Unit Type', 'Units', 'Price (€)', 'Total (€)'],
      ['2-bed apartments', '20', '345,000', '6,900,000'],
      ['3-bed semi-detached', '20', '385,000', '7,700,000'],
      ['4-bed detached', '10', '495,000', '4,950,000'],
      ['TOTAL REVENUE', '50', '', '19,550,000'],
      ['', '', '', ''],
      ['COST ANALYSIS', '', '', ''],
      ['Land Cost', '', '', '3,000,000'],
      ['Site Development', '', '', '850,000'],
      ['Construction Cost', '', '', '17,500,000'],
      ['Professional Fees (7.5%)', '', '', '1,875,000'],
      ['Finance Costs', '', '', '1,250,000'],
      ['Marketing & Legal', '', '', '625,000'],
      ['Contingency (3%)', '', '', '750,000'],
      ['TOTAL COSTS', '', '', '25,850,000'],
      ['', '', '', ''],
      ['PROFITABILITY', '', '', ''],
      ['Gross Profit', '', '', '7,500,000'],
      ['Profit Margin', '', '23.08%', ''],
      ['Return on Cost', '', '30.0%', '']
    ];
    
    const appraisalSheet = XLSX.utils.aoa_to_sheet(appraisalData);
    XLSX.utils.book_append_sheet(workbook, appraisalSheet, 'Development Appraisal');

    return workbook;
  }

  private createCashFlowAnalysis(workbook: XLSX.WorkBook, options: ExportOptions): XLSX.WorkBook {
    const cashFlowData = this.generateCashFlowData();
    const sheet = XLSX.utils.aoa_to_sheet(cashFlowData);
    XLSX.utils.book_append_sheet(workbook, sheet, 'Cash Flow Analysis');
    
    return workbook;
  }

  private createCurrentDataExport(workbook: XLSX.WorkBook, options: ExportOptions): XLSX.WorkBook {
    const data = options.data || [
      ['Current Data Export', ''],
      ['Generated: ' + new Date().toLocaleDateString(), ''],
      ['No data provided for export', '']
    ];
    
    const sheet = XLSX.utils.aoa_to_sheet(data);
    XLSX.utils.book_append_sheet(workbook, sheet, 'Current Data');
    
    return workbook;
  }

  private createGenericExport(workbook: XLSX.WorkBook, options: ExportOptions): XLSX.WorkBook {
    const data = [
      ['Generic Export', ''],
      ['Type: ' + options.type, ''],
      ['Generated: ' + new Date().toLocaleDateString(), ''],
      ['Context: ' + (options.context || 'N/A'), '']
    ];
    
    const sheet = XLSX.utils.aoa_to_sheet(data);
    XLSX.utils.book_append_sheet(workbook, sheet, 'Export');
    
    return workbook;
  }

  private generateCashFlowData(): any[][] {
    return [
      ['36-Month Cash Flow Projection', '', '', '', '', '', ''],
      ['', '', '', '', '', '', ''],
      ['Month', 'Land Costs', 'Construction', 'Prof. Fees', 'Sales Revenue', 'Net Cash Flow', 'Cumulative'],
      [1, '-3,000,000', '0', '-100,000', '0', '-3,100,000', '-3,100,000'],
      [2, '0', '-200,000', '-50,000', '0', '-250,000', '-3,350,000'],
      [3, '0', '-400,000', '-75,000', '0', '-475,000', '-3,825,000'],
      [4, '0', '-600,000', '-75,000', '0', '-675,000', '-4,500,000'],
      [5, '0', '-800,000', '-100,000', '0', '-900,000', '-5,400,000'],
      [6, '0', '-1,000,000', '-100,000', '1,725,000', '625,000', '-4,775,000'],
      [7, '0', '-1,200,000', '-125,000', '1,725,000', '400,000', '-4,375,000'],
      [8, '0', '-1,400,000', '-125,000', '1,925,000', '400,000', '-3,975,000'],
      [9, '0', '-1,600,000', '-150,000', '1,925,000', '175,000', '-3,800,000'],
      [10, '0', '-1,800,000', '-150,000', '2,475,000', '525,000', '-3,275,000'],
      [11, '0', '-2,000,000', '-175,000', '2,475,000', '300,000', '-2,975,000'],
      [12, '0', '-2,200,000', '-175,000', '2,970,000', '595,000', '-2,380,000'],
      ['...', '...', '...', '...', '...', '...', '...'],
      [36, '0', '0', '-50,000', '2,475,000', '2,425,000', '7,500,000']
    ];
  }

  private generateFilename(options: ExportOptions): string {
    const timestamp = new Date().toISOString().slice(010);
    const template = this.templates[options.type as keyof typeof this.templates];
    const baseName = template?.name || options.type.replace(/-/g, '_');
    
    return `${baseName}_${timestamp}.${options.format}`;
  }

  private async exportAsExcel(workbook: XLSX.WorkBook, filename: string): Promise<ExportResult> {
    const wbout = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    const blob = new Blob([wbout], { type: 'application/octet-stream' });
    
    // Create download link
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    return {
      success: true,
      filename,
      url
    };
  }

  private async exportAsCSV(workbook: XLSX.WorkBook, filename: string, options: ExportOptions): Promise<ExportResult> {
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const csv = XLSX.utils.sheet_to_csv(worksheet);
    
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename.replace('.xlsx', '.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    return {
      success: true,
      filename: filename.replace('.xlsx', '.csv'),
      url
    };
  }
}

export const excelExportService = new ExcelExportService();