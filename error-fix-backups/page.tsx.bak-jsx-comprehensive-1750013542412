'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { 
  CheckCircle, 
  Clock, 
  ArrowRight, 
  FileText, 
  CreditCard, 
  Home, 
  Scale, 
  Calculator,
  ChevronRight,
  Target,
  Download,
  Upload,
  MessageSquare,
  Users
} from 'lucide-react';

// Mock user data - in real implementation, this would come from your backend
const mockUser = {
  id: 'user-123',
  name: 'John Doe',
  email: 'john.doe@email.com',
  phone: '+353 87 123 4567',
  joinedDate: '2024-01-15',
  currentPhase: 'financing',
  completedPhases: ['planning'],
  profile: {
    isFirstTimeBuyer: true,
    budget: 350000,
    preferredLocations: ['Dublin', 'Cork'],
    propertyType: 'house',
    bedrooms: 3,
    timeline: '6-months'
  }
};

// Journey phases with detailed tracking
const journeyPhases = [
  {
    id: 'planning',
    title: 'Planning',
    status: 'completed',
    completedDate: '2024-01-20',
    duration: '2 days',
    description: 'Define your requirements and set your budget',
    icon: <Target className="w-6 h-6" />,
    color: 'green',
    progress: 100,
    tasks: [
      { id: 1, title: 'Complete property preferences questionnaire', completed: true, dueDate: '2024-01-16' },
      { id: 2, title: 'Set budget and financing goals', completed: true, dueDate: '2024-01-17' },
      { id: 3, title: 'Research preferred locations', completed: true, dueDate: '2024-01-18' },
      { id: 4, title: 'Define must-have features', completed: true, dueDate: '2024-01-19' },
      { id: 5, title: 'Review buying timeline', completed: true, dueDate: '2024-01-20' }
    ],
    documents: [
      { name: 'Property Preferences Summary', status: 'completed', uploadDate: '2024-01-20' },
      { name: 'Budget Planning Worksheet', status: 'completed', uploadDate: '2024-01-18' }
    ],
    milestones: [
      { title: 'Preferences Defined', date: '2024-01-18', completed: true },
      { title: 'Budget Confirmed', date: '2024-01-20', completed: true }
    ]
  },
  {
    id: 'financing',
    title: 'Financing',
    status: 'in-progress',
    startDate: '2024-01-21',
    duration: '2-4 weeks',
    description: 'Secure your mortgage approval and prepare finances',
    icon: <Calculator className="w-6 h-6" />,
    color: 'blue',
    progress: 65,
    tasks: [
      { id: 1, title: 'Apply for mortgage approval in principle', completed: true, dueDate: '2024-01-23' },
      { id: 2, title: 'Upload financial documents', completed: true, dueDate: '2024-01-25' },
      { id: 3, title: 'Complete Help-to-Buy application', completed: false, dueDate: '2024-01-30' },
      { id: 4, title: 'Meet with mortgage advisor', completed: false, dueDate: '2024-02-02' },
      { id: 5, title: 'Finalize mortgage terms', completed: false, dueDate: '2024-02-05' }
    ],
    documents: [
      { name: 'Mortgage Application', status: 'completed', uploadDate: '2024-01-23' },
      { name: 'Income Verification', status: 'completed', uploadDate: '2024-01-25' },
      { name: 'Bank Statements', status: 'completed', uploadDate: '2024-01-25' },
      { name: 'Help-to-Buy Application', status: 'pending', uploadDate: null }
    ],
    milestones: [
      { title: 'Mortgage Application Submitted', date: '2024-01-23', completed: true },
      { title: 'Documents Uploaded', date: '2024-01-25', completed: true },
      { title: 'Initial Approval', date: '2024-02-01', completed: false },
      { title: 'Final Approval', date: '2024-02-05', completed: false }
    ]
  },
  {
    id: 'property-search',
    title: 'Property Search',
    status: 'upcoming',
    startDate: '2024-02-06',
    duration: '2-6 weeks',
    description: 'Find and select your perfect property',
    icon: <Home className="w-6 h-6" />,
    color: 'purple',
    progress: 0,
    tasks: [
      { id: 1, title: 'Browse AI-matched properties', completed: false, dueDate: '2024-02-08' },
      { id: 2, title: 'Schedule virtual property tours', completed: false, dueDate: '2024-02-10' },
      { id: 3, title: 'Visit shortlisted properties', completed: false, dueDate: '2024-02-15' },
      { id: 4, title: 'Compare properties and make decision', completed: false, dueDate: '2024-02-20' },
      { id: 5, title: 'Property customization consultation', completed: false, dueDate: '2024-02-22' }
    ],
    documents: [
      { name: 'Property Shortlist', status: 'pending', uploadDate: null },
      { name: 'Viewing Reports', status: 'pending', uploadDate: null },
      { name: 'Property Comparison Matrix', status: 'pending', uploadDate: null }
    ],
    milestones: [
      { title: 'Shortlist Created', date: '2024-02-10', completed: false },
      { title: 'Viewings Completed', date: '2024-02-15', completed: false },
      { title: 'Property Selected', date: '2024-02-20', completed: false }
    ]
  },
  {
    id: 'reservation',
    title: 'Reservation',
    status: 'upcoming',
    startDate: '2024-02-23',
    duration: '1-2 days',
    description: 'Secure your chosen property with digital reservation',
    icon: <CreditCard className="w-6 h-6" />,
    color: 'orange',
    progress: 0,
    tasks: [
      { id: 1, title: 'Digital reservation form completion', completed: false, dueDate: '2024-02-23' },
      { id: 2, title: 'Upload ID and proof of funds', completed: false, dueDate: '2024-02-23' },
      { id: 3, title: 'Pay reservation fee', completed: false, dueDate: '2024-02-24' },
      { id: 4, title: 'Receive reservation confirmation', completed: false, dueDate: '2024-02-24' },
      { id: 5, title: 'Property customization finalization', completed: false, dueDate: '2024-02-25' }
    ],
    documents: [
      { name: 'Reservation Agreement', status: 'pending', uploadDate: null },
      { name: 'ID Documents', status: 'pending', uploadDate: null },
      { name: 'Proof of Funds', status: 'pending', uploadDate: null },
      { name: 'Customization Selections', status: 'pending', uploadDate: null }
    ],
    milestones: [
      { title: 'Reservation Submitted', date: '2024-02-23', completed: false },
      { title: 'Property Secured', date: '2024-02-24', completed: false }
    ]
  },
  {
    id: 'legal-process',
    title: 'Legal Process',
    status: 'upcoming',
    startDate: '2024-02-26',
    duration: '4-8 weeks',
    description: 'Complete legal requirements and contract exchange',
    icon: <Scale className="w-6 h-6" />,
    color: 'indigo',
    progress: 0,
    tasks: [
      { id: 1, title: 'Solicitor appointment from panel', completed: false, dueDate: '2024-02-28' },
      { id: 2, title: 'Contract review and explanation', completed: false, dueDate: '2024-03-05' },
      { id: 3, title: 'Property searches and surveys', completed: false, dueDate: '2024-03-15' },
      { id: 4, title: 'Digital contract signing', completed: false, dueDate: '2024-03-20' },
      { id: 5, title: 'Exchange of contracts', completed: false, dueDate: '2024-03-25' }
    ],
    documents: [
      { name: 'Sale Contract', status: 'pending', uploadDate: null },
      { name: 'Legal Searches', status: 'pending', uploadDate: null },
      { name: 'Building Survey', status: 'pending', uploadDate: null },
      { name: 'Title Deeds', status: 'pending', uploadDate: null }
    ],
    milestones: [
      { title: 'Solicitor Appointed', date: '2024-02-28', completed: false },
      { title: 'Contracts Signed', date: '2024-03-20', completed: false },
      { title: 'Contracts Exchanged', date: '2024-03-25', completed: false }
    ]
  }
];

// Activity feed for recent updates
const recentActivity = [
  {
    id: 1,
    type: 'document',
    title: 'Bank statements uploaded successfully',
    description: 'Your mortgage application is now complete',
    timestamp: '2 hours ago',
    icon: <FileText className="w-4 h-4" />,
    color: 'green'
  },
  {
    id: 2,
    type: 'milestone',
    title: 'Mortgage application submitted',
    description: 'Awaiting initial response from lender',
    timestamp: '1 day ago',
    icon: <CheckCircle className="w-4 h-4" />,
    color: 'blue'
  },
  {
    id: 3,
    type: 'task',
    title: 'Help-to-Buy application due soon',
    description: 'Complete by January 30th to stay on track',
    timestamp: '2 days ago',
    icon: <Clock className="w-4 h-4" />,
    color: 'orange'
  },
  {
    id: 4,
    type: 'message',
    title: 'Message from your advisor',
    description: 'Sarah has sent you mortgage rate updates',
    timestamp: '3 days ago',
    icon: <MessageSquare className="w-4 h-4" />,
    color: 'purple'
  }
];

export default function BuyerJourneyPage() {
  const [activePhase, setActivePhase] = useState('financing');
  const [showDetails, setShowDetails] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);

  const currentPhase = journeyPhases.find(phase => phase.id === activePhase);
  const overallProgress = Math.round((journeyPhases.filter(p => p.status === 'completed').length / journeyPhases.length) * 100);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Your Buying Journey</h1>
              <p className="text-gray-600 mt-1">Track your progress through the home buying process</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <div className="text-2xl font-bold text-blue-600">{overallProgress}%</div>
                <div className="text-sm text-gray-500">Complete</div>
              </div>
              <div className="w-16 h-16 relative">
                <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                  <path
                    d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                    fill="none"
                    stroke="#e5e7eb"
                    strokeWidth="2"
                  />
                  <path
                    d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                    fill="none"
                    stroke="#3b82f6"
                    strokeWidth="2"
                    strokeDasharray={`${overallProgress}, 100`}
                    strokeLinecap="round"
                  />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Journey Timeline */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-sm border p-6 mb-8">
              <h2 className="text-xl font-bold text-gray-900 mb-6">Journey Tracker</h2>
              
              {/* Progress Timeline */}
              <div className="relative">
                {journeyPhases.map((phase, index) => (
                  <div key={phase.id} className="flex items-start mb-8 last:mb-0">
                    {/* Timeline Line */}
                    {index < journeyPhases.length - 1 && (
                      <div className="absolute left-6 top-12 w-0.5 h-20 bg-gray-200"></div>
                    )}
                    
                    {/* Phase Icon */}
                    <div className={`relative z-10 flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${
                      phase.status === 'completed' ? 'bg-green-100 text-green-600' :
                      phase.status === 'in-progress' ? 'bg-blue-100 text-blue-600' :
                      'bg-gray-100 text-gray-400'
                    }`}>
                      {phase.status === 'completed' ? (
                        <CheckCircle className="w-6 h-6" />
                      ) : phase.status === 'in-progress' ? (
                        phase.icon
                      ) : (
                        <Clock className="w-6 h-6" />
                      )}
                    </div>
                    
                    {/* Phase Content */}
                    <div className="ml-6 flex-1">
                      <div className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                        activePhase === phase.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200 bg-white hover:border-gray-300'
                      }`} onClick={() => setActivePhase(phase.id)}>
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="text-lg font-semibold text-gray-900">{phase.title}</h3>
                          <div className="flex items-center space-x-2">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              phase.status === 'completed' ? 'bg-green-100 text-green-800' :
                              phase.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                              'bg-gray-100 text-gray-800'
                            }`}>
                              {phase.status === 'completed' ? 'Completed' :
                               phase.status === 'in-progress' ? 'In Progress' :
                               'Upcoming'}
                            </span>
                            <span className="text-xs text-gray-500">{phase.duration}</span>
                          </div>
                        </div>
                        
                        <p className="text-gray-600 mb-3">{phase.description}</p>
                        
                        {/* Progress Bar */}
                        {phase.status !== 'upcoming' && (
                          <div className="mb-3">
                            <div className="flex justify-between text-sm mb-1">
                              <span className="text-gray-500">Progress</span>
                              <span className="text-gray-700">{phase.progress}%</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2">
                              <div 
                                className={`h-2 rounded-full ${phase.status === 'completed' ? 'bg-green-500' : 'bg-blue-500'}`}
                                style={{ width: `${phase.progress}%` }}
                              ></div>
                            </div>
                          </div>
                        )}

                        <div className="flex items-center justify-between">
                          <div className="text-sm text-gray-500">
                            {phase.completedDate && `Completed ${phase.completedDate}`}
                            {phase.startDate && !phase.completedDate && `Started ${phase.startDate}`}
                            {!phase.startDate && !phase.completedDate && `Starts ${phase.startDate || 'TBD'}`}
                          </div>
                          <ChevronRight className={`w-4 h-4 transition-transform ${
                            activePhase === phase.id ? 'rotate-90' : ''
                          }`} />
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Phase Details */}
            {currentPhase && (
              <div className="bg-white rounded-xl shadow-sm border p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-bold text-gray-900">Current Phase: {currentPhase.title}</h2>
                  <Link 
                    href={`/buyer/journey/${currentPhase.id}`}
                    className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Continue {currentPhase.title}
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Link>
                </div>

                {/* Tasks */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold mb-4">Tasks ({currentPhase.tasks.filter(t => t.completed).length}/{currentPhase.tasks.length})</h3>
                  <div className="space-y-3">
                    {currentPhase.tasks.map((task) => (
                      <div key={task.id} className={`flex items-center p-3 rounded-lg border ${
                        task.completed ? 'bg-green-50 border-green-200' : 'bg-white border-gray-200'
                      }`}>
                        <div className={`w-5 h-5 rounded-full flex items-center justify-center mr-3 ${
                          task.completed ? 'bg-green-500 text-white' : 'bg-gray-200'
                        }`}>
                          {task.completed && <CheckCircle className="w-3 h-3" />}
                        </div>
                        <div className="flex-1">
                          <span className={task.completed ? 'line-through text-gray-500' : 'text-gray-900'}>
                            {task.title}
                          </span>
                          <div className="text-xs text-gray-500 mt-1">Due: {task.dueDate}</div>
                        </div>
                        {!task.completed && (
                          <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                            Start Task
                          </button>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Documents */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold mb-4">Documents</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {currentPhase.documents.map((doc, index) => (
                      <div key={index} className="flex items-center p-3 border rounded-lg">
                        <FileText className="w-5 h-5 text-gray-400 mr-3" />
                        <div className="flex-1">
                          <div className="text-sm font-medium text-gray-900">{doc.name}</div>
                          <div className={`text-xs ${
                            doc.status === 'completed' ? 'text-green-600' :
                            doc.status === 'pending' ? 'text-orange-600' :
                            'text-gray-500'
                          }`}>
                            {doc.status === 'completed' ? `Uploaded ${doc.uploadDate}` :
                             doc.status === 'pending' ? 'Upload required' :
                             'Not required yet'}
                          </div>
                        </div>
                        {doc.status === 'pending' && (
                          <button className="text-blue-600 hover:text-blue-800">
                            <Upload className="w-4 h-4" />
                          </button>
                        )}
                        {doc.status === 'completed' && (
                          <button className="text-green-600">
                            <Download className="w-4 h-4" />
                          </button>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Milestones */}
                <div>
                  <h3 className="text-lg font-semibold mb-4">Milestones</h3>
                  <div className="space-y-3">
                    {currentPhase.milestones.map((milestone, index) => (
                      <div key={index} className="flex items-center">
                        <div className={`w-3 h-3 rounded-full mr-3 ${
                          milestone.completed ? 'bg-green-500' : 'bg-gray-300'
                        }`}></div>
                        <div className="flex-1">
                          <span className={milestone.completed ? 'text-green-700' : 'text-gray-600'}>
                            {milestone.title}
                          </span>
                          <div className="text-xs text-gray-500">{milestone.date}</div>
                        </div>
                        {milestone.completed && (
                          <CheckCircle className="w-4 h-4 text-green-500" />
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Phase Selection */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold mb-4">Phase Selection</h3>
              <div className="space-y-3">
                {journeyPhases.map((phase) => (
                  <button
                    key={phase.id}
                    onClick={() => setActivePhase(phase.id)}
                    className={`w-full flex items-center p-3 rounded-lg border text-left transition-all ${
                      activePhase === phase.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${
                      phase.status === 'completed' ? 'bg-green-100 text-green-600' :
                      phase.status === 'in-progress' ? 'bg-blue-100 text-blue-600' :
                      'bg-gray-100 text-gray-400'
                    }`}>
                      {phase.status === 'completed' ? (
                        <CheckCircle className="w-4 h-4" />
                      ) : phase.status === 'in-progress' ? (
                        phase.icon
                      ) : (
                        <Clock className="w-4 h-4" />
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="font-medium text-gray-900">{phase.title}</div>
                      <div className="text-xs text-gray-500">
                        {phase.status === 'completed' ? `Completed ${phase.completedDate}` :
                         phase.status === 'in-progress' ? 'In progress' :
                         'Coming next'}
                      </div>
                    </div>
                    <ArrowRight className="w-4 h-4 text-gray-400" />
                  </button>
                ))}
              </div>
            </div>

            {/* Recent Activity */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
              <div className="space-y-4">
                {recentActivity.map((activity) => (
                  <div key={activity.id} className="flex items-start">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${
                      activity.color === 'green' ? 'bg-green-100 text-green-600' :
                      activity.color === 'blue' ? 'bg-blue-100 text-blue-600' :
                      activity.color === 'orange' ? 'bg-orange-100 text-orange-600' :
                      activity.color === 'purple' ? 'bg-purple-100 text-purple-600' :
                      'bg-gray-100 text-gray-600'
                    }`}>
                      {activity.icon}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="text-sm font-medium text-gray-900">{activity.title}</div>
                      <div className="text-xs text-gray-500 mb-1">{activity.description}</div>
                      <div className="text-xs text-gray-400">{activity.timestamp}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
              <div className="space-y-3">
                <Link href="/buyer/documents" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <FileText className="w-5 h-5 text-gray-600 mr-3" />
                  <span className="text-sm font-medium">Manage Documents</span>
                </Link>
                <Link href="/buyer/messages" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <MessageSquare className="w-5 h-5 text-gray-600 mr-3" />
                  <span className="text-sm font-medium">View Messages</span>
                </Link>
                <Link href="/buyer/calculator" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <Calculator className="w-5 h-5 text-gray-600 mr-3" />
                  <span className="text-sm font-medium">Mortgage Calculator</span>
                </Link>
                <Link href="/buyer/support" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <Users className="w-5 h-5 text-gray-600 mr-3" />
                  <span className="text-sm font-medium">Contact Support</span>
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}