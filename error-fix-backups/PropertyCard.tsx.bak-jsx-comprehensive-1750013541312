'use client';

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Property } from '@/types/models/property';
import { PropertyStatus, PropertyType } from '@/types/enums';
import { getStatusColor } from '@/types/enums';
import { formatPrice } from '@/utils/format';
import { usePropertyAnalytics } from '@/hooks/usePropertyAnalytics';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  Bed, 
  Bath, 
  Square, 
  MapPin, 
  Eye,
  Camera,
  Video
} from 'lucide-react';
import clsx from 'clsx';

interface PropertyCardProps {
  property: Property;
  variant?: 'default' | 'minimal' | 'detailed' | 'horizontal';
  className?: string;
  onViewDetails?: () => void;
  priority?: boolean;
  showDevelopmentName?: boolean;
}

export const PropertyCard: React.FC<PropertyCardProps> = React.memo(({
  property,
  variant = 'default',
  className,
  onViewDetails,
  priority = false,
  showDevelopmentName = true}) => {
  const analytics = usePropertyAnalytics();

  // Get primary image
  const primaryImage = property.images?.find(img => img.isPrimary) || property.images?.[0];
  const imageUrl = primaryImage?.url || '/images/placeholder-property.jpg';
  const imageCount = property.images?.length || 0;

  // Handle property click
  const handleClick = (e: React.MouseEvent) => {
    e.preventDefault();

    // Track analytics
    analytics.trackPropertyViewed({
      id: property.id,
      name: property.name,
      type: property.type,
      price: property.price,
      bedrooms: property.bedrooms,
      bathrooms: property.bathrooms,
      developmentId: property.developmentId,
      developmentName: property.development?.name,
      status: property.status}, 'property_card');

    if (onViewDetails) {
      onViewDetails();
    }
  };

  // Format location
  const location = property.location
    ? `${property.location.city}, ${property.location.county}`
    : property.development?.location || 'Location TBC';

  // Check for special features
  const hasVirtualTour = !!property.virtualTourUrl;
  const hasParking = property.specifications?.parkingSpaces && property.specifications.parkingSpaces> 0;
  const isReduced = property.originalPrice && property.price <property.originalPrice;
  const reductionPercentage = isReduced
    ? Math.round((1 - property.price / property.originalPrice!) * 100)
    : 0;

  if (variant === 'horizontal') {
    return (
      <Card className={clsx('overflow-hidden hover:shadow-lg transition-all duration-300', className)}>
        <div className="flex flex-col md:flex-row">
          {/* Image Section */}
          <div className="relative w-full md:w-1/3 h-48 md:h-auto">
            <Link href={`/properties/${property.id}`} onClick={handleClick}>
              <Image
                src={imageUrl}
                alt={property.name}
                fill
                className="object-cover"
                sizes="(max-width: 768px) 100vw, 33vw"
                priority={priority}
              />
              {imageCount> 1 && (
                <div className="absolute bottom-2 right-2 bg-black/70 text-white px-2 py-1 rounded flex items-center gap-1 text-sm">
                  <Camera className="h-3 w-3" />
                  {imageCount}
                </div>
              )}
              {hasVirtualTour && (
                <div className="absolute top-2 right-2 bg-black/70 text-white p-1.5 rounded">
                  <Video className="h-4 w-4" />
                </div>
              )}
            </Link>
          </div>

          {/* Content Section */}
          <CardContent className="flex-1 p-4 md:p-6">
            <div className="flex justify-between items-start mb-2">
              <div className="flex-1">
                <Link href={`/properties/${property.id}`} onClick={handleClick}>
                  <h3 className="text-xl font-semibold text-gray-900 hover:text-blue-600 transition-colors line-clamp-1">
                    {property.name}
                  </h3>
                </Link>
                {showDevelopmentName && property.development && (
                  <p className="text-sm text-gray-600 mt-1">{property.development.name}</p>
                )}
                <div className="flex items-center gap-1 text-sm text-gray-500 mt-1">
                  <MapPin className="h-3 w-3" />
                  {location}
                </div>
              </div>
              <Badge className={clsx('ml-2', getStatusColor(property.status))}>
                {property.status.replace(/_/g, ' ')}
              </Badge>
            </div>

            {/* Price */}
            <div className="mb-3">
              <span className="text-2xl font-bold text-gray-900">{formatPrice(property.price)}</span>
              {isReduced && property.originalPrice && (
                <span className="ml-2">
                  <Badge variant="destructive" className="text-xs">
                    {reductionPercentage}% OFF
                  </Badge>
                  <span className="text-sm text-gray-500 line-through ml-2">
                    {formatPrice(property.originalPrice)}
                  </span>
                </span>
              )}
            </div>

            {/* Features */}
            <div className="flex flex-wrap gap-4 text-sm text-gray-600 mb-3">
              <span className="flex items-center gap-1">
                <Bed className="h-4 w-4" />
                {property.bedrooms} Bed{property.bedrooms !== 1 ? 's' : ''}
              </span>
              <span className="flex items-center gap-1">
                <Bath className="h-4 w-4" />
                {property.bathrooms} Bath{property.bathrooms !== 1 ? 's' : ''}
              </span>
              <span className="flex items-center gap-1">
                <Square className="h-4 w-4" />
                {property.size} sq ft
              </span>
              <span className="text-gray-500">â€¢ {property.type.replace(/_/g, ' ')}</span>
            </div>

            {/* Description */}
            {property.description && (
              <p className="text-sm text-gray-600 line-clamp-2 mb-3">{property.description}</p>
            )}

            {/* Action Buttons */}
            <div className="flex gap-2">
              <Button
                variant="default"
                size="sm"
                className="flex-1"
                onClick={handleClick}
              >
                <Eye className="h-4 w-4 mr-1" />
                View Details
              </Button>
              {property.status === PropertyStatus.Available && (
                <Button
                  variant="outline"
                  size="sm"
                  className="flex-1"
                  asChild
                >
                  <Link href={`/properties/${property.id}/reserve`}>
                    Reserve Now
                  </Link>
                </Button>
              )}
            </div>
          </CardContent>
        </div>
      </Card>
    );
  }

  // Default vertical card variant
  return (
    <Card className={clsx(
      'overflow-hidden hover:shadow-lg transition-all duration-300 group',
      className
    )}>
      {/* Image Section */}
      <div className="relative h-56 w-full">
        <Link href={`/properties/${property.id}`} onClick={handleClick}>
          <Image
            src={imageUrl}
            alt={property.name}
            fill
            className="object-cover group-hover:scale-105 transition-transform duration-300"
            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
            priority={priority}
          />
          {/* Badges */}
          <div className="absolute top-2 left-2 flex flex-wrap gap-1">
            {isReduced && (
              <Badge variant="destructive" className="text-xs">
                {reductionPercentage}% OFF
              </Badge>
            )}
            {property.features?.includes('New Build') && (
              <Badge variant="default" className="text-xs bg-blue-600">
                New
              </Badge>
            )}
          </div>

          {/* Status Badge */}
          <div className="absolute top-2 right-2">
            <Badge className={getStatusColor(property.status)}>
              {property.status.replace(/_/g, ' ')}
            </Badge>
          </div>

          {/* Image Count & Virtual Tour */}
          <div className="absolute bottom-2 right-2 flex gap-2">
            {imageCount> 1 && (
              <div className="bg-black/70 text-white px-2 py-1 rounded flex items-center gap-1 text-sm">
                <Camera className="h-3 w-3" />
                {imageCount}
              </div>
            )}
            {hasVirtualTour && (
              <div className="bg-black/70 text-white p-1.5 rounded">
                <Video className="h-4 w-4" />
              </div>
            )}
          </div>
        </Link>
      </div>

      {/* Content Section */}
      <CardContent className="p-4">
        {/* Title & Development */}
        <Link href={`/properties/${property.id}`} onClick={handleClick}>
          <h3 className="text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-1">
            {property.name}
          </h3>
        </Link>

        {showDevelopmentName && property.development && (
          <p className="text-sm text-gray-600 mt-1 line-clamp-1">
            {property.development.name}
          </p>
        )}

        {/* Location */}
        <div className="flex items-center gap-1 text-sm text-gray-500 mt-1">
          <MapPin className="h-3 w-3" />
          {location}
        </div>

        {/* Price */}
        <div className="mt-3">
          <span className="text-xl font-bold text-gray-900">{formatPrice(property.price)}</span>
          {isReduced && property.originalPrice && (
            <span className="text-sm text-gray-500 line-through ml-2">
              {formatPrice(property.originalPrice)}
            </span>
          )}
        </div>

        {/* Features */}
        <div className="flex justify-between text-sm text-gray-600 mt-3 pt-3 border-t">
          <span className="flex items-center gap-1">
            <Bed className="h-4 w-4" />
            {property.bedrooms} Bed
          </span>
          <span className="flex items-center gap-1">
            <Bath className="h-4 w-4" />
            {property.bathrooms} Bath
          </span>
          <span className="flex items-center gap-1">
            <Square className="h-4 w-4" />
            {property.size} sq ft
          </span>
        </div>

        {/* Additional Features for detailed variant */}
        {variant === 'detailed' && (
          <>
            {property.amenities && property.amenities.length> 0 && (
              <div className="mt-3 pt-3 border-t">
                <div className="flex flex-wrap gap-1">
                  {property.amenities.slice(0, 3).map((amenity: any) => (
                    <Badge key={amenity} variant="secondary" className="text-xs">
                      {amenity}
                    </Badge>
                  ))}
                  {property.amenities.length> 3 && (
                    <Badge variant="secondary" className="text-xs">
                      +{property.amenities.length - 3} more
                    </Badge>
                  )}
                </div>
              </div>
            )}

            {/* Quick Actions */}
            <div className="flex gap-2 mt-4">
              <Button
                variant="default"
                size="sm"
                className="flex-1"
                onClick={handleClick}
              >
                View Details
              </Button>
              {property.status === PropertyStatus.Available && (
                <Button
                  variant="outline"
                  size="sm"
                  asChild
                >
                  <Link href={`/properties/${property.id}/viewing`}>
                    Book Viewing
                  </Link>
                </Button>
              )}
            </div>
          </>
        )}
      </CardContent>
    </Card>
  );
});

PropertyCard.displayName = 'PropertyCard';