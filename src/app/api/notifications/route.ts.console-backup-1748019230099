// Notification API Routes
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import notificationService from '@/services/notificationService';
import authService from '@/services/authService';
import { z } from 'zod';

const prisma = new PrismaClient();

// Validation schemas
const sendNotificationSchema = z.object({
  to: z.string().email(),
  subject: z.string(),
  body: z.string(),
  htmlBody: z.string().optional(),
  attachments: z.array(z.object({
    filename: z.string(),
    content: z.string(),
    contentType: z.string().optional()
  })).optional()
});

const scheduleNotificationSchema = sendNotificationSchema.extend({
  sendAt: z.string().datetime()
});

const updatePreferencesSchema = z.object({
  pushNotifications: z.boolean().optional(),
  transactionAlerts: z.boolean().optional(),
  paymentReminders: z.boolean().optional(),
  documentUpdates: z.boolean().optional(),
  marketingCommunications: z.boolean().optional()
});

// GET /api/notifications - Get user notifications
export async function GET(request: NextRequest) {
  try {
    const authorization = request.headers.get('authorization');
    
    if (!authorization || !authorization.startsWith('Bearer ')) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      );
    }

    const token = authorization.substring(7);
    
    try {
      const payload = await authService.verifyToken(token);
      const { searchParams } = new URL(request.url);
      
      const filter: any = { userId: payload.userId };
      
      // Add filters from query params
      if (searchParams.get('read') !== null) {
        filter.isRead = searchParams.get('read') === 'true';
      }
      
      if (searchParams.get('type')) {
        filter.type = searchParams.get('type');
      }
      
      if (searchParams.get('priority')) {
        filter.priority = searchParams.get('priority');
      }

      // Mock notifications since there's no notification model in Prisma yet
      const notifications = [
        {
          id: '1',
          userId: payload.userId,
          title: 'Document approval required',
          message: 'Please review and approve the latest documents',
          type: 'DOCUMENT',
          priority: 'HIGH',
          read: false,
          createdAt: new Date().toISOString(),
          actionUrl: '/documents/pending'
        },
        {
          id: '2',
          userId: payload.userId,
          title: 'Payment due',
          message: 'Your next payment is due in 5 days',
          type: 'PAYMENT',
          priority: 'MEDIUM',
          read: true,
          createdAt: new Date(Date.now() - 86400000).toISOString(),
          actionUrl: '/transactions/payments'
        }
      ];

      return NextResponse.json({ 
        success: true, 
        data: notifications
      });
    } catch (error) {
      return NextResponse.json(
        { success: false, error: 'Invalid token' },
        { status: 401 }
      );
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Failed to get notifications';
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 500 }
    );
  }
}

// POST /api/notifications - Send or schedule notification
export async function POST(request: NextRequest) {
  try {
    const authorization = request.headers.get('authorization');
    
    if (!authorization || !authorization.startsWith('Bearer ')) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      );
    }

    const token = authorization.substring(7);
    const body: any = await request.json();
    const action = body.action || 'send';
    
    try {
      const payload = await authService.verifyToken(token);
      
      // Check permissions
      const canSendNotifications = await authService.checkPermission(
        payload.userId,
        'notifications',
        'send'
      );

      if (!canSendNotifications) {
        return NextResponse.json(
          { success: false, error: 'Insufficient permissions' },
          { status: 403 }
        );
      }

      if (action === 'send') {
        // Validate notification data
        const validatedData = sendNotificationSchema.parse(body);
        
        // Send notification immediately
        await notificationService.sendEmail(validatedData);

        return NextResponse.json({ 
          success: true, 
          message: 'Notification sent successfully'
        });
      } else if (action === 'schedule') {
        // Validate scheduled notification data
        const validatedData = scheduleNotificationSchema.parse(body);
        
        // Schedule notification
        await notificationService.scheduleNotification(
          {
            to: validatedData.to,
            subject: validatedData.subject,
            body: validatedData.body,
            htmlBody: validatedData.htmlBody,
            attachments: validatedData.attachments
          },
          new Date(validatedData.sendAt)
        );

        return NextResponse.json({ 
          success: true, 
          message: 'Notification scheduled successfully'
        });
      } else if (action === 'process-scheduled') {
        // Process scheduled notifications
        await notificationService.processScheduledNotifications();

        return NextResponse.json({ 
          success: true, 
          message: 'Scheduled notifications processed'
        });
      } else {
        return NextResponse.json(
          { success: false, error: 'Invalid action' },
          { status: 400 }
        );
      }
    } catch (error) {
      return NextResponse.json(
        { success: false, error: 'Invalid token' },
        { status: 401 }
      );
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { success: false, error: 'Validation error', details: error.errors },
        { status: 400 }
      );
    }

    const errorMessage = error instanceof Error ? error.message : 'Failed to send notification';
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 500 }
    );
  }
}

// PATCH /api/notifications - Update notification status or preferences
export async function PATCH(request: NextRequest) {
  try {
    const authorization = request.headers.get('authorization');
    
    if (!authorization || !authorization.startsWith('Bearer ')) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      );
    }

    const token = authorization.substring(7);
    const body: any = await request.json();
    const action = body.action || 'mark-read';
    
    try {
      const payload = await authService.verifyToken(token);

      if (action === 'mark-read') {
        // Mark notifications as read
        const notificationIds = body.notificationIds;
        
        if (!Array.isArray(notificationIds)) {
          return NextResponse.json(
            { success: false, error: 'notificationIds must be an array' },
            { status: 400 }
          );
        }

        // Mock notification update since there's no notification model in Prisma yet
        // await prisma.notification.updateMany({
        //   where: {
        //     id: { in: notificationIds },
        //     userId: payload.userId
        //   },
        //   data: { 
        //     isRead: true,
        //     readAt: new Date()
        //   }
        // });
        
        // Just pretend it succeeded
        console.log(`Marking notifications as read: ${notificationIds.join(', ')}`);
        // In a real implementation, this would update the notifications in the database

        return NextResponse.json({ 
          success: true, 
          message: 'Notifications marked as read'
        });
      } else if (action === 'update-preferences') {
        // Update notification preferences
        const validatedData = updatePreferencesSchema.parse(body);

        // Mock user preferences update
        // await prisma.user.update({
        //   where: { id: payload.userId },
        //   data: validatedData
        // });
        
        // Just pretend it succeeded
        console.log(`Updating notification preferences for user: ${payload.userId}`, validatedData);
        // In a real implementation, this would update the user preferences in the database

        return NextResponse.json({ 
          success: true, 
          message: 'Notification preferences updated'
        });
      } else {
        return NextResponse.json(
          { success: false, error: 'Invalid action' },
          { status: 400 }
        );
      }
    } catch (error) {
      return NextResponse.json(
        { success: false, error: 'Invalid token' },
        { status: 401 }
      );
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { success: false, error: 'Validation error', details: error.errors },
        { status: 400 }
      );
    }

    const errorMessage = error instanceof Error ? error.message : 'Failed to update notification';
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 500 }
    );
  }
}

// DELETE /api/notifications - Delete notifications
export async function DELETE(request: NextRequest) {
  try {
    const authorization = request.headers.get('authorization');
    
    if (!authorization || !authorization.startsWith('Bearer ')) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      );
    }

    const token = authorization.substring(7);
    const { searchParams } = new URL(request.url);
    const notificationId = searchParams.get('id');
    
    try {
      const payload = await authService.verifyToken(token);

      if (notificationId) {
        // Mock notification deletion since there's no notification model in Prisma yet
        // await prisma.notification.deleteMany({
        //   where: {
        //     id: notificationId,
        //     userId: payload.userId
        //   }
        // });
        
        // Just pretend it succeeded
        console.log(`Deleting notification: ${notificationId}`);
        // In a real implementation, this would delete the notification from the database
      } else {
        // Mock deletion of old notifications since there's no notification model in Prisma yet
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

        // await prisma.notification.deleteMany({
        //   where: {
        //     userId: payload.userId,
        //     isRead: true,
        //     createdAt: { lt: thirtyDaysAgo }
        //   }
        // });
        
        // Just pretend it succeeded
        console.log(`Deleting old read notifications for user: ${payload.userId}`);
        // In a real implementation, this would delete old notifications from the database
      }

      return NextResponse.json({ 
        success: true, 
        message: 'Notifications deleted successfully'
      });
    } catch (error) {
      return NextResponse.json(
        { success: false, error: 'Invalid token' },
        { status: 401 }
      );
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Failed to delete notifications';
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 500 }
    );
  }
}