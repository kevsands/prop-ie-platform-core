import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { paymentService, PaymentType, PaymentMethod } from '@/services/paymentService';

const prisma = new PrismaClient();

// GET /api/payments
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const transactionId = searchParams.get('transactionId');
    const paymentId = searchParams.get('paymentId');

    if (paymentId) {
      // Mock a specific payment since there's no payment model in Prisma yet
      const mockPayment = {
        id: paymentId,
        transactionId: 'mock-transaction-id',
        amount: 50000,
        type: 'BOOKING_DEPOSIT',
        paymentMethod: 'BANK_TRANSFER',
        status: 'COMPLETED',
        reference: 'REF-123456',
        description: 'Booking deposit payment',
        createdAt: new Date().toISOString(),
        confirmedAt: new Date().toISOString(),
        transaction: {
          id: 'mock-transaction-id',
          status: 'ACTIVE',
          buyer: {
            id: 'mock-buyer-id',
            email: 'buyer@example.com',
            firstName: 'John',
            lastName: 'Doe'
          },
          unit: {
            id: 'mock-unit-id',
            name: 'Apartment 101',
            development: {
              id: 'mock-development-id',
              name: 'Fitzgerald Gardens'
            }
          }
        }
      };

      return NextResponse.json({
        success: true,
        data: mockPayment});
    }

    if (transactionId) {
      // Get payment summary and schedule for transaction
      const [summary, schedule] = await Promise.all([
        paymentService.getPaymentSummary(transactionId),
        paymentService.getPaymentSchedule(transactionId)]);

      return NextResponse.json({
        success: true,
        data: {
          summary,
          schedule}});
    }

    // Mock payments for pagination
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '20');
    const status = searchParams.get('status');
    const type = searchParams.get('type');

    const mockPayments = [
      {
        id: 'payment-1',
        transactionId: 'transaction-1',
        amount: 25000,
        type: 'BOOKING_DEPOSIT',
        paymentMethod: 'BANK_TRANSFER',
        status: 'COMPLETED',
        reference: 'REF-123456',
        createdAt: new Date().toISOString(),
        transaction: {
          id: 'transaction-1',
          buyer: {
            id: 'buyer-1',
            email: 'buyer1@example.com',
            firstName: 'John',
            lastName: 'Smith'
          },
          unit: {
            id: 'unit-1',
            name: 'Apartment 101'
          }
        }
      },
      {
        id: 'payment-2',
        transactionId: 'transaction-2',
        amount: 50000,
        type: 'CONTRACT_DEPOSIT',
        paymentMethod: 'BANK_TRANSFER',
        status: 'PENDING',
        reference: 'REF-789012',
        createdAt: new Date(Date.now() - 86400000).toISOString(),
        transaction: {
          id: 'transaction-2',
          buyer: {
            id: 'buyer-2',
            email: 'buyer2@example.com',
            firstName: 'Jane',
            lastName: 'Doe'
          },
          unit: {
            id: 'unit-2',
            name: 'Apartment 202'
          }
        }
      }
    ];

    // Filter mock payments based on query parameters
    let filteredPayments = mockPayments;
    if (status) {
      filteredPayments = filteredPayments.filter(p => p.status === status);
    }
    if (type) {
      filteredPayments = filteredPayments.filter(p => p.type === type);
    }

    return NextResponse.json({
      success: true,
      data: {
        payments: filteredPayments,
        pagination: {
          page,
          limit,
          total: filteredPayments.length,
          totalPages: Math.ceil(filteredPayments.length / limit)}}});
  } catch (error) {
    console.error('Error fetching payments:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch payments' },
      { status: 500 }
    );
  }
}

// POST /api/payments
export async function POST(request: NextRequest) {
  try {
    const body: any = await request.json();
    const {
      transactionId,
      amount,
      type,
      paymentMethod,
      description,
      userId} = body;

    // Validate required fields
    if (!transactionId || !amount || !type || !paymentMethod || !userId) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Validate payment
    await paymentService.validatePayment(transactionId, amount, type);

    // Create payment
    const payment = await paymentService.createPayment({
      transactionId,
      amount,
      type,
      paymentMethod,
      description,
      userId});

    return NextResponse.json({
      success: true,
      data: payment});
  } catch (error) {
    console.error('Error creating payment:', error);
    const errorMessage = error instanceof Error ? error.message : 'Failed to create payment';
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 500 }
    );
  }
}

// PATCH /api/payments (Confirm payment)
export async function PATCH(request: NextRequest) {
  try {
    const body: any = await request.json();
    const { paymentId, action, confirmationDetails } = body;

    if (!paymentId || !action) {
      return NextResponse.json(
        { success: false, error: 'Payment ID and action are required' },
        { status: 400 }
      );
    }

    let result;

    switch (action) {
      case 'confirm':
        result = await paymentService.confirmPayment(paymentId, confirmationDetails);
        break;
      case 'cancel':
        // Mock payment cancellation
        result = {
          id: paymentId,
          status: 'CANCELLED',
          updatedAt: new Date().toISOString()
        };
        break;
      case 'fail':
        // Mock payment failure
        result = {
          id: paymentId,
          status: 'FAILED',
          updatedAt: new Date().toISOString()
        };
        break;
      default:
        return NextResponse.json(
          { success: false, error: 'Invalid action' },
          { status: 400 }
        );
    }

    return NextResponse.json({
      success: true,
      data: result});
  } catch (error) {
    console.error('Error updating payment:', error);
    const errorMessage = error instanceof Error ? error.message : 'Failed to update payment';
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 500 }
    );
  }
}

// Refund functionality can be added to the PATCH handler if needed