import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

// Mock database of users who have completed KYC
const mockVerifiedUsers = new Set<string>();

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }
    
    const userId = session.user?.id;
    
    // Check if user has completed KYC 
    // (In a real app, this would query a database)
    const isVerified = mockVerifiedUsers.has(userId);
    
    return NextResponse.json({
      verified: isVerified,
      userId: userId,
      verificationDate: isVerified ? new Date().toISOString() : null
    });
  } catch (error) {
    console.error('Error checking KYC status:', error);
    return NextResponse.json(
      { error: 'Failed to check KYC status' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }
    
    const userId = session.user?.id;
    
    // Add user to verified list 
    // (In a real app, this would update a database)
    mockVerifiedUsers.add(userId);
    
    return NextResponse.json({
      success: true,
      verified: true,
      userId: userId,
      verificationDate: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error updating KYC status:', error);
    return NextResponse.json(
      { error: 'Failed to update KYC status' },
      { status: 500 }
    );
  }
}