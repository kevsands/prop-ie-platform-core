import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

type Props = {
  params: { id: string }
}

// GET /api/developer/developments/[id]/units - Get all units for a development
export async function GET(
  request: NextRequest,
  { params }: Props
) {
  const { id } = params;
  try {
    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status');
    const unitTypeId = searchParams.get('unitTypeId');

    const where: any = {
      developmentId: id
    };

    if (status) {
      where.status = status;
    }

    if (unitTypeId) {
      where.unitTypeId = unitTypeId;
    }

    const units = await prisma.unit.findMany({
      where,
      include: {
        unitType: true,
        reservations: {
          where: {
            status: 'ACTIVE'
          }
        },
        sales: {
          where: {
            status: {
              in: ['RESERVATION', 'CONTRACT_SIGNED', 'COMPLETED']
            }
          }
        },
        viewings: {
          where: {
            status: 'CONFIRMED'
          },
          orderBy: {
            date: 'desc'
          },
          take: 1
        }
      },
      orderBy: {
        unitNumber: 'asc'
      }
    });

    return NextResponse.json({ units });
  } catch (error) {
    console.error('Error fetching units:', error);
    return NextResponse.json(
      { error: 'Failed to fetch units' },
      { status: 500 }
    );
  }
}

// POST /api/developer/developments/[id]/units - Create a new unit
export async function POST(
  request: NextRequest,
  { params }: Props
) {
  const { id } = params;
  try {
    const body: any = await request.json();
    
    const unit = await prisma.unit.create({
      data: {
        ...body,
        developmentId: id
      },
      include: {
        unitType: true
      }
    });

    // Update unit count
    await prisma.development.update({
      where: { id },
      data: {
        totalUnits: { increment: 1 }
      }
    });

    if (unit.unitTypeId) {
      await prisma.unitType.update({
        where: { id: unit.unitTypeId },
        data: {
          totalUnits: { increment: 1 },
          availableUnits: unit.status === 'AVAILABLE' ? { increment: 1 } : undefined
        }
      });
    }

    return NextResponse.json({ unit }, { status: 201 });
  } catch (error) {
    console.error('Error creating unit:', error);
    return NextResponse.json(
      { error: 'Failed to create unit' },
      { status: 500 }
    );
  }
}