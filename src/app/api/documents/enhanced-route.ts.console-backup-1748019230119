import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { writeFile, unlink } from 'fs/promises';
import { join } from 'path';
import crypto from 'crypto';
import { getServerSession } from 'next-auth';
import { authOptions } from '../auth/[...nextauth]/auth-server';
import { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { createHash } from 'crypto';
import { Readable } from 'stream';
import * as nodemailer from 'nodemailer';

const prisma = new PrismaClient();

// Initialize S3 client
const s3Client = new S3Client({
  region: process.env.AWS_REGION || 'eu-west-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!}});

const S3_BUCKET = process.env.AWS_S3_BUCKET || 'prop-ie-documents';

// Initialize email transporter
const emailTransporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT || '587'),
  secure: false,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS}});

// Helper function to check user permissions
async function checkDocumentPermission(
  userId: string,
  documentId?: string,
  action: 'read' | 'write' | 'delete' = 'read'
): Promise<boolean> {
  // Check user role and permissions
  const user = await prisma.user.findUnique({
    where: { id: userId },
    include: { roles: true }});

  if (!user) return false;

  // Admin users have full access
  if (user.roles.some((role: any) => role.name === 'ADMIN')) {
    return true;
  }

  // For specific document, check ownership or access
  if (documentId) {
    const document = await prisma.document.findUnique({
      where: { id: documentId }});

    if (!document) return false;

    // Document owner has full access
    if (document.uploadedById === userId) {
      return true;
    }

    // Check if user has access through transaction or development
    // Add more granular permission checks as needed
  }

  return action === 'read'; // Default read access for authenticated users
}

// Helper function to create audit log
async function createAuditLog(
  userId: string,
  action: string,
  resourceType: string,
  resourceId: string,
  details?: any,
  request?: NextRequest
) {
  try {
    await prisma.auditLog.create({
      data: {
        userId,
        action,
        resourceType,
        resourceId,
        details: details ? JSON.stringify(details) : null,
        ipAddress: request?.headers.get('x-forwarded-for') || request?.headers.get('x-real-ip') || '',
        userAgent: request?.headers.get('user-agent') || ''}});
  } catch (error) {
    console.error('Failed to create audit log:', error);
  }
}

// Helper function to generate document checksum
function generateChecksum(buffer: Buffer): string {
  return createHash('sha256').update(buffer).digest('hex');
}

// Mock virus scanning function (replace with actual AV service)
async function scanForViruses(buffer: Buffer): Promise<{ clean: boolean; threats?: string[] }> {
  // In production, integrate with ClamAV, Windows Defender, or cloud AV service
  // This is a mock implementation
  await new Promise(resolve => setTimeout(resolve, 500)); // Simulate scanning time
  
  // Mock result - always clean for demo
  return { clean: true };
}

// Mock OCR function (replace with actual OCR service)
async function performOCR(buffer: Buffer, mimeType: string): Promise<{ text: string; confidence: number }> {
  // In production, integrate with AWS Textract, Google Vision, or Tesseract
  // This is a mock implementation
  if (!mimeType.includes('image') && !mimeType.includes('pdf')) {
    return { text: '', confidence: 0 };
  }
  
  await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate OCR time
  
  // Mock result
  return {
    text: 'Sample extracted text from document...',
    confidence: 0.95
  };
}

// Helper function to send email with document
async function sendDocumentEmail(
  to: string[],
  subject: string,
  body: string,
  documentUrl: string,
  documentName: string
) {
  try {
    await emailTransporter.sendMail({
      from: process.env.SMTP_FROM || 'noreply@prop.ie',
      to: to.join(', '),
      subject,
      html: body,
      attachments: [
        {
          filename: documentName,
          path: documentUrl}]});
    return true;
  } catch (error) {
    console.error('Failed to send email:', error);
    return false;
  }
}

// GET /api/documents/enhanced
export async function GET(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(request.url);
    const transactionId = searchParams.get('transactionId');
    const userId = searchParams.get('userId');
    const type = searchParams.get('type');
    const category = searchParams.get('category');
    const status = searchParams.get('status');
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '20');
    const includeExpired = searchParams.get('includeExpired') === 'true';
    const search = searchParams.get('search');
    const sortBy = searchParams.get('sortBy') || 'uploadDate';
    const sortOrder = searchParams.get('sortOrder') || 'desc';

    // Build the where clause with security filters
    const where: any = {};
    if (transactionId) where.transactionId = transactionId;
    if (userId) where.userId = userId;
    if (type) where.type = type;
    if (category) where.category = category;
    if (status) where.status = status;
    
    // Search functionality
    if (search) {
      where.OR = [
        { name: { contains: search, mode: 'insensitive' } },
        { description: { contains: search, mode: 'insensitive' } },
        { tags: { has: search } }];
    }
    
    // Filter out expired documents unless explicitly requested
    if (!includeExpired) {
      where.AND = [
        {
          OR: [
            { expiryDate: null },
            { expiryDate: { gte: new Date() } }
          ]
        }
      ];
    }
    
    // Apply user-based filtering for non-admin users
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      include: { roles: true }});
    
    if (!user?.roles.some((role: any) => role.name === 'ADMIN')) {
      // Non-admin users can only see their own documents or documents they have access to
      where.AND = where.AND || [];
      where.AND.push({
        OR: [
          { uploadedById: session.user.id },
          // Add more access conditions based on your business logic
        ]
      });
    }

    // Get total count
    const total = await prisma.document.count({ where });

    // Get paginated results
    const documents = await prisma.document.findMany({
      where,
      include: {
        uploadedBy: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true}},
        signatures: true,
        versions: {
          orderBy: { version: 'desc' },
          take: 5}},
      skip: (page - 1) * limit,
      take: limit,
      orderBy: {
        [sortBy]: sortOrder}});

    // Create audit log for document access
    await createAuditLog(
      session.user.id,
      'DOCUMENT_LIST_VIEWED',
      'DOCUMENT',
      'MULTIPLE',
      { filters: where, resultCount: documents.length },
      request
    );

    return NextResponse.json({
      success: true,
      data: {
        documents,
        pagination: {
          page,
          limit,
          total,
          totalPages: Math.ceil(total / limit)}}});
  } catch (error) {
    console.error('Error fetching documents:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch documents' },
      { status: 500 }
    );
  }
}

// POST /api/documents/enhanced (Upload)
export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const formData = await request.formData();
    const file = formData.get('file') as File;
    const transactionId = formData.get('transactionId') as string;
    const userId = session.user.id; // Use authenticated user ID
    const documentType = formData.get('type') as string;
    const category = formData.get('category') as string;
    const description = formData.get('description') as string;
    const requiresSignature = formData.get('requiresSignature') === 'true';
    const enableVirusScan = formData.get('enableVirusScan') !== 'false';
    const enableOCR = formData.get('enableOCR') === 'true';
    const enableWatermark = formData.get('enableWatermark') === 'true';
    const tags = formData.get('tags') ? JSON.parse(formData.get('tags') as string) : [];
    const expiryDate = formData.get('expiryDate') as string;

    if (!file || !documentType || !category) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // File size validation
    const maxSize = 50 * 1024 * 1024; // 50MB
    if (file.size > maxSize) {
      return NextResponse.json(
        { success: false, error: 'File size exceeds 50MB limit' },
        { status: 400 }
      );
    }

    // Convert file to buffer
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);
    
    // Generate checksum
    const checksum = generateChecksum(buffer);
    
    // Check for duplicate files
    const existingDocument = await prisma.document.findFirst({
      where: { checksum }});
    
    if (existingDocument) {
      return NextResponse.json(
        { success: false, error: 'This file has already been uploaded', documentId: existingDocument.id },
        { status: 409 }
      );
    }
    
    // Virus scanning
    if (enableVirusScan) {
      const scanResult = await scanForViruses(buffer);
      if (!scanResult.clean) {
        await createAuditLog(
          userId,
          'DOCUMENT_UPLOAD_BLOCKED',
          'DOCUMENT',
          'NEW',
          { reason: 'virus_detected', threats: scanResult.threats },
          request
        );
        
        return NextResponse.json(
          { success: false, error: 'File failed virus scan', threats: scanResult.threats },
          { status: 400 }
        );
      }
    }
    
    // OCR processing
    let ocrText = '';
    let ocrConfidence = 0;
    if (enableOCR) {
      const ocrResult = await performOCR(buffer, file.type);
      ocrText = ocrResult.text;
      ocrConfidence = ocrResult.confidence;
    }
    
    // Generate S3 key
    const fileExtension = file.name.split('.').pop();
    const s3Key = `documents/${new Date().getFullYear()}/${crypto.randomBytes(16).toString('hex')}.${fileExtension}`;
    
    // Upload to S3
    const uploadCommand = new PutObjectCommand({
      Bucket: S3_BUCKET,
      Key: s3Key,
      Body: buffer,
      ContentType: file.type,
      Metadata: {
        'original-name': file.name,
        'uploaded-by': userId,
        'checksum': checksum,
        'watermark': enableWatermark ? 'true' : 'false'},
      ServerSideEncryption: 'AES256', // Enable server-side encryption
    });
    
    await s3Client.send(uploadCommand);
    
    // Generate CDN URL
    const fileUrl = `https://${process.env.AWS_CLOUDFRONT_DOMAIN || 'cdn.prop.ie'}/documents/${s3Key}`;

    // Create document record with enhanced metadata
    const document = await prisma.document.create({
      data: {
        name: file.name,
        type: documentType,
        category,
        status: 'PENDING_REVIEW',
        fileUrl,
        s3Key,
        fileType: file.type,
        fileSize: file.size,
        checksum,
        uploadedBy: {
          connect: { id: userId }
        },
        uploadedByName: session.user.name || undefined,
        description,
        tags,
        expiryDate: expiryDate ? new Date(expiryDate) : null,
        signatureRequired: requiresSignature || false,
        signatureStatus: requiresSignature ? 'PENDING' : 'NOT_REQUIRED',
        metadata: {
          ocrText,
          ocrConfidence,
          virusScanDate: enableVirusScan ? new Date() : null,
          virusScanStatus: enableVirusScan ? 'CLEAN' : null,
          watermarkEnabled: enableWatermark,
          originalFileName: file.name},
        version: 1},
      include: {
        uploadedBy: true,
        signatures: true}});
    
    // Create audit log
    await createAuditLog(
      userId,
      'DOCUMENT_UPLOADED',
      'DOCUMENT',
      document.id,
      {
        fileName: file.name,
        fileSize: file.size,
        category,
        type: documentType},
      request
    );

    // Activity tracking and notifications removed - models don't exist in main schema
    // TODO: Add these features when Transaction, Notification, and DocumentActivity models are available

    return NextResponse.json({
      success: true,
      data: document});
  } catch (error) {
    console.error('Error uploading document:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to upload document' },
      { status: 500 }
    );
  }
}

// PATCH /api/documents/enhanced (Update)
export async function PATCH(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const body = await request.json() as any;
    const { documentId, updates } = body;

    if (!documentId) {
      return NextResponse.json(
        { success: false, error: 'Document ID is required' },
        { status: 400 }
      );
    }
    
    // Check permissions
    const hasPermission = await checkDocumentPermission(session.user.id, documentId, 'write');
    if (!hasPermission) {
      return NextResponse.json(
        { success: false, error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    const document = await prisma.$transaction(async (tx) => {
      // Get current document
      const currentDocument = await tx.document.findUnique({
        where: { id: documentId }});

      if (!currentDocument) {
        throw new Error('Document not found');
      }

      // Update document
      const updatedDocument = await tx.document.update({
        where: { id: documentId },
        data: updates,
        include: {
          uploadedBy: true,
          signatures: true}});

      // Create audit log
      await createAuditLog(
        session.user.id,
        'DOCUMENT_UPDATED',
        'DOCUMENT',
        documentId,
        {
          previousValues: currentDocument,
          newValues: updates},
        request
      );

      return updatedDocument;
    });

    return NextResponse.json({
      success: true,
      data: document});
  } catch (error) {
    console.error('Error updating document:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to update document' },
      { status: 500 }
    );
  }
}

// DELETE /api/documents/enhanced
export async function DELETE(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(request.url);
    const documentId = searchParams.get('documentId');
    const permanent = searchParams.get('permanent') === 'true';

    if (!documentId) {
      return NextResponse.json(
        { success: false, error: 'Document ID is required' },
        { status: 400 }
      );
    }
    
    // Check permissions
    const hasPermission = await checkDocumentPermission(session.user.id, documentId, 'delete');
    if (!hasPermission) {
      return NextResponse.json(
        { success: false, error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    const document = await prisma.$transaction(async (tx) => {
      // Get document
      const doc = await tx.document.findUnique({
        where: { id: documentId }});

      if (!doc) {
        throw new Error('Document not found');
      }

      // Get user to check if admin
      const user = await tx.user.findUnique({
        where: { id: session.user.id },
        include: { roles: true }});

      if (permanent && user?.roles.some((role: any) => role.name === 'ADMIN')) {
        // Permanent deletion (admin only)
        // Delete from S3
        if (doc.s3Key) {
          const deleteCommand = new DeleteObjectCommand({
            Bucket: S3_BUCKET,
            Key: doc.s3Key});
          await s3Client.send(deleteCommand);
        }
        
        // Delete from database
        await tx.document.delete({
          where: { id: documentId }});
        
        // Create audit log
        await createAuditLog(
          session.user.id,
          'DOCUMENT_DELETED_PERMANENT',
          'DOCUMENT',
          documentId,
          { documentName: doc.name },
          request
        );
        
        return { ...doc, deleted: true };
      } else {
        // Soft delete - mark as archived
        const archivedDocument = await tx.document.update({
          where: { id: documentId },
          data: {
            status: 'ARCHIVED',
            archivedAt: new Date(),
            archivedById: session.user.id}});
        
        // Create audit log
        await createAuditLog(
          session.user.id,
          'DOCUMENT_ARCHIVED',
          'DOCUMENT',
          documentId,
          { documentName: doc.name },
          request
        );
        
        return archivedDocument;
      }
    });

    return NextResponse.json({
      success: true,
      data: document});
  } catch (error) {
    console.error('Error deleting document:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to delete document' },
      { status: 500 }
    );
  }
}

// POST /api/documents/enhanced/generate-upload-url
export async function generateUploadUrl(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { fileName, fileType, fileSize } = await request.json();
    
    if (!fileName || !fileType) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      );
    }
    
    // Validate file size
    const maxSize = 50 * 1024 * 1024; // 50MB
    if (fileSize > maxSize) {
      return NextResponse.json(
        { success: false, error: 'File size exceeds 50MB limit' },
        { status: 400 }
      );
    }
    
    // Generate S3 key
    const fileExtension = fileName.split('.').pop();
    const s3Key = `documents/${new Date().getFullYear()}/${crypto.randomBytes(16).toString('hex')}.${fileExtension}`;
    
    // Create pre-signed upload URL
    const uploadCommand = new PutObjectCommand({
      Bucket: S3_BUCKET,
      Key: s3Key,
      ContentType: fileType,
      Metadata: {
        'original-name': fileName,
        'uploaded-by': session.user.id},
      ServerSideEncryption: 'AES256'});
    
    const uploadUrl = await getSignedUrl(s3Client, uploadCommand, { expiresIn: 3600 }); // 1 hour expiry
    
    return NextResponse.json({
      success: true,
      data: {
        uploadUrl,
        s3Key,
        expiresIn: 3600}});
  } catch (error) {
    console.error('Error generating upload URL:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to generate upload URL' },
      { status: 500 }
    );
  }
}

// POST /api/documents/enhanced/bulk-operation
export async function bulkOperation(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { operation, documentIds, data } = await request.json();
    
    if (!operation || !documentIds || !Array.isArray(documentIds)) {
      return NextResponse.json(
        { success: false, error: 'Invalid request' },
        { status: 400 }
      );
    }

    // Check permissions for all documents
    for (const docId of documentIds) {
      const hasPermission = await checkDocumentPermission(
        session.user.id, 
        docId, 
        operation === 'delete' ? 'delete' : 'write'
      );
      if (!hasPermission) {
        return NextResponse.json(
          { success: false, error: `Insufficient permissions for document ${docId}` },
          { status: 403 }
        );
      }
    }

    let results: any[] = [];

    switch (operation) {
      case 'archive':
        results = await prisma.document.updateMany({
          where: { id: { in: documentIds } },
          data: {
            status: 'ARCHIVED',
            archivedAt: new Date(),
            archivedById: session.user.id}});
        break;

      case 'delete':
        // Soft delete by default
        results = await prisma.document.updateMany({
          where: { id: { in: documentIds } },
          data: {
            status: 'ARCHIVED',
            archivedAt: new Date(),
            archivedById: session.user.id}});
        break;

      case 'update-category':
        if (!data?.category) {
          return NextResponse.json(
            { success: false, error: 'Category is required' },
            { status: 400 }
          );
        }
        results = await prisma.document.updateMany({
          where: { id: { in: documentIds } },
          data: { category: data.category }});
        break;

      case 'add-tags':
        if (!data?.tags || !Array.isArray(data.tags)) {
          return NextResponse.json(
            { success: false, error: 'Tags array is required' },
            { status: 400 }
          );
        }
        // This would need to be done individually since we're appending to array
        for (const docId of documentIds) {
          const doc = await prisma.document.findUnique({ where: { id: docId } });
          if (doc) {
            await prisma.document.update({
              where: { id: docId },
              data: {
                tags: [...new Set([...doc.tags, ...data.tags])]}});
          }
        }
        break;

      default:
        return NextResponse.json(
          { success: false, error: 'Invalid operation' },
          { status: 400 }
        );
    }

    // Create audit log
    await createAuditLog(
      session.user.id,
      `DOCUMENT_BULK_${operation.toUpperCase()}`,
      'DOCUMENT',
      'MULTIPLE',
      { documentIds, operation, data },
      request
    );

    return NextResponse.json({
      success: true,
      data: {
        operation,
        affectedDocuments: documentIds.length,
        results}});
  } catch (error) {
    console.error('Error in bulk operation:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to perform bulk operation' },
      { status: 500 }
    );
  }
}

// POST /api/documents/enhanced/email
export async function emailDocument(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { documentId, recipients, subject, message } = await request.json();
    
    if (!documentId || !recipients || !Array.isArray(recipients) || recipients.length === 0) {
      return NextResponse.json(
        { success: false, error: 'Invalid request' },
        { status: 400 }
      );
    }

    // Check permissions
    const hasPermission = await checkDocumentPermission(session.user.id, documentId, 'read');
    if (!hasPermission) {
      return NextResponse.json(
        { success: false, error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    // Get document
    const document = await prisma.document.findUnique({
      where: { id: documentId },
      include: { uploadedBy: true }});

    if (!document) {
      return NextResponse.json(
        { success: false, error: 'Document not found' },
        { status: 404 }
      );
    }

    // Generate temporary signed URL for document access
    const getCommand = new GetObjectCommand({
      Bucket: S3_BUCKET,
      Key: document.s3Key});
    const signedUrl = await getSignedUrl(s3Client, getCommand, { expiresIn: 86400 }); // 24 hours

    // Send email
    const emailSubject = subject || `Document: ${document.name}`;
    const emailBody = `
      <h3>${emailSubject}</h3>
      <p>${message || 'Please find the attached document.'}</p>
      <p>Document: ${document.name}</p>
      <p>Sent by: ${session.user.name || session.user.email}</p>
      <p><a href="${signedUrl}">Download Document</a> (Link expires in 24 hours)</p>
    `;

    const success = await sendDocumentEmail(
      recipients,
      emailSubject,
      emailBody,
      signedUrl,
      document.name
    );

    if (success) {
      // Create audit log
      await createAuditLog(
        session.user.id,
        'DOCUMENT_EMAILED',
        'DOCUMENT',
        documentId,
        { recipients, subject },
        request
      );

      return NextResponse.json({
        success: true,
        data: { message: 'Document emailed successfully' }});
    } else {
      return NextResponse.json(
        { success: false, error: 'Failed to send email' },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error emailing document:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to email document' },
      { status: 500 }
    );
  }
}