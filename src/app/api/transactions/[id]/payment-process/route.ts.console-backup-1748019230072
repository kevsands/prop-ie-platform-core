type Props = {
  params: Promise<{ id: string }>
}

import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '../../../auth/[...nextauth]/auth.config';
import { z } from 'zod';
import { PrismaClient, TransactionStatus } from '@prisma/client';
import { canAccessTransaction } from '../../../../../utils/auth-utils';
import { transactionService } from '../../../../../services/transactionService';

const prisma = new PrismaClient();

// Payment process schema
const PaymentProcessSchema = z.object({
  paymentId: z.string().optional(),
  type: z.enum(['BOOKING_DEPOSIT', 'CONTRACT_DEPOSIT', 'STAGE_PAYMENT', 'FINAL_PAYMENT', 'CUSTOMIZATION_PAYMENT']),
  amount: z.number().positive(),
  method: z.enum(['BANK_TRANSFER', 'CREDIT_CARD', 'DEBIT_CARD', 'CASH', 'CHEQUE', 'MORTGAGE_DRAWDOWN']),
  reference: z.string().optional(),
  paymentIntentId: z.string().optional(), // For credit card payments
  status: z.enum(['INITIATED', 'SUCCESSFUL', 'FAILED']),
  metadata: z.record(z.any()).optional(),
  paymentDetails: z.object({
    cardNumber: z.string().optional(),
    cardExpiry: z.string().optional(),
    cardCvv: z.string().optional(),
    bankName: z.string().optional(),
    accountNumber: z.string().optional(),
    sortCode: z.string().optional()}).optional()});

/**
 * POST /api/transactions/[id]/payment-process
 * Process a payment for a transaction
 */
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    // Check if user can access this transaction
    const canAccess = await canAccessTransaction(session, id);
    if (!canAccess) {
      return NextResponse.json(
        { error: 'You do not have permission to access this transaction' },
        { status: 403 }
      );
    }

    const body: any = await request.json();
    const validationResult = PaymentProcessSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        { error: 'Invalid payment process data', details: validationResult.error.format() },
        { status: 400 }
      );
    }

    const paymentData = validationResult.data;

    // Get the transaction
    const transaction = await prisma.transaction.findUnique({
      where: { id },
      include: {
        payments: true
      }
    });

    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    // Process the payment based on type
    switch (paymentData.status) {
      case 'INITIATED':
        // Create payment record
        const newPayment = await transactionService.processPayment(id, {
          type: paymentData.type,
          amount: paymentData.amount,
          method: paymentData.method,
          reference: paymentData.reference || `PAY-${Date.now()}-${Math.random().toString(36).substring(2, 7).toUpperCase()}`,
          description: `${paymentData.type} payment`
        });

        // Handle transaction status updates based on payment type
        if (paymentData.type === 'BOOKING_DEPOSIT') {
          await updateTransactionStatus(id, TransactionStatus.RESERVATION_PAID, session.user.id);
        } else if (paymentData.type === 'CONTRACT_DEPOSIT' && transaction.status === 'CONTRACTS_SIGNED') {
          await updateTransactionStatus(id, TransactionStatus.COMPLETION_PENDING, session.user.id);
        }

        return NextResponse.json({
          success: true,
          message: 'Payment initiated successfully',
          payment: newPayment,
          paymentId: newPayment.id,
          transactionId: id,
          status: 'PROCESSING',
          processingId: `PROC-${Date.now()}`,
          estimatedCompletionTime: '1-2 business days',
          nextSteps: [
            'Payment is being processed',
            'You will receive a confirmation email once complete',
            'Funds will be verified before transaction continues']}, { status: 201 });

      case 'SUCCESSFUL':
        if (!paymentData.paymentId) {
          return NextResponse.json(
            { error: 'Payment ID is required for updating payment status' },
            { status: 400 }
          );
        }

        // Update payment status to completed
        const updatedPayment = await prisma.transactionPayment.update({
          where: {
            id: paymentData.paymentId,
            transactionId: id
          },
          data: {
            status: 'COMPLETED',
            paidDate: new Date(),
            clearedDate: new Date()
          }
        });

        // Update transaction totals
        const existingPayment = transaction.payments.find(p => p.id === paymentData.paymentId);
        if (existingPayment) {
          const totalPaid = transaction.totalPaid + existingPayment.amount;
          const outstandingBalance = (transaction.agreedPrice || 0) - totalPaid;

          await prisma.transaction.update({
            where: { id },
            data: { totalPaid, outstandingBalance }
          });
        }

        // Log event
        await prisma.transactionEvent.create({
          data: {
            transactionId: id,
            eventType: 'PAYMENT_RECEIVED',
            description: `Payment of ${paymentData.amount} EUR received for ${paymentData.type}`,
            metadata: paymentData.metadata || {},
            performedBy: session.user.id
          }
        });

        return NextResponse.json({
          success: true,
          message: 'Payment processed successfully',
          payment: updatedPayment,
          status: 'COMPLETED',
          estimatedCompletionTime: 'Immediate'});

      case 'FAILED':
        if (!paymentData.paymentId) {
          return NextResponse.json(
            { error: 'Payment ID is required for updating payment status' },
            { status: 400 }
          );
        }

        // Update payment status to failed
        const failedPayment = await prisma.transactionPayment.update({
          where: {
            id: paymentData.paymentId,
            transactionId: id
          },
          data: {
            status: 'FAILED'
          }
        });

        // Log event
        await prisma.transactionEvent.create({
          data: {
            transactionId: id,
            eventType: 'PAYMENT_FAILED',
            description: `Payment of ${paymentData.amount} EUR failed for ${paymentData.type}`,
            metadata: paymentData.metadata || {},
            performedBy: session.user.id
          }
        });

        return NextResponse.json({
          success: false,
          message: 'Payment processing failed',
          payment: failedPayment
        });

      default:
        return NextResponse.json(
          { error: 'Invalid payment status' },
          { status: 400 }
        );
    }
  } catch (error) {
    console.error('Error processing payment:', error);
    return NextResponse.json(
      { error: 'Failed to process payment' },
      { status: 500 }
    );
  }
}

/**
 * GET /api/transactions/[id]/payment-process
 * Get payment options and requirements for a transaction
 */
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    // Check if user can access this transaction
    const canAccess = await canAccessTransaction(session, id);
    if (!canAccess) {
      return NextResponse.json(
        { error: 'You do not have permission to access this transaction' },
        { status: 403 }
      );
    }

    // Get transaction with milestones and payments
    const transaction = await prisma.transaction.findUnique({
      where: { id },
      include: {
        payments: true,
        milestones: true
      }
    });

    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    // Determine required payments based on transaction stage
    const pendingPayments = [];
    const completedPayments = [];

    // Sort existing payments
    transaction.payments.forEach(payment => {
      if (payment.status === 'COMPLETED') {
        completedPayments.push(payment);
      } else if (payment.status !== 'CANCELLED' && payment.status !== 'FAILED') {
        pendingPayments.push(payment);
      }
    });

    // Determine next required payment based on transaction stage
    let nextRequiredPayment = null;
    
    if (transaction.status === 'ENQUIRY' || transaction.status === 'VIEWING_SCHEDULED' || 
        transaction.status === 'OFFER_MADE' || transaction.status === 'OFFER_ACCEPTED') {
      // Check if booking deposit already exists or is paid
      const bookingDepositExists = transaction.payments.some(p => 
        p.type === 'BOOKING_DEPOSIT' && 
        (p.status === 'COMPLETED' || p.status === 'PENDING' || p.status === 'PROCESSING')
      );
      
      if (!bookingDepositExists) {
        nextRequiredPayment = {
          type: 'BOOKING_DEPOSIT',
          amount: 5000, // Standard booking deposit
          required: true,
          dueDate: addDays(new Date(), 7)
        };
      }
    }
    
    else if (transaction.status === 'RESERVATION_PAID' || transaction.status === 'SALE_AGREED' || 
             transaction.status === 'CONTRACTS_ISSUED' || transaction.status === 'CONTRACTS_SIGNED') {
      // Check if contract deposit already exists or is paid
      const contractDepositExists = transaction.payments.some(p => 
        p.type === 'CONTRACT_DEPOSIT' && 
        (p.status === 'COMPLETED' || p.status === 'PENDING' || p.status === 'PROCESSING')
      );
      
      if (!contractDepositExists) {
        const depositAmount = transaction.agreedPrice ? transaction.agreedPrice * 0.1 : 10000;
        nextRequiredPayment = {
          type: 'CONTRACT_DEPOSIT',
          amount: depositAmount,
          required: true,
          dueDate: addDays(new Date(), 14)
        };
      }
    }
    
    else if (transaction.status === 'MORTGAGE_APPROVED' || transaction.status === 'COMPLETION_PENDING') {
      // Check if final payment already exists or is paid
      const finalPaymentExists = transaction.payments.some(p => 
        p.type === 'FINAL_PAYMENT' && 
        (p.status === 'COMPLETED' || p.status === 'PENDING' || p.status === 'PROCESSING')
      );
      
      if (!finalPaymentExists) {
        const totalPaid = transaction.totalPaid || 0;
        const finalAmount = (transaction.agreedPrice || 0) - totalPaid;
        
        if (finalAmount > 0) {
          nextRequiredPayment = {
            type: 'FINAL_PAYMENT',
            amount: finalAmount,
            required: true,
            dueDate: addDays(new Date(), 14)
          };
        }
      }
    }

    // Payment methods available
    const paymentMethods = [
      {
        id: 'BANK_TRANSFER',
        name: 'Bank Transfer',
        description: 'Pay via bank transfer to our account',
        instructions: 'Transfer the payment to the account details provided below',
        accountDetails: {
          bank: 'Bank of Ireland',
          accountName: 'Fitzgerald Gardens Development Ltd',
          iban: 'IE29BOFI90001234567890',
          bic: 'BOFIIE2D',
          reference: `FG-${transaction.referenceNumber}`
        }
      },
      {
        id: 'CREDIT_CARD',
        name: 'Credit Card',
        description: 'Pay securely with credit card',
        fee: '2.5%',
        supportedCards: ['Visa', 'Mastercard']
      },
      {
        id: 'DEBIT_CARD',
        name: 'Debit Card',
        description: 'Pay securely with debit card',
        fee: '0%',
        supportedCards: ['Visa Debit', 'Mastercard Debit']
      }
    ];

    return NextResponse.json({
      transactionId: id,
      transactionStatus: transaction.status,
      transactionStage: transaction.stage,
      agreedPrice: transaction.agreedPrice,
      totalPaid: transaction.totalPaid,
      outstandingBalance: transaction.outstandingBalance,
      nextRequiredPayment,
      pendingPayments,
      completedPayments,
      paymentMethods
    });
  } catch (error) {
    console.error('Error fetching payment process information:', error);
    return NextResponse.json(
      { error: 'Failed to fetch payment information' },
      { status: 500 }
    );
  }
}

// Helper function to update transaction status
async function updateTransactionStatus(
  transactionId: string,
  status: TransactionStatus,
  performedBy: string
) {
  return await transactionService.updateTransaction(
    transactionId,
    { status },
    performedBy
  );
}

// Helper function to add days to a date
function addDays(date: Date, days: number): Date {
  const result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
}