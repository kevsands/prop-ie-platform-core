import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { transactionService } from '@/services/transactionService';

interface RouteContext {
  params: Promise<{ id: string }>;
}

/**
 * GET /api/transactions/[id]
 * Get a specific transaction by ID
 */
export async function GET(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const params = await context.params;
    const transaction = await transactionService.getTransaction(params.id);

    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    // Check if user has access to this transaction
    const hasAccess = 
      session.user?.role === 'ADMIN' ||
      (session.user?.role === 'BUYER' && transaction.buyerId === session.user.id) ||
      (session.user?.role === 'AGENT' && transaction.agentId === session.user.id) ||
      (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id) ||
      (session.user?.role === 'SOLICITOR' && transaction.solicitorId === session.user.id);

    if (!hasAccess) {
      return NextResponse.json(
        { error: 'Access denied' },
        { status: 403 }
      );
    }

    return NextResponse.json({
      success: true,
      data: transaction
    });
  } catch (error) {
    console.error('Error fetching transaction:', error);
    return NextResponse.json(
      { error: 'Failed to fetch transaction' },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/transactions/[id]
 * Update a specific transaction
 */
export async function PUT(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const params = await context.params;
    const body = await request.json();

    // Check if user has permission to update
    const transaction = await transactionService.getTransaction(params.id);
    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    const canUpdate = 
      session.user?.role === 'ADMIN' ||
      (session.user?.role === 'BUYER' && transaction.buyerId === session.user.id) ||
      (session.user?.role === 'AGENT' && transaction.agentId === session.user.id) ||
      (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id) ||
      (session.user?.role === 'SOLICITOR' && transaction.solicitorId === session.user.id);

    if (!canUpdate) {
      return NextResponse.json(
        { error: 'Access denied' },
        { status: 403 }
      );
    }

    // Update transaction
    const updatedTransaction = await transactionService.updateTransaction(
      params.id,
      body,
      session.user?.id || 'system'
    );

    return NextResponse.json({
      success: true,
      data: updatedTransaction
    });
  } catch (error) {
    console.error('Error updating transaction:', error);
    return NextResponse.json(
      { error: 'Failed to update transaction' },
      { status: 500 }
    );
  }
}

/**
 * PATCH /api/transactions/[id]
 * Partially update a transaction (specific fields or operations)
 */
export async function PATCH(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const params = await context.params;
    const body = await request.json();
    const { operation, ...data } = body;

    // Check permissions
    const transaction = await transactionService.getTransaction(params.id);
    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    // Handle specific operations
    switch (operation) {
      case 'progress':
        // Progress to next stage
        const updatedTransaction = await transactionService.progressToNextStage(
          params.id,
          session.user?.id || 'system'
        );
        return NextResponse.json({
          success: true,
          data: updatedTransaction
        });

      case 'update-status':
        // Update status only
        const statusUpdate = await transactionService.updateTransaction(
          params.id,
          { status: data.status },
          session.user?.id || 'system'
        );
        return NextResponse.json({
          success: true,
          data: statusUpdate
        });

      case 'update-stage':
        // Update stage only
        const stageUpdate = await transactionService.updateTransaction(
          params.id,
          { stage: data.stage },
          session.user?.id || 'system'
        );
        return NextResponse.json({
          success: true,
          data: stageUpdate
        });

      default:
        // General update
        const generalUpdate = await transactionService.updateTransaction(
          params.id,
          data,
          session.user?.id || 'system'
        );
        return NextResponse.json({
          success: true,
          data: generalUpdate
        });
    }
  } catch (error) {
    console.error('Error in transaction operation:', error);
    return NextResponse.json(
      { error: 'Failed to perform operation' },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/transactions/[id]
 * Cancel a transaction
 */
export async function DELETE(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const params = await context.params;
    
    // Check if user has permission to cancel
    const transaction = await transactionService.getTransaction(params.id);
    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    // Prevent cancellation of completed transactions
    if (['COMPLETED', 'HANDED_OVER'].includes(transaction.status)) {
      return NextResponse.json(
        { error: 'Cannot cancel completed transactions' },
        { status: 400 }
      );
    }

    const canCancel = 
      session.user?.role === 'ADMIN' ||
      (session.user?.role === 'BUYER' && transaction.buyerId === session.user.id) ||
      (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id);

    if (!canCancel) {
      return NextResponse.json(
        { error: 'Access denied' },
        { status: 403 }
      );
    }

    // Cancel transaction
    const cancelledTransaction = await transactionService.updateTransaction(
      params.id,
      { status: 'CANCELLED' },
      session.user?.id || 'system'
    );

    return NextResponse.json({
      success: true,
      message: 'Transaction cancelled successfully',
      data: cancelledTransaction
    });
  } catch (error) {
    console.error('Error cancelling transaction:', error);
    return NextResponse.json(
      { error: 'Failed to cancel transaction' },
      { status: 500 }
    );
  }
}