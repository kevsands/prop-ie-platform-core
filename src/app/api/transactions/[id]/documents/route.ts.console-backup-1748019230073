import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { transactionService } from '@/services/transactionService';
import { z } from 'zod';
import { DocumentType, DocumentCategory, DocumentStatus } from '@prisma/client';
import { PrismaClient } from '@prisma/client';

interface RouteContext {
  params: { id: string };
}

// Initialize prisma client
const prisma = new PrismaClient();

// Validation schema for document upload
const documentSchema = z.object({
  name: z.string().min(3, "Document name must be at least 3 characters"),
  type: z.nativeEnum(DocumentType),
  category: z.nativeEnum(DocumentCategory),
  fileName: z.string(),
  fileSize: z.number().positive("File size must be positive"),
  mimeType: z.string(),
  fileUrl: z.string().url("Invalid file URL"),
  requiresSignature: z.boolean().optional(),
  description: z.string().optional()
});

/**
 * GET /api/transactions/[id]/documents
 * Get all documents for a transaction
 */
export async function GET(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const { id } = context.params;
    const transaction = await transactionService.getTransaction(id);

    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    // Check access based on user role
    const hasAccess = 
      session.user?.role === 'ADMIN' ||
      (session.user?.role === 'BUYER' && transaction.buyerId === session.user.id) ||
      (session.user?.role === 'AGENT' && transaction.agentId === session.user.id) ||
      (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id) ||
      (session.user?.role === 'SOLICITOR' && transaction.solicitorId === session.user.id);

    if (!hasAccess) {
      return NextResponse.json(
        { error: 'Access denied' },
        { status: 403 }
      );
    }

    // Get documents with activity logs
    const documents = await prisma.document.findMany({
      where: { transactionId: id },
      include: {
        activities: {
          orderBy: { createdAt: 'desc' },
          take: 5
        },
        signatures: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                email: true
              }
            }
          }
        }
      },
      orderBy: { updatedAt: 'desc' }
    });

    // Log document view activity
    await prisma.documentActivity.createMany({
      data: documents.map(doc => ({
        documentId: doc.id,
        activityType: 'VIEWED',
        performedBy: session.user?.id || 'unknown',
        ipAddress: request.headers.get('x-forwarded-for') || request.ip || 'unknown',
        userAgent: request.headers.get('user-agent') || 'unknown'
      }))
    });

    return NextResponse.json({
      success: true,
      data: documents
    });
  } catch (error) {
    console.error('Error fetching documents:', error);
    return NextResponse.json(
      { error: 'Failed to fetch documents' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/transactions/[id]/documents
 * Upload a document to a transaction
 */
export async function POST(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const { id } = context.params;
    const body = await request.json();

    // Validate request body
    const documentData = documentSchema.parse(body);

    // Check if transaction exists and user has access
    const transaction = await transactionService.getTransaction(id);
    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    const canUpload = 
      session.user?.role === 'ADMIN' ||
      (session.user?.role === 'BUYER' && transaction.buyerId === session.user.id) ||
      (session.user?.role === 'AGENT' && transaction.agentId === session.user.id) ||
      (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id) ||
      (session.user?.role === 'SOLICITOR' && transaction.solicitorId === session.user.id);

    if (!canUpload) {
      return NextResponse.json(
        { error: 'Unauthorized to upload documents' },
        { status: 403 }
      );
    }

    // Set appropriate document status based on user role and document type
    let status = DocumentStatus.PENDING_REVIEW;
    if (session.user?.role === 'ADMIN' || session.user?.role === 'DEVELOPER') {
      status = DocumentStatus.APPROVED;
    }

    // Add document with prisma transaction to handle document and activity creation
    const result = await prisma.$transaction(async (tx) => {
      // Create the document
      const document = await tx.document.create({
        data: {
          transactionId: id,
          name: documentData.name,
          type: documentData.type as DocumentType,
          category: documentData.category as DocumentCategory,
          status: status,
          fileName: documentData.fileName,
          fileSize: documentData.fileSize,
          mimeType: documentData.mimeType,
          fileUrl: documentData.fileUrl,
          description: documentData.description,
          requiresSignature: documentData.requiresSignature || false,
          signatureStatus: documentData.requiresSignature ? 'PENDING' : 'NOT_REQUIRED',
          isEncrypted: true,
          tags: [],
          uploadedBy: session.user?.id || 'system'}
      });

      // Create document activity record
      await tx.documentActivity.create({
        data: {
          documentId: document.id,
          activityType: 'UPLOADED',
          performedBy: session.user?.id || 'system',
          details: `Document ${document.name} uploaded`,
          ipAddress: request.headers.get('x-forwarded-for') || request.ip || 'unknown',
          userAgent: request.headers.get('user-agent') || 'unknown'
        }
      });

      // Create transaction event
      await tx.transactionEvent.create({
        data: {
          transactionId: id,
          eventType: 'DOCUMENT_UPLOADED',
          description: `Document uploaded: ${document.name}`,
          metadata: {
            documentId: document.id,
            documentType: document.type,
            category: document.category,
            requiresSignature: document.requiresSignature
          },
          performedBy: session.user?.id || 'system'
        }
      });

      // If document requires signature, create notifications for relevant parties
      if (documentData.requiresSignature) {
        // Create notification for the buyer
        if (transaction.buyerId && transaction.buyerId !== session.user?.id) {
          await tx.notification.create({
            data: {
              userId: transaction.buyerId,
              type: 'DOCUMENT_REQUEST',
              category: 'DOCUMENT',
              priority: 'HIGH',
              title: 'Document Signature Required',
              message: `A new document "${document.name}" requires your signature.`,
              actionUrl: `/buyer/transactions/${id}/documents/${document.id}`,
              channels: ['IN_APP', 'EMAIL']
            }
          });
        }
      }

      return document;
    });

    return NextResponse.json({
      success: true,
      data: result
    });
  } catch (error) {
    console.error('Error uploading document:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { success: false, error: 'Invalid document data', details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Failed to upload document' },
      { status: 500 }
    );
  }
}

/**
 * PATCH /api/transactions/[id]/documents
 * Update document status (e.g., approve, reject, sign)
 */
export async function PATCH(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const { id } = context.params;
    const body = await request.json();
    const { documentId, action, signatureData, notes } = body;

    if (!documentId || !action) {
      return NextResponse.json(
        { error: 'Document ID and action are required' },
        { status: 400 }
      );
    }

    // Get transaction to check permissions
    const transaction = await transactionService.getTransaction(id);
    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    // Get document
    const document = await prisma.document.findUnique({
      where: { id: documentId },
      include: { signatures: true }
    });

    if (!document || document.transactionId !== id) {
      return NextResponse.json(
        { error: 'Document not found' },
        { status: 404 }
      );
    }

    // Check permissions based on action
    let hasPermission = false;
    let newStatus: DocumentStatus;
    let signatureStatus = document.signatureStatus;
    let activityType: 'SIGNED' | 'EDITED' | 'VIEWED';

    switch (action) {
      case 'approve':
        // Only admin, developer, or solicitor can approve
        hasPermission = 
          session.user?.role === 'ADMIN' || 
          (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id) ||
          (session.user?.role === 'SOLICITOR' && transaction.solicitorId === session.user.id);
        
        newStatus = DocumentStatus.APPROVED;
        activityType = 'EDITED';
        break;
      
      case 'reject':
        // Only admin, developer, or solicitor can reject
        hasPermission = 
          session.user?.role === 'ADMIN' || 
          (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id) ||
          (session.user?.role === 'SOLICITOR' && transaction.solicitorId === session.user.id);
        
        newStatus = DocumentStatus.REJECTED;
        activityType = 'EDITED';
        break;
      
      case 'sign':
        // User must be the intended signer (usually buyer)
        hasPermission = 
          session.user?.role === 'ADMIN' || 
          (document.requiresSignature && (
            (session.user?.role === 'BUYER' && transaction.buyerId === session.user.id) ||
            (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id) ||
            (session.user?.role === 'SOLICITOR' && transaction.solicitorId === session.user.id)
          ));
        
        if (!signatureData) {
          return NextResponse.json(
            { error: 'Signature data is required for signing' },
            { status: 400 }
          );
        }
        
        newStatus = DocumentStatus.SIGNED;
        signatureStatus = document.signatures.length > 0 ? 'COMPLETED' : 'PARTIALLY_SIGNED';
        activityType = 'SIGNED';
        break;
      
      default:
        return NextResponse.json(
          { error: 'Invalid action' },
          { status: 400 }
        );
    }

    if (!hasPermission) {
      return NextResponse.json(
        { error: 'Unauthorized to perform this action' },
        { status: 403 }
      );
    }

    // Perform the action using a transaction
    const result = await prisma.$transaction(async (tx) => {
      // Update document status
      const updatedDocument = await tx.document.update({
        where: { id: documentId },
        data: {
          status: newStatus,
          signatureStatus: action === 'sign' ? signatureStatus : undefined,
          updatedAt: new Date()
        }
      });

      // Create document activity
      await tx.documentActivity.create({
        data: {
          documentId,
          activityType,
          performedBy: session.user?.id || 'system',
          details: notes || `Document ${action === 'sign' ? 'signed' : action + 'd'}`,
          ipAddress: request.headers.get('x-forwarded-for') || request.ip || 'unknown',
          userAgent: request.headers.get('user-agent') || 'unknown'
        }
      });

      // If signing, create signature record
      if (action === 'sign') {
        await tx.documentSignature.create({
          data: {
            documentId,
            userId: session.user?.id!,
            signatureType: 'ELECTRONIC',
            signatureData: signatureData,
            status: 'COMPLETED',
            signedAt: new Date(),
            ipAddress: request.headers.get('x-forwarded-for') || request.ip || 'unknown',
            userAgent: request.headers.get('user-agent') || 'unknown'
          }
        });

        // Create transaction event for signature
        await tx.transactionEvent.create({
          data: {
            transactionId: id,
            eventType: 'DOCUMENT_UPLOADED',
            description: `Document signed: ${document.name}`,
            metadata: {
              documentId: document.id,
              documentType: document.type,
              signedBy: session.user?.id
            },
            performedBy: session.user?.id || 'system'
          }
        });
      }

      return updatedDocument;
    });

    return NextResponse.json({
      success: true,
      data: result
    });
  } catch (error) {
    console.error('Error updating document:', error);
    return NextResponse.json(
      { error: 'Failed to update document' },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/transactions/[id]/documents
 * Delete a document from a transaction
 */
export async function DELETE(
  request: NextRequest,
  context: RouteContext
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const { id } = context.params;
    const { searchParams } = new URL(request.url);
    const documentId = searchParams.get('documentId');

    if (!documentId) {
      return NextResponse.json(
        { error: 'Document ID is required' },
        { status: 400 }
      );
    }

    // Check if transaction exists and user has access
    const transaction = await transactionService.getTransaction(id);
    if (!transaction) {
      return NextResponse.json(
        { error: 'Transaction not found' },
        { status: 404 }
      );
    }

    // Only certain roles can delete documents
    const canDelete = 
      session.user?.role === 'ADMIN' ||
      (session.user?.role === 'DEVELOPER' && transaction.development?.developerId === session.user.id) ||
      (session.user?.role === 'SOLICITOR' && transaction.solicitorId === session.user.id);

    if (!canDelete) {
      return NextResponse.json(
        { error: 'Unauthorized to delete documents' },
        { status: 403 }
      );
    }

    // Get document to check if it exists and belongs to this transaction
    const document = await prisma.document.findUnique({
      where: { id: documentId }
    });

    if (!document || document.transactionId !== id) {
      return NextResponse.json(
        { error: 'Document not found' },
        { status: 404 }
      );
    }

    // Soft delete implementation (mark as archived instead of actually deleting)
    const result = await prisma.$transaction(async (tx) => {
      // Archive the document instead of deleting
      const archivedDocument = await tx.document.update({
        where: { id: documentId },
        data: {
          status: DocumentStatus.ARCHIVED,
          updatedAt: new Date()
        }
      });

      // Create document activity for the deletion/archiving
      await tx.documentActivity.create({
        data: {
          documentId,
          activityType: 'DELETED',
          performedBy: session.user?.id || 'system',
          details: 'Document archived',
          ipAddress: request.headers.get('x-forwarded-for') || request.ip || 'unknown',
          userAgent: request.headers.get('user-agent') || 'unknown'
        }
      });

      // Create transaction event
      await tx.transactionEvent.create({
        data: {
          transactionId: id,
          eventType: 'DOCUMENT_UPLOADED', // Reusing this event type
          description: `Document archived: ${document.name}`,
          metadata: {
            documentId: document.id,
            documentType: document.type
          },
          performedBy: session.user?.id || 'system'
        }
      });

      return archivedDocument;
    });

    return NextResponse.json({
      success: true,
      message: 'Document archived successfully',
      data: result
    });
  } catch (error) {
    console.error('Error deleting document:', error);
    return NextResponse.json(
      { error: 'Failed to delete document' },
      { status: 500 }
    );
  }
}