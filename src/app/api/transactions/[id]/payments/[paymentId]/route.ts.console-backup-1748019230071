type Props = {
  params: Promise<{ id: string; paymentId: string }>
}

import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '../../../../auth/[...nextauth]/auth.config';
import { z } from 'zod';
import { PrismaClient, TransactionPaymentStatus } from '@prisma/client';
import { canAccessTransaction } from '../../../../../../utils/auth-utils';

// Payment update schema
const PaymentUpdateSchema = z.object({
  status: z.enum(['PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED']).optional(),
  paidDate: z.string().datetime().optional(),
  reference: z.string().optional(),
  method: z.enum(['BANK_TRANSFER', 'CREDIT_CARD', 'DEBIT_CARD', 'CASH', 'CHEQUE', 'MORTGAGE_DRAWDOWN']).optional(),
  description: z.string().optional()});

const prisma = new PrismaClient();

/**
 * GET /api/transactions/[id]/payments/[paymentId]
 * Get a specific payment
 */
export async function GET(
  request: NextRequest,
  context: { params: Promise<{ id: string; paymentId: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const params = await context.params;
    
    // Check if user can access this transaction
    const canAccess = await canAccessTransaction(session, params.id);
    if (!canAccess) {
      return NextResponse.json(
        { error: 'You do not have permission to access this transaction' },
        { status: 403 }
      );
    }

    // Get the specific payment
    const payment = await prisma.transactionPayment.findUnique({
      where: {
        id: params.paymentId,
        transactionId: params.id
      }
    });

    if (!payment) {
      return NextResponse.json(
        { error: 'Payment not found' },
        { status: 404 }
      );
    }

    return NextResponse.json(payment);
  } catch (error) {
    console.error('Error fetching payment:', error);
    return NextResponse.json(
      { error: 'Failed to fetch payment' },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/transactions/[id]/payments/[paymentId]
 * Update a payment status or details
 */
export async function PUT(
  request: NextRequest,
  context: { params: Promise<{ id: string; paymentId: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const params = await context.params;
    
    // Check if user can access this transaction
    const canAccess = await canAccessTransaction(session, params.id);
    if (!canAccess) {
      return NextResponse.json(
        { error: 'You do not have permission to access this transaction' },
        { status: 403 }
      );
    }

    const body: any = await request.json();
    const validationResult = PaymentUpdateSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        { error: 'Invalid update data', details: validationResult.error.format() },
        { status: 400 }
      );
    }

    const updateData = validationResult.data;

    // Check if payment exists
    const existingPayment = await prisma.transactionPayment.findUnique({
      where: {
        id: params.paymentId,
        transactionId: params.id
      }
    });

    if (!existingPayment) {
      return NextResponse.json(
        { error: 'Payment not found' },
        { status: 404 }
      );
    }

    // Prepare updates
    const updates: any = {};
    if (updateData.status) updates.status = updateData.status as TransactionPaymentStatus;
    if (updateData.paidDate) updates.paidDate = new Date(updateData.paidDate);
    if (updateData.reference) updates.reference = updateData.reference;
    if (updateData.method) updates.method = updateData.method;
    if (updateData.description) updates.description = updateData.description;

    // If marking as completed, set clearedDate if not already set
    if (updateData.status === 'COMPLETED' && !existingPayment.clearedDate) {
      updates.clearedDate = new Date();
    }

    // Update the payment
    const updatedPayment = await prisma.transactionPayment.update({
      where: {
        id: params.paymentId
      },
      data: updates
    });

    // If payment is marked as completed, update transaction totals
    if (updateData.status === 'COMPLETED' && existingPayment.status !== 'COMPLETED') {
      const transaction = await prisma.transaction.findUnique({
        where: { id: params.id }
      });

      if (transaction) {
        const totalPaid = (transaction.totalPaid || 0) + existingPayment.amount;
        const outstandingBalance = (transaction.agreedPrice || 0) - totalPaid;

        await prisma.transaction.update({
          where: { id: params.id },
          data: { totalPaid, outstandingBalance }
        });

        // Log event
        await prisma.transactionEvent.create({
          data: {
            transactionId: params.id,
            eventType: 'PAYMENT_RECEIVED',
            description: `Payment of ${existingPayment.amount} ${existingPayment.currency} received for ${existingPayment.type}`,
            metadata: {
              paymentId: params.paymentId,
              amount: existingPayment.amount,
              method: existingPayment.method
            },
            performedBy: session.user.id
          }
        });
      }
    }

    return NextResponse.json(updatedPayment);
  } catch (error) {
    console.error('Error updating payment:', error);
    return NextResponse.json(
      { error: 'Failed to update payment' },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/transactions/[id]/payments/[paymentId]
 * Cancel a pending payment
 */
export async function DELETE(
  request: NextRequest,
  context: { params: Promise<{ id: string; paymentId: string }> }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const params = await context.params;
    
    // Check if user can access this transaction
    const canAccess = await canAccessTransaction(session, params.id);
    if (!canAccess) {
      return NextResponse.json(
        { error: 'You do not have permission to access this transaction' },
        { status: 403 }
      );
    }

    // Get the payment
    const payment = await prisma.transactionPayment.findUnique({
      where: {
        id: params.paymentId,
        transactionId: params.id
      }
    });

    if (!payment) {
      return NextResponse.json(
        { error: 'Payment not found' },
        { status: 404 }
      );
    }

    // Check if payment can be cancelled (only pending or processing payments)
    if (payment.status !== 'PENDING' && payment.status !== 'PROCESSING') {
      return NextResponse.json(
        { error: 'Only pending or processing payments can be cancelled' },
        { status: 400 }
      );
    }

    // Update payment status to cancelled
    await prisma.transactionPayment.update({
      where: {
        id: params.paymentId
      },
      data: {
        status: 'CANCELLED'
      }
    });

    // Log event
    await prisma.transactionEvent.create({
      data: {
        transactionId: params.id,
        eventType: 'PAYMENT_CANCELLED',
        description: `Payment of ${payment.amount} ${payment.currency} for ${payment.type} was cancelled`,
        metadata: {
          paymentId: params.paymentId,
          amount: payment.amount,
          method: payment.method
        },
        performedBy: session.user.id
      }
    });

    return NextResponse.json({
      message: 'Payment cancelled successfully',
      paymentId: params.paymentId});
  } catch (error) {
    console.error('Error cancelling payment:', error);
    return NextResponse.json(
      { error: 'Failed to cancel payment' },
      { status: 500 }
    );
  }
}