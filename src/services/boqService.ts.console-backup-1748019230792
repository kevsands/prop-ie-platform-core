export interface BOQItem {
  id: string;
  categoryId: string;
  categoryName: string;
  itemCode: string;
  description: string;
  unit: string;
  standardQuantity: number;
  standardRate: number;
  standardAmount: number;
  variations: BOQVariation[];
  currentQuantity: number;
  currentRate: number;
  currentAmount: number;
  variance: number;
  variancePercentage: number;
  status: BOQItemStatus;
}

export interface BOQVariation {
  id: string;
  itemId: string;
  reason: string;
  source: VariationSource;
  quantityChange: number;
  rateChange: number;
  amountChange: number;
  requestedBy: string;
  requestedAt: Date;
  approvedBy?: string;
  approvedAt?: Date;
  status: VariationStatus;
  customizationId?: string;
  buyerId?: string;
  unitId?: string;
  notes?: string;
}

export enum BOQItemStatus {
  STANDARD = 'standard',
  VARIED = 'varied',
  PENDING_APPROVAL = 'pending_approval',
  APPROVED = 'approved',
  REJECTED = 'rejected'
}

export enum VariationSource {
  BUYER_CUSTOMIZATION = 'buyer_customization',
  DEVELOPER_CHANGE = 'developer_change',
  SITE_CONDITION = 'site_condition',
  REGULATORY = 'regulatory',
  DESIGN_CHANGE = 'design_change'
}

export enum VariationStatus {
  PENDING = 'pending',
  APPROVED = 'approved',
  REJECTED = 'rejected',
  IMPLEMENTED = 'implemented'
}

export interface BOQCategory {
  id: string;
  name: string;
  description: string;
  items: BOQItem[];
  totalStandardAmount: number;
  totalCurrentAmount: number;
  totalVariance: number;
}

export interface BOQSummary {
  projectId: string;
  projectName: string;
  categories: BOQCategory[];
  totalStandardCost: number;
  totalCurrentCost: number;
  totalVariance: number;
  variancePercentage: number;
  pendingApprovals: number;
  buyerCustomizations: number;
  lastUpdated: Date;
}

class BOQService {
  private boqData: Map<string, BOQSummary> = new Map();

  async getProjectBOQ(projectId: string): Promise<BOQSummary> {
    // Mock data for demonstration
    const mockBOQ: BOQSummary = {
      projectId,
      projectName: 'Fitzgerald Gardens',
      categories: [
        {
          id: 'finishes',
          name: 'Internal Finishes',
          description: 'Flooring, painting, and fixtures',
          items: [
            {
              id: 'floor-1',
              categoryId: 'finishes',
              categoryName: 'Internal Finishes',
              itemCode: 'FIN-001',
              description: 'Engineered Oak Flooring - Living Areas',
              unit: 'sq.m',
              standardQuantity: 45,
              standardRate: 85,
              standardAmount: 3825,
              variations: [],
              currentQuantity: 45,
              currentRate: 85,
              currentAmount: 3825,
              variance: 0,
              variancePercentage: 0,
              status: BOQItemStatus.STANDARD
            },
            {
              id: 'floor-2',
              categoryId: 'finishes',
              categoryName: 'Internal Finishes',
              itemCode: 'FIN-002',
              description: 'Porcelain Tiles - Kitchen/Bathroom',
              unit: 'sq.m',
              standardQuantity: 25,
              standardRate: 65,
              standardAmount: 1625,
              variations: [],
              currentQuantity: 25,
              currentRate: 65,
              currentAmount: 1625,
              variance: 0,
              variancePercentage: 0,
              status: BOQItemStatus.STANDARD
            }
          ],
          totalStandardAmount: 5450,
          totalCurrentAmount: 5450,
          totalVariance: 0
        },
        {
          id: 'kitchen',
          name: 'Kitchen',
          description: 'Kitchen units and appliances',
          items: [
            {
              id: 'kitchen-1',
              categoryId: 'kitchen',
              categoryName: 'Kitchen',
              itemCode: 'KIT-001',
              description: 'Standard Kitchen Units',
              unit: 'set',
              standardQuantity: 1,
              standardRate: 8500,
              standardAmount: 8500,
              variations: [
                {
                  id: 'var-1',
                  itemId: 'kitchen-1',
                  reason: 'Buyer upgrade to premium units',
                  source: VariationSource.BUYER_CUSTOMIZATION,
                  quantityChange: 0,
                  rateChange: 3500,
                  amountChange: 3500,
                  requestedBy: 'john.doe@example.com',
                  requestedAt: new Date('2024-03-15'),
                  approvedBy: 'project.manager@prop.ie',
                  approvedAt: new Date('2024-03-16'),
                  status: VariationStatus.APPROVED,
                  customizationId: 'cust-123',
                  buyerId: 'buyer-456',
                  unitId: 'unit-789',
                  notes: 'Upgrade to marble worktop and soft-close drawers'
                }
              ],
              currentQuantity: 1,
              currentRate: 12000,
              currentAmount: 12000,
              variance: 3500,
              variancePercentage: 41.18,
              status: BOQItemStatus.APPROVED
            }
          ],
          totalStandardAmount: 8500,
          totalCurrentAmount: 12000,
          totalVariance: 3500
        }
      ],
      totalStandardCost: 13950,
      totalCurrentCost: 17450,
      totalVariance: 3500,
      variancePercentage: 25.09,
      pendingApprovals: 2,
      buyerCustomizations: 1,
      lastUpdated: new Date()
    };

    return mockBOQ;
  }

  async addVariation(
    projectId: string,
    itemId: string,
    variation: Partial<BOQVariation>
  ): Promise<BOQVariation> {
    const newVariation: BOQVariation = {
      id: this.generateId(),
      itemId,
      reason: variation.reason || '',
      source: variation.source || VariationSource.BUYER_CUSTOMIZATION,
      quantityChange: variation.quantityChange || 0,
      rateChange: variation.rateChange || 0,
      amountChange: variation.amountChange || 0,
      requestedBy: variation.requestedBy || '',
      requestedAt: new Date(),
      status: VariationStatus.PENDING,
      ...variation
    };

    // Update BOQ item
    const boq = await this.getProjectBOQ(projectId);
    const category = boq.categories.find(cat => 
      cat.items.some(item => item.id === itemId)
    );
    
    if (category) {
      const item = category.items.find(i => i.id === itemId);
      if (item) {
        item.variations.push(newVariation);
        item.status = BOQItemStatus.PENDING_APPROVAL;
        item.currentQuantity = item.standardQuantity + newVariation.quantityChange;
        item.currentRate = item.standardRate + newVariation.rateChange;
        item.currentAmount = item.currentQuantity * item.currentRate;
        item.variance = item.currentAmount - item.standardAmount;
        item.variancePercentage = (item.variance / item.standardAmount) * 100;
      }
    }

    return newVariation;
  }

  async approveVariation(
    projectId: string,
    variationId: string,
    approvedBy: string
  ): Promise<void> {
    const boq = await this.getProjectBOQ(projectId);
    
    for (const category of boq.categories) {
      for (const item of category.items) {
        const variation = item.variations.find(v => v.id === variationId);
        if (variation) {
          variation.status = VariationStatus.APPROVED;
          variation.approvedBy = approvedBy;
          variation.approvedAt = new Date();
          item.status = BOQItemStatus.APPROVED;
          return;
        }
      }
    }
  }

  async getBuyerVariations(projectId: string, buyerId: string): Promise<BOQVariation[]> {
    const boq = await this.getProjectBOQ(projectId);
    const variations: BOQVariation[] = [];
    
    for (const category of boq.categories) {
      for (const item of category.items) {
        const buyerVars = item.variations.filter(v => v.buyerId === buyerId);
        variations.push(...buyerVars);
      }
    }
    
    return variations;
  }

  async getUnitVariations(projectId: string, unitId: string): Promise<BOQVariation[]> {
    const boq = await this.getProjectBOQ(projectId);
    const variations: BOQVariation[] = [];
    
    for (const category of boq.categories) {
      for (const item of category.items) {
        const unitVars = item.variations.filter(v => v.unitId === unitId);
        variations.push(...unitVars);
      }
    }
    
    return variations;
  }

  async calculateUnitBOQ(
    projectId: string,
    unitId: string,
    customizations: any[]
  ): Promise<{
    standardCost: number;
    customizationCost: number;
    totalCost: number;
    variations: BOQVariation[];
  }> {
    const boq = await this.getProjectBOQ(projectId);
    let standardCost = 0;
    let customizationCost = 0;
    const variations: BOQVariation[] = [];

    // Calculate base costs
    for (const category of boq.categories) {
      for (const item of category.items) {
        standardCost += item.standardAmount;
      }
    }

    // Add customization variations
    for (const customization of customizations) {
      const variation: BOQVariation = {
        id: this.generateId(),
        itemId: customization.itemId,
        reason: `Buyer customization: ${customization.name}`,
        source: VariationSource.BUYER_CUSTOMIZATION,
        quantityChange: 0,
        rateChange: customization.cost,
        amountChange: customization.cost,
        requestedBy: 'buyer@example.com',
        requestedAt: new Date(),
        status: VariationStatus.APPROVED,
        customizationId: customization.id,
        unitId
      };

      variations.push(variation);
      customizationCost += customization.cost;
    }

    return {
      standardCost,
      customizationCost,
      totalCost: standardCost + customizationCost,
      variations
    };
  }

  private generateId(): string {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }
}

export const boqService = new BOQService();