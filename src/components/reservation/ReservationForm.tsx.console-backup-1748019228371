'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/context/AuthContext';
import { useMutation } from '@tanstack/react-query';
import {
  Home,
  Euro,
  Calendar,
  User,
  Mail,
  Phone,
  Shield,
  CreditCard,
  AlertCircle,
  CheckCircle,
  Loader2,
  FileText,
  Lock
} from 'lucide-react';
import { loadStripe } from '@stripe/stripe-js';
import {
  Elements,
  CardElement,
  useStripe,
  useElements
} from '@stripe/react-stripe-js';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || '');

interface ReservationFormProps {
  property: {
    id: string;
    title: string;
    price: number;
    location: string;
    developmentId: string;
    unitId: string;
    image?: string;
  };
  onSuccess?: (reservationId: string) => void;
}

interface ReservationData {
  unitId: string;
  developmentId: string;
  agreedPrice: number;
  depositAmount: number;
  paymentMethod: string;
  personalInfo: {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    address: string;
  };
  kycConsent: boolean;
  termsAccepted: boolean;
  marketingOptIn: boolean;
}

function ReservationFormContent({ property, onSuccess }: ReservationFormProps) {
  const router = useRouter();
  const { user } = useAuth();
  const stripe = useStripe();
  const elements = useElements();

  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState<ReservationData>({
    unitId: property.unitId,
    developmentId: property.developmentId,
    agreedPrice: property.price,
    depositAmount: 500, // Standard booking deposit
    paymentMethod: 'card',
    personalInfo: {
      firstName: user?.firstName || '',
      lastName: user?.lastName || '',
      email: user?.email || '',
      phone: user?.phone || '',
      address: ''
    },
    kycConsent: false,
    termsAccepted: false,
    marketingOptIn: false
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  // Create reservation mutation
  const createReservation = useMutation({
    mutationFn: async (data: ReservationData) => {
      const response = await fetch('/api/transactions/reservation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to create reservation');
      }

      return response.json();
    },
    onSuccess: async (data) => {
      // Process payment
      if (stripe && elements) {
        const cardElement = elements.getElement(CardElement);
        if (!cardElement) return;

        try {
          // Create payment intent
          const paymentResponse = await fetch('/api/payments/create-intent', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
              amount: formData.depositAmount,
              transactionId: data.id,
              description: `Booking deposit for ${property.title}`
            })
          });

          const { clientSecret } = await paymentResponse.json();

          // Confirm payment
          const result = await stripe.confirmCardPayment(clientSecret, {
            payment_method: {
              card: cardElement,
              billing_details: {
                name: `${formData.personalInfo.firstName} ${formData.personalInfo.lastName}`,
                email: formData.personalInfo.email,
                phone: formData.personalInfo.phone,
                address: {
                  line1: formData.personalInfo.address
                }
              }
            }
          });

          if (result.error) {
            throw new Error(result.error.message);
          }

          // Payment successful
          if (onSuccess) {
            onSuccess(data.id);
          } else {
            router.push(`/buyer/transactions/${data.id}/confirmation`);
          }
        } catch (error) {
          console.error('Payment failed:', error);
          setErrors({ payment: 'Payment failed. Please try again.' });
        }
      }
    }
  });

  const validateStep = (stepNumber: number): boolean => {
    const newErrors: Record<string, string> = {};

    if (stepNumber === 1) {
      // Validate personal info
      if (!formData.personalInfo.firstName) newErrors.firstName = 'First name is required';
      if (!formData.personalInfo.lastName) newErrors.lastName = 'Last name is required';
      if (!formData.personalInfo.email) newErrors.email = 'Email is required';
      if (!formData.personalInfo.phone) newErrors.phone = 'Phone number is required';
      if (!formData.personalInfo.address) newErrors.address = 'Address is required';
    }

    if (stepNumber === 2) {
      // Validate KYC consent
      if (!formData.kycConsent) newErrors.kycConsent = 'KYC consent is required';
      if (!formData.termsAccepted) newErrors.terms = 'You must accept the terms and conditions';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep(step)) {
      setStep(step + 1);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateStep(3)) return;

    createReservation.mutate(formData);
  };

  return (
    <div className="max-w-4xl mx-auto">
      {/* Property Summary */}
      <div className="bg-gray-50 rounded-lg p-6 mb-6">
        <div className="flex items-start gap-4">
          {property.image && (
            <img
              src={property.image}
              alt={property.title}
              className="w-24 h-24 rounded-lg object-cover"
            />
          )}
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-gray-900">{property.title}</h3>
            <p className="text-gray-600">{property.location}</p>
            <p className="text-2xl font-bold text-blue-600 mt-2">
              €{property.price.toLocaleString()}
            </p>
          </div>
          <div className="text-right">
            <p className="text-sm text-gray-600">Booking Deposit</p>
            <p className="text-xl font-bold text-gray-900">€{formData.depositAmount}</p>
          </div>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="flex items-center justify-between mb-8">
        {[1, 2, 3].map((num) => (
          <div
            key={num}
            className={`flex items-center ${num < 3 ? 'flex-1' : ''}`}
          >
            <div
              className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${
                step >= num
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-500'
              }`}
            >
              {num}
            </div>
            {num < 3 && (
              <div
                className={`flex-1 h-0.5 mx-2 ${
                  step > num ? 'bg-blue-600' : 'bg-gray-200'
                }`}
              />
            )}
          </div>
        ))}
      </div>

      <form onSubmit={handleSubmit}>
        {/* Step 1: Personal Information */}
        {step === 1 && (
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-6">Personal Information</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  First Name *
                </label>
                <input
                  type="text"
                  value={formData.personalInfo.firstName}
                  onChange={(e) => setFormData({
                    ...formData,
                    personalInfo: { ...formData.personalInfo, firstName: e.target.value }
                  })}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
                    errors.firstName ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.firstName && (
                  <p className="text-red-500 text-sm mt-1">{errors.firstName}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Last Name *
                </label>
                <input
                  type="text"
                  value={formData.personalInfo.lastName}
                  onChange={(e) => setFormData({
                    ...formData,
                    personalInfo: { ...formData.personalInfo, lastName: e.target.value }
                  })}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
                    errors.lastName ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.lastName && (
                  <p className="text-red-500 text-sm mt-1">{errors.lastName}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email *
                </label>
                <input
                  type="email"
                  value={formData.personalInfo.email}
                  onChange={(e) => setFormData({
                    ...formData,
                    personalInfo: { ...formData.personalInfo, email: e.target.value }
                  })}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
                    errors.email ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.email && (
                  <p className="text-red-500 text-sm mt-1">{errors.email}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Phone *
                </label>
                <input
                  type="tel"
                  value={formData.personalInfo.phone}
                  onChange={(e) => setFormData({
                    ...formData,
                    personalInfo: { ...formData.personalInfo, phone: e.target.value }
                  })}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
                    errors.phone ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.phone && (
                  <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
                )}
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Address *
                </label>
                <textarea
                  value={formData.personalInfo.address}
                  onChange={(e) => setFormData({
                    ...formData,
                    personalInfo: { ...formData.personalInfo, address: e.target.value }
                  })}
                  rows={3}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 ${
                    errors.address ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.address && (
                  <p className="text-red-500 text-sm mt-1">{errors.address}</p>
                )}
              </div>
            </div>

            <div className="flex justify-end mt-6">
              <button
                type="button"
                onClick={handleNext}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                Next
              </button>
            </div>
          </div>
        )}

        {/* Step 2: KYC & Terms */}
        {step === 2 && (
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-6">Verification & Terms</h2>
            
            <div className="space-y-6">
              {/* KYC Notice */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <Shield className="w-5 h-5 text-blue-600 mt-0.5" />
                  <div>
                    <h3 className="font-medium text-blue-900">KYC/AML Verification Required</h3>
                    <p className="text-sm text-blue-800 mt-1">
                      To comply with Irish property regulations, we need to verify your identity. 
                      You\'ll need to upload the following documents after reservation:
                    </p>
                    <ul className="list-disc list-inside text-sm text-blue-800 mt-2 space-y-1">
                      <li>Valid passport or driver\'s license</li>
                      <li>Proof of address (utility bill or bank statement)</li>
                      <li>Proof of funds (bank statement showing deposit funds)</li>
                    </ul>
                  </div>
                </div>
              </div>

              {/* Consent Checkboxes */}
              <div className="space-y-4">
                <label className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    checked={formData.kycConsent}
                    onChange={(e) => setFormData({ ...formData, kycConsent: e.target.checked })}
                    className="mt-1"
                  />
                  <span className="text-sm text-gray-700">
                    I consent to KYC/AML verification and understand that my reservation is 
                    subject to successful completion of this process *
                  </span>
                </label>
                {errors.kycConsent && (
                  <p className="text-red-500 text-sm mt-1 ml-6">{errors.kycConsent}</p>
                )}

                <label className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    checked={formData.termsAccepted}
                    onChange={(e) => setFormData({ ...formData, termsAccepted: e.target.checked })}
                    className="mt-1"
                  />
                  <span className="text-sm text-gray-700">
                    I have read and accept the{' '}
                    <a href="/terms" target="_blank" className="text-blue-600 hover:underline">
                      Terms and Conditions
                    </a>{' '}
                    and{' '}
                    <a href="/reservation-agreement" target="_blank" className="text-blue-600 hover:underline">
                      Reservation Agreement
                    </a>{' '}*
                  </span>
                </label>
                {errors.terms && (
                  <p className="text-red-500 text-sm mt-1 ml-6">{errors.terms}</p>
                )}

                <label className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    checked={formData.marketingOptIn}
                    onChange={(e) => setFormData({ ...formData, marketingOptIn: e.target.checked })}
                    className="mt-1"
                  />
                  <span className="text-sm text-gray-700">
                    I would like to receive updates about this development and other properties
                  </span>
                </label>
              </div>

              {/* Important Notes */}
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-start gap-3">
                  <AlertCircle className="w-5 h-5 text-yellow-600 mt-0.5" />
                  <div>
                    <h3 className="font-medium text-yellow-900">Important Information</h3>
                    <ul className="list-disc list-inside text-sm text-yellow-800 mt-2 space-y-1">
                      <li>The booking deposit is fully refundable if KYC verification fails</li>
                      <li>Property will be reserved for 30 days pending contract exchange</li>
                      <li>Additional deposit (typically 10% minus booking deposit) due on contract signing</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex justify-between mt-6">
              <button
                type="button"
                onClick={() => setStep(1)}
                className="text-gray-600 hover:text-gray-800 font-medium"
              >
                Back
              </button>
              <button
                type="button"
                onClick={handleNext}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                Next
              </button>
            </div>
          </div>
        )}

        {/* Step 3: Payment */}
        {step === 3 && (
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-6">Payment Details</h2>
            
            <div className="mb-6">
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <span className="text-gray-700">Booking Deposit</span>
                  <span className="text-xl font-bold text-gray-900">
                    €{formData.depositAmount}
                  </span>
                </div>
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Card Details
              </label>
              <div className="border border-gray-300 rounded-lg p-4">
                <CardElement
                  options={{
                    style: {
                      base: {
                        fontSize: '16px',
                        color: '#424770',
                        '::placeholder': {
                          color: '#aab7c4'}},
                      invalid: {
                        color: '#9e2146'}}}}
                />
              </div>
              {errors.payment && (
                <p className="text-red-500 text-sm mt-2">{errors.payment}</p>
              )}
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <div className="flex items-start gap-3">
                <Lock className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <h3 className="font-medium text-blue-900">Secure Payment</h3>
                  <p className="text-sm text-blue-800 mt-1">
                    Your payment information is encrypted and secure. We use Stripe for 
                    payment processing and never store your card details.
                  </p>
                </div>
              </div>
            </div>

            <div className="flex justify-between">
              <button
                type="button"
                onClick={() => setStep(2)}
                className="text-gray-600 hover:text-gray-800 font-medium"
              >
                Back
              </button>
              <button
                type="submit"
                disabled={createReservation.isPending || !stripe}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
              >
                {createReservation.isPending ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    <CreditCard className="w-4 h-4" />
                    Pay €{formData.depositAmount}
                  </>
                )}
              </button>
            </div>
          </div>
        )}
      </form>
    </div>
  );
}

export default function ReservationForm(props: ReservationFormProps) {
  return (
    <Elements stripe={stripePromise}>
      <ReservationFormContent {...props} />
    </Elements>
  );
}