'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Loader2, Lock, CreditCard, ShieldCheck, AlertCircle } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { Transaction } from '@/lib/api/buyer-journey-api';
import { paymentCardSchema } from '@/lib/validation/buyer-journey';
import { z } from 'zod';

interface SecurePaymentProcessorProps {
  transactionId: string;
  transactionData?: Transaction;
  amount: number;
  onSuccess: (paymentId: string) => void;
  onError: (error: Error) => void;
  isLoading?: boolean;
}

// Security constants
const SECURE_FIELD_BLUR_DELAY = 100; // ms
const PAYMENT_THROTTLE_DELAY = 1000; // ms
const MAX_CVV_ATTEMPTS = 3;

/**
 * Secure payment processor component with PCI compliance features
 * and advanced security protections
 */
export function SecurePaymentProcessor({ 
  transactionId, 
  transactionData,
  amount, 
  onSuccess, 
  onError,
  isLoading = false
}: SecurePaymentProcessorProps) {
  // Core state
  const [cardNumber, setCardNumber] = useState('');
  const [expiryMonth, setExpiryMonth] = useState('');
  const [expiryYear, setExpiryYear] = useState('');
  const [cvv, setCvv] = useState('');
  const [cardholderName, setCardholderName] = useState('');
  
  // Security state
  const [securityError, setSecurityError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [cvvAttempts, setCvvAttempts] = useState(0);
  const [isLocked, setIsLocked] = useState(false);
  const [paymentStartTime, setPaymentStartTime] = useState(0);
  const paymentProcessingTimeout = useRef<NodeJS.Timeout | null>(null);
  
  // Format card number with spaces for readability
  const formatCardNumber = (value: string) => {
    const digits = value.replace(/\D/g, '');
    let formatted = '';
    
    for (let i = 0; i < digits.length; i++) {
      if (i > 0 && i % 4 === 0) {
        formatted += ' ';
      }
      formatted += digits[i];
    }
    
    return formatted;
  };
  
  // Validate form before submission
  const validateForm = (): boolean => {
    try {
      const validationResult = paymentCardSchema.parse({
        cardNumber: cardNumber.replace(/\s/g, ''),
        expiryMonth,
        expiryYear,
        cvv
      });
      
      setValidationErrors({});
      return true;
    } catch (error) {
      if (error instanceof z.ZodError) {
        const fieldErrors: Record<string, string> = {};
        
        error.errors.forEach(err => {
          const field = err.path.join('.');
          fieldErrors[field] = err.message;
        });
        
        setValidationErrors(fieldErrors);
      }
      
      return false;
    }
  };
  
  // Handle form submission with security measures
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Security checks
    if (isLocked) {
      setSecurityError('Payment processing is locked. Please try again later.');
      return;
    }
    
    if (Date.now() - paymentStartTime < PAYMENT_THROTTLE_DELAY) {
      setSecurityError('Please wait before submitting again.');
      return;
    }
    
    // Validate form
    if (!validateForm()) {
      // Check CVV attempts for anti-brute force
      if ('cvv' in validationErrors) {
        const newAttempts = cvvAttempts + 1;
        setCvvAttempts(newAttempts);
        
        if (newAttempts >= MAX_CVV_ATTEMPTS) {
          setIsLocked(true);
          setSecurityError('Too many failed CVV attempts. Please try again later.');
          
          // Auto-unlock after 30 seconds
          setTimeout(() => {
            setIsLocked(false);
            setCvvAttempts(0);
          }, 30000);
          
          return;
        }
      }
      
      return;
    }
    
    // Mark submission time for throttling
    setPaymentStartTime(Date.now());
    
    try {
      // In a real implementation, payment would be processed securely via a PCI-compliant payment processor
      // like Stripe Elements or similar that never exposes card details to your application
      
      // Simulate payment processing
      paymentProcessingTimeout.current = setTimeout(() => {
        if (Math.random() > 0.2) { // 80% success rate for demo
          onSuccess(`pmt-${Date.now()}`);
        } else {
          // Demo error cases
          if (cardNumber.startsWith('4111')) {
            onError(new Error('Insufficient funds'));
          } else if (cardNumber.startsWith('5555')) {
            onError(new Error('Card expired'));
          } else {
            onError(new Error('Payment processing failed'));
          }
        }
      }, 2000);
    } catch (error) {
      onError(error instanceof Error ? error : new Error('Unknown payment error'));
    }
  };
  
  // Clean up timeout on unmount
  useEffect(() => {
    return () => {
      if (paymentProcessingTimeout.current) {
        clearTimeout(paymentProcessingTimeout.current);
      }
    };
  }, []);
  
  // Secure field blur handler with artificial delay
  // to prevent timing attacks on sensitive fields
  const handleSecureFieldBlur = (field: string, validator: () => boolean) => {
    setTimeout(() => {
      if (!validator()) {
        // Only validate this specific field
        validateForm();
      }
    }, SECURE_FIELD_BLUR_DELAY);
  };
  
  return (
    <div className="w-full max-w-md mx-auto">
      {securityError && (
        <Alert variant="destructive" className="mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{securityError}</AlertDescription>
        </Alert>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="cardholderName">Cardholder Name</Label>
          <Input
            id="cardholderName"
            placeholder="Name as it appears on card"
            value={cardholderName}
            onChange={(e) => setCardholderName(e.target.value)}
            disabled={isLoading || isLocked}
            className={validationErrors.cardholderName ? 'border-red-500' : ''}
          />
          {validationErrors.cardholderName && (
            <p className="text-sm text-red-500">{validationErrors.cardholderName}</p>
          )}
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="cardNumber" className="flex items-center gap-1">
            <CreditCard className="h-4 w-4" /> Card Number
          </Label>
          <Input
            id="cardNumber"
            placeholder="1234 5678 9012 3456"
            value={cardNumber}
            onChange={(e) => setCardNumber(formatCardNumber(e.target.value))}
            onBlur={() => handleSecureFieldBlur('cardNumber', () => cardNumber.length >= 13)}
            maxLength={19}
            disabled={isLoading || isLocked}
            className={validationErrors.cardNumber ? 'border-red-500' : ''}
            autoComplete="cc-number"
          />
          {validationErrors.cardNumber && (
            <p className="text-sm text-red-500">{validationErrors.cardNumber}</p>
          )}
        </div>
        
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="expiryDate">Expiry Date</Label>
            <div className="flex gap-2">
              <Input
                id="expiryMonth"
                placeholder="MM"
                value={expiryMonth}
                onChange={(e) => {
                  const value = e.target.value.replace(/\D/g, '');
                  setExpiryMonth(value.substring(0, 2));
                }}
                onBlur={() => handleSecureFieldBlur('expiryMonth', () => expiryMonth.length === 2)}
                maxLength={2}
                disabled={isLoading || isLocked}
                className={validationErrors.expiryMonth ? 'border-red-500' : ''}
                autoComplete="cc-exp-month"
              />
              <span className="flex items-center">/</span>
              <Input
                id="expiryYear"
                placeholder="YY"
                value={expiryYear}
                onChange={(e) => {
                  const value = e.target.value.replace(/\D/g, '');
                  setExpiryYear(value.substring(0, 2));
                }}
                onBlur={() => handleSecureFieldBlur('expiryYear', () => expiryYear.length === 2)}
                maxLength={2}
                disabled={isLoading || isLocked}
                className={validationErrors.expiryYear ? 'border-red-500' : ''}
                autoComplete="cc-exp-year"
              />
            </div>
            {(validationErrors.expiryMonth || validationErrors.expiryYear || validationErrors.expiryDate) && (
              <p className="text-sm text-red-500">
                {validationErrors.expiryMonth || validationErrors.expiryYear || validationErrors.expiryDate}
              </p>
            )}
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="cvv">
              CVV
              <span className="text-xs text-gray-500 ml-1">(3-4 digits)</span>
            </Label>
            <Input
              id="cvv"
              placeholder="123"
              value={cvv}
              onChange={(e) => {
                const value = e.target.value.replace(/\D/g, '');
                setCvv(value.substring(0, 4));
              }}
              onBlur={() => handleSecureFieldBlur('cvv', () => cvv.length >= 3)}
              maxLength={4}
              disabled={isLoading || isLocked}
              className={validationErrors.cvv ? 'border-red-500' : ''}
              autoComplete="cc-csc"
            />
            {validationErrors.cvv && (
              <p className="text-sm text-red-500">{validationErrors.cvv}</p>
            )}
          </div>
        </div>
        
        <div className="pt-4">
          <Button
            type="submit"
            className="w-full"
            disabled={isLoading || isLocked}
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Processing...
              </>
            ) : (
              <>
                Pay €{amount.toLocaleString()}
                <Lock className="ml-2 h-4 w-4" />
              </>
            )}
          </Button>
        </div>
      </form>
      
      <div className="mt-4 p-3 bg-gray-50 rounded-md flex items-start text-xs text-gray-600">
        <ShieldCheck className="h-4 w-4 text-green-600 mr-2 mt-0.5" />
        <div>
          <p className="font-medium text-gray-700">Secure Payment</p>
          <p>Your payment information is encrypted and processed securely. We do not store your card details.</p>
        </div>
      </div>
    </div>
  );
}