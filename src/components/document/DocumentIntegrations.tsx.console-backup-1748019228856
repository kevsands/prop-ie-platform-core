'use client';

import React, { useState } from 'react';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogDescription,
  DialogFooter 
} from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Mail,
  Archive,
  Download,
  Upload,
  FolderOpen,
  Users,
  Calendar,
  Clock,
  CheckCircle,
  AlertCircle,
  Loader2,
  Send,
  Package,
  FileArchive,
  Trash2,
  Tag,
  Filter,
  RefreshCw,
  Database,
  Shield
} from 'lucide-react';
import { Document } from '@/hooks/useDocuments';
import { format } from 'date-fns';

interface DocumentIntegrationsProps {
  selectedDocuments: Document[];
  onOperationComplete: () => void;
}

interface EmailRecipient {
  email: string;
  name?: string;
}

interface ArchiveSettings {
  retentionPeriod: number; // days
  compressFiles: boolean;
  encryptArchive: boolean;
  notifyOwners: boolean;
}

const DocumentIntegrations: React.FC<DocumentIntegrationsProps> = ({
  selectedDocuments,
  onOperationComplete
}) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [operationProgress, setOperationProgress] = useState(0);
  const [activeOperation, setActiveOperation] = useState<string | null>(null);
  
  // Email state
  const [emailDialogOpen, setEmailDialogOpen] = useState(false);
  const [emailRecipients, setEmailRecipients] = useState<EmailRecipient[]>([]);
  const [emailSubject, setEmailSubject] = useState('');
  const [emailMessage, setEmailMessage] = useState('');
  
  // Bulk operation state
  const [bulkOperation, setBulkOperation] = useState<string>('');
  const [bulkCategory, setBulkCategory] = useState('');
  const [bulkTags, setBulkTags] = useState<string[]>([]);
  
  // Archive state
  const [archiveDialogOpen, setArchiveDialogOpen] = useState(false);
  const [archiveSettings, setArchiveSettings] = useState<ArchiveSettings>({
    retentionPeriod: 365,
    compressFiles: true,
    encryptArchive: true,
    notifyOwners: true
  });

  const handleEmailDocuments = async () => {
    if (emailRecipients.length === 0) {
      alert('Please add at least one recipient');
      return;
    }
    
    setIsProcessing(true);
    setActiveOperation('email');
    setOperationProgress(0);
    
    try {
      const totalDocs = selectedDocuments.length;
      
      for (let i = 0; i < totalDocs; i++) {
        const doc = selectedDocuments[i];
        
        // Simulate API call to email document
        await fetch('/api/documents/enhanced/email', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            documentId: doc.id,
            recipients: emailRecipients.map(r => r.email),
            subject: emailSubject || `Document: ${doc.name}`,
            message: emailMessage
          })
        });
        
        setOperationProgress(((i + 1) / totalDocs) * 100);
      }
      
      setEmailDialogOpen(false);
      onOperationComplete();
    } catch (error) {
      console.error('Failed to email documents:', error);
      alert('Failed to email documents');
    } finally {
      setIsProcessing(false);
      setActiveOperation(null);
    }
  };

  const handleBulkOperation = async () => {
    if (!bulkOperation) {
      alert('Please select an operation');
      return;
    }
    
    setIsProcessing(true);
    setActiveOperation(bulkOperation);
    setOperationProgress(0);
    
    try {
      const documentIds = selectedDocuments.map(d => d.id);
      
      let data: any = {};
      if (bulkOperation === 'update-category') {
        data = { category: bulkCategory };
      } else if (bulkOperation === 'add-tags') {
        data = { tags: bulkTags };
      }
      
      await fetch('/api/documents/enhanced/bulk-operation', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          operation: bulkOperation,
          documentIds,
          data
        })
      });
      
      setOperationProgress(100);
      onOperationComplete();
    } catch (error) {
      console.error('Bulk operation failed:', error);
      alert('Bulk operation failed');
    } finally {
      setIsProcessing(false);
      setActiveOperation(null);
    }
  };

  const handleArchiveDocuments = async () => {
    setIsProcessing(true);
    setActiveOperation('archive');
    setOperationProgress(0);
    
    try {
      const documentIds = selectedDocuments.map(d => d.id);
      
      // Step 1: Create archive package
      setOperationProgress(20);
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Step 2: Compress if enabled
      if (archiveSettings.compressFiles) {
        setOperationProgress(40);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      // Step 3: Encrypt if enabled
      if (archiveSettings.encryptArchive) {
        setOperationProgress(60);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      // Step 4: Archive documents
      await fetch('/api/documents/enhanced/bulk-operation', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          operation: 'archive',
          documentIds,
          data: archiveSettings
        })
      });
      
      setOperationProgress(80);
      
      // Step 5: Notify owners if enabled
      if (archiveSettings.notifyOwners) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      setOperationProgress(100);
      setArchiveDialogOpen(false);
      onOperationComplete();
    } catch (error) {
      console.error('Archive operation failed:', error);
      alert('Archive operation failed');
    } finally {
      setIsProcessing(false);
      setActiveOperation(null);
    }
  };

  const addEmailRecipient = () => {
    setEmailRecipients([...emailRecipients, { email: '' }]);
  };

  const updateEmailRecipient = (index: number, email: string) => {
    const updated = [...emailRecipients];
    updated[index] = { email };
    setEmailRecipients(updated);
  };

  const removeEmailRecipient = (index: number) => {
    setEmailRecipients(emailRecipients.filter((_, i) => i !== index));
  };

  return (
    <div className="space-y-6">
      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Document Actions</CardTitle>
          <CardDescription>
            Perform actions on {selectedDocuments.length} selected document{selectedDocuments.length !== 1 ? 's' : ''}
          </CardDescription>
        </CardHeader>
        <CardContent>
          {selectedDocuments.length === 0 ? (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                Select documents to perform actions
              </AlertDescription>
            </Alert>
          ) : (
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Button
                onClick={() => setEmailDialogOpen(true)}
                disabled={isProcessing}
                className="flex flex-col items-center justify-center h-24"
              >
                <Mail className="h-6 w-6 mb-2" />
                Email
              </Button>
              
              <Button
                onClick={() => setArchiveDialogOpen(true)}
                disabled={isProcessing}
                variant="outline"
                className="flex flex-col items-center justify-center h-24"
              >
                <Archive className="h-6 w-6 mb-2" />
                Archive
              </Button>
              
              <Button
                onClick={() => window.open('/api/documents/download-batch?ids=' + selectedDocuments.map(d => d.id).join(','))}
                disabled={isProcessing}
                variant="outline"
                className="flex flex-col items-center justify-center h-24"
              >
                <Download className="h-6 w-6 mb-2" />
                Download
              </Button>
              
              <Button
                onClick={() => handleBulkOperation()}
                disabled={isProcessing}
                variant="outline"
                className="flex flex-col items-center justify-center h-24"
              >
                <Package className="h-6 w-6 mb-2" />
                Bulk Edit
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Bulk Operations */}
      <Card>
        <CardHeader>
          <CardTitle>Bulk Operations</CardTitle>
          <CardDescription>
            Apply changes to multiple documents at once
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label>Operation</Label>
            <Select value={bulkOperation} onValueChange={setBulkOperation}>
              <SelectTrigger>
                <SelectValue placeholder="Select operation" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="update-category">Update Category</SelectItem>
                <SelectItem value="add-tags">Add Tags</SelectItem>
                <SelectItem value="archive">Archive</SelectItem>
                <SelectItem value="delete">Delete</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          {bulkOperation === 'update-category' && (
            <div>
              <Label>New Category</Label>
              <Select value={bulkCategory} onValueChange={setBulkCategory}>
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="CONTRACT">Contract</SelectItem>
                  <SelectItem value="PLANNING">Planning</SelectItem>
                  <SelectItem value="LEGAL">Legal</SelectItem>
                  <SelectItem value="FINANCIAL">Financial</SelectItem>
                  <SelectItem value="TECHNICAL">Technical</SelectItem>
                </SelectContent>
              </Select>
            </div>
          )}
          
          {bulkOperation === 'add-tags' && (
            <div>
              <Label>Tags (comma separated)</Label>
              <Input
                placeholder="important, review, 2024"
                onChange={(e) => setBulkTags(e.target.value.split(',').map(t => t.trim()))}
              />
            </div>
          )}
          
          <Button
            onClick={handleBulkOperation}
            disabled={!bulkOperation || isProcessing || selectedDocuments.length === 0}
            className="w-full"
          >
            {isProcessing && activeOperation === bulkOperation ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Processing...
              </>
            ) : (
              'Apply Operation'
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Integration Status */}
      <Card>
        <CardHeader>
          <CardTitle>Integration Status</CardTitle>
          <CardDescription>
            Connected services and storage
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <Database className="h-5 w-5 text-blue-600" />
                <span>AWS S3 Storage</span>
              </div>
              <Badge variant="outline" className="text-green-600">
                <CheckCircle className="h-3 w-3 mr-1" />
                Connected
              </Badge>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <Shield className="h-5 w-5 text-purple-600" />
                <span>Virus Scanning</span>
              </div>
              <Badge variant="outline" className="text-green-600">
                <CheckCircle className="h-3 w-3 mr-1" />
                Active
              </Badge>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <Mail className="h-5 w-5 text-gray-600" />
                <span>Email Service</span>
              </div>
              <Badge variant="outline" className="text-green-600">
                <CheckCircle className="h-3 w-3 mr-1" />
                Configured
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Email Dialog */}
      <Dialog open={emailDialogOpen} onOpenChange={setEmailDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Email Documents</DialogTitle>
            <DialogDescription>
              Send {selectedDocuments.length} document{selectedDocuments.length !== 1 ? 's' : ''} via email
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label>Recipients</Label>
              <div className="space-y-2">
                {emailRecipients.map((recipient, index) => (
                  <div key={index} className="flex space-x-2">
                    <Input
                      type="email"
                      placeholder="email@example.com"
                      value={recipient.email}
                      onChange={(e) => updateEmailRecipient(index, e.target.value)}
                    />
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => removeEmailRecipient(index)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={addEmailRecipient}
                >
                  Add Recipient
                </Button>
              </div>
            </div>
            
            <div>
              <Label>Subject</Label>
              <Input
                placeholder="Document(s) for your review"
                value={emailSubject}
                onChange={(e) => setEmailSubject(e.target.value)}
              />
            </div>
            
            <div>
              <Label>Message</Label>
              <Textarea
                placeholder="Please find the attached documents..."
                value={emailMessage}
                onChange={(e) => setEmailMessage(e.target.value)}
                rows={4}
              />
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setEmailDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleEmailDocuments} disabled={isProcessing}>
              {isProcessing && activeOperation === 'email' ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Sending...
                </>
              ) : (
                <>
                  <Send className="mr-2 h-4 w-4" />
                  Send Email
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Archive Dialog */}
      <Dialog open={archiveDialogOpen} onOpenChange={setArchiveDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Archive Documents</DialogTitle>
            <DialogDescription>
              Configure archive settings for {selectedDocuments.length} document{selectedDocuments.length !== 1 ? 's' : ''}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label>Retention Period</Label>
              <Select 
                value={archiveSettings.retentionPeriod.toString()} 
                onValueChange={(value) => setArchiveSettings({
                  ...archiveSettings,
                  retentionPeriod: parseInt(value)
                })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="90">3 months</SelectItem>
                  <SelectItem value="180">6 months</SelectItem>
                  <SelectItem value="365">1 year</SelectItem>
                  <SelectItem value="730">2 years</SelectItem>
                  <SelectItem value="1825">5 years</SelectItem>
                  <SelectItem value="3650">10 years</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="compress"
                  checked={archiveSettings.compressFiles}
                  onCheckedChange={(checked) => setArchiveSettings({
                    ...archiveSettings,
                    compressFiles: checked as boolean
                  })}
                />
                <Label htmlFor="compress">Compress files to save storage</Label>
              </div>
              
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="encrypt"
                  checked={archiveSettings.encryptArchive}
                  onCheckedChange={(checked) => setArchiveSettings({
                    ...archiveSettings,
                    encryptArchive: checked as boolean
                  })}
                />
                <Label htmlFor="encrypt">Encrypt archive for security</Label>
              </div>
              
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="notify"
                  checked={archiveSettings.notifyOwners}
                  onCheckedChange={(checked) => setArchiveSettings({
                    ...archiveSettings,
                    notifyOwners: checked as boolean
                  })}
                />
                <Label htmlFor="notify">Notify document owners</Label>
              </div>
            </div>
            
            {isProcessing && activeOperation === 'archive' && (
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Archiving documents...</span>
                  <span>{Math.round(operationProgress)}%</span>
                </div>
                <Progress value={operationProgress} />
              </div>
            )}
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setArchiveDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleArchiveDocuments} disabled={isProcessing}>
              {isProcessing && activeOperation === 'archive' ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Archiving...
                </>
              ) : (
                <>
                  <FileArchive className="mr-2 h-4 w-4" />
                  Archive Documents
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default DocumentIntegrations;