'use client';

import { buyerJourneyAnalytics } from '@/lib/analytics/buyer-journey-analytics';
import { analytics } from '@/lib/analytics';
import { useEffect, useCallback } from 'react';
import { useAuth } from '@/context/AuthContext';
import { usePathname } from 'next/navigation';
import type { BuyerPhase } from '@/types/buyer-journey';

/**
 * Hook that provides buyer journey analytics tracking
 * It handles both buyer journey specific events and general analytics
 */
export function useBuyerJourneyAnalytics() {
  const { user } = useAuth();
  const pathname = usePathname();

  // Identify user when component mounts
  useEffect(() => {
    if (user?.id) {
      buyerJourneyAnalytics.identify(user.id, {
        email: user.email,
        name: user.name,
        role: user.role
      });
      
      analytics.setUserId(user.id);
    }
  }, [user]);

  // Track page view when pathname changes
  useEffect(() => {
    if (pathname) {
      // Check if path is buyer journey related
      if (pathname.includes('/buyer/journey')) {
        const phase = getPhaseFromPath(pathname);
        
        if (phase) {
          buyerJourneyAnalytics.trackEvent('journey_step_viewed', {
            step_name: phase,
            path: pathname
          });
        }
      }
      
      // Track general page view
      analytics.trackPageView(pathname);
    }
  }, [pathname]);

  // Helper to get phase from path
  const getPhaseFromPath = (path: string): BuyerPhase | null => {
    if (path.includes('/planning')) return 'PLANNING';
    if (path.includes('/financing')) return 'FINANCING';
    if (path.includes('/property-search')) return 'PROPERTY_SEARCH';
    if (path.includes('/reservation')) return 'RESERVATION';
    if (path.includes('/legal-process')) return 'LEGAL_PROCESS';
    if (path.includes('/construction')) return 'CONSTRUCTION';
    if (path.includes('/completion')) return 'COMPLETION';
    if (path.includes('/post-purchase')) return 'POST_PURCHASE';
    return null;
  };

  // Track phase transition
  const trackPhaseTransition = useCallback((
    fromPhase: BuyerPhase, 
    toPhase: BuyerPhase,
    journeyId: string
  ) => {
    buyerJourneyAnalytics.trackEvent('journey_step_completed', {
      previous_phase: fromPhase,
      new_phase: toPhase,
      journey_id: journeyId
    });
  }, []);

  // Track unit interaction
  const trackUnitInteraction = useCallback((
    action: 'viewed' | 'selected' | 'reserved',
    unitId: string,
    unitData: {
      type: string;
      price: number;
      developmentId: string;
    }
  ) => {
    const eventName = `unit_${action}` as const;
    
    buyerJourneyAnalytics.trackEvent(eventName, {
      unit_id: unitId,
      unit_type: unitData.type,
      price: unitData.price,
      development_id: unitData.developmentId
    });
  }, []);

  // Track document upload
  const trackDocumentUpload = useCallback((
    documentType: string,
    fileSize: number,
    mimeType: string
  ) => {
    buyerJourneyAnalytics.trackEvent('kyc_document_uploaded', {
      document_type: documentType,
      file_size: fileSize,
      mime_type: mimeType
    });
  }, []);

  // Track payment
  const trackPayment = useCallback((
    transactionId: string,
    amount: number,
    paymentMethod: string,
    status: 'started' | 'completed' | 'failed'
  ) => {
    const eventName = `payment_${status}` as const;
    
    buyerJourneyAnalytics.trackEvent(eventName, {
      transaction_id: transactionId,
      amount,
      payment_method: paymentMethod
    });
  }, []);

  // Track verification
  const trackVerification = useCallback((
    action: 'started' | 'completed',
    verificationId: string,
    verificationMethod: string
  ) => {
    const eventName = `kyc_${action === 'started' ? 'started' : 'verification_completed'}` as const;
    
    buyerJourneyAnalytics.trackEvent(eventName, {
      verification_id: verificationId,
      verification_method: verificationMethod
    });
  }, []);

  // Track error
  const trackError = useCallback((
    errorType: string,
    errorMessage: string,
    additionalData?: Record<string, any>
  ) => {
    buyerJourneyAnalytics.trackError(errorType, errorMessage, additionalData);
  }, []);

  // Return all tracking methods
  return {
    trackPhaseTransition,
    trackUnitInteraction,
    trackDocumentUpload,
    trackPayment,
    trackVerification,
    trackError,
    // Expose the original API for direct access
    trackEvent: buyerJourneyAnalytics.trackEvent.bind(buyerJourneyAnalytics),
    startStepTimer: buyerJourneyAnalytics.startStepTimer.bind(buyerJourneyAnalytics),
    trackStepCompleted: buyerJourneyAnalytics.trackStepCompleted.bind(buyerJourneyAnalytics)
  };
}

export default useBuyerJourneyAnalytics;