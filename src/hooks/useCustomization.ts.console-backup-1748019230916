import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';

interface CustomizationOption {
  optionId: string;
  variantId?: string;
  quantity?: number;
}

interface CustomizationData {
  propertyId: string;
  selectedOptions: Record<string, CustomizationOption>;
  totalCost: number;
  name?: string;
  notes?: string;
}

// Cache keys
const CUSTOMIZATION_KEY = 'customization';
const PRICE_CALCULATION_KEY = 'price-calculation';

// Cache time settings
const CACHE_TIME = 5 * 60 * 1000; // 5 minutes
const STALE_TIME = 2 * 60 * 1000; // 2 minutes

export function useCustomization(propertyId: string) {
  const queryClient = useQueryClient();

  // Fetch saved customization
  const { data: savedCustomization, isLoading, error } = useQuery({
    queryKey: [CUSTOMIZATION_KEY, propertyId],
    queryFn: async () => {
      const response = await fetch(`/api/customization?propertyId=${propertyId}`);
      if (!response.ok) {
        if (response.status === 404) return null;
        throw new Error('Failed to fetch customization');
      }
      return response.json();
    },
    staleTime: STALE_TIME,
    cacheTime: CACHE_TIME,
    refetchOnWindowFocus: false});

  // Save customization mutation
  const saveMutation = useMutation({
    mutationFn: async (data: CustomizationData) => {
      const response = await fetch('/api/customization', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)});
      if (!response.ok) throw new Error('Failed to save customization');
      return response.json();
    },
    onSuccess: (data) => {
      // Update cache
      queryClient.setQueryData([CUSTOMIZATION_KEY, propertyId], data);
      // Invalidate related queries
      queryClient.invalidateQueries({ queryKey: ['customizations'] });
    }});

  // Calculate price mutation with caching
  const calculatePriceMutation = useMutation({
    mutationFn: async (options: CustomizationOption[]) => {
      const response = await fetch('/api/customization/calculate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ propertyId, options })});
      if (!response.ok) throw new Error('Failed to calculate price');
      return response.json();
    },
    onSuccess: (data, variables) => {
      // Cache the calculation result
      const cacheKey = [PRICE_CALCULATION_KEY, propertyId, JSON.stringify(variables)];
      queryClient.setQueryData(cacheKey, data);
    }});

  // Get cached price calculation
  const getCachedPrice = useCallback((options: CustomizationOption[]) => {
    const cacheKey = [PRICE_CALCULATION_KEY, propertyId, JSON.stringify(options)];
    return queryClient.getQueryData(cacheKey);
  }, [propertyId, queryClient]);

  // Optimistic update for saving
  const saveWithOptimisticUpdate = useCallback(async (data: CustomizationData) => {
    // Optimistically update the UI
    queryClient.setQueryData([CUSTOMIZATION_KEY, propertyId], (old: any) => ({
      ...old,
      ...data,
      updatedAt: new Date().toISOString()}));

    try {
      await saveMutation.mutateAsync(data);
    } catch (error) {
      // Revert on error
      queryClient.invalidateQueries({ queryKey: [CUSTOMIZATION_KEY, propertyId] });
      throw error;
    }
  }, [propertyId, queryClient, saveMutation]);

  // Prefetch related data
  const prefetchRelatedData = useCallback(async () => {
    // Prefetch property options
    await queryClient.prefetchQuery({
      queryKey: ['customization-options', propertyId],
      queryFn: async () => {
        const response = await fetch(`/api/customization/options?propertyId=${propertyId}`);
        if (!response.ok) throw new Error('Failed to fetch options');
        return response.json();
      },
      staleTime: STALE_TIME});
  }, [propertyId, queryClient]);

  return {
    savedCustomization,
    isLoading,
    error,
    save: saveWithOptimisticUpdate,
    calculatePrice: calculatePriceMutation.mutate,
    getCachedPrice,
    prefetchRelatedData,
    isSaving: saveMutation.isLoading,
    isCalculating: calculatePriceMutation.isLoading};
}

// Hook for managing customization options with local storage
export function useCustomizationOptions(propertyId: string) {
  const storageKey = `customization-${propertyId}`;

  // Load from local storage
  const loadFromStorage = useCallback(() => {
    try {
      const stored = localStorage.getItem(storageKey);
      return stored ? JSON.parse(stored) : {};
    } catch {
      return {};
    }
  }, [storageKey]);

  // Save to local storage
  const saveToStorage = useCallback((options: Record<string, CustomizationOption>) => {
    try {
      localStorage.setItem(storageKey, JSON.stringify(options));
    } catch (error) {
      console.error('Failed to save to local storage:', error);
    }
  }, [storageKey]);

  // Clear local storage
  const clearStorage = useCallback(() => {
    try {
      localStorage.removeItem(storageKey);
    } catch (error) {
      console.error('Failed to clear local storage:', error);
    }
  }, [storageKey]);

  return {
    loadFromStorage,
    saveToStorage,
    clearStorage};
}

// Hook for 3D model caching
export function useModelCache() {
  const queryClient = useQueryClient();

  const cacheModel = useCallback((url: string, model: any) => {
    queryClient.setQueryData(['3d-model', url], model, {
      cacheTime: 30 * 60 * 1000, // 30 minutes
    });
  }, [queryClient]);

  const getCachedModel = useCallback((url: string) => {
    return queryClient.getQueryData(['3d-model', url]);
  }, [queryClient]);

  const preloadModel = useCallback(async (url: string) => {
    await queryClient.prefetchQuery({
      queryKey: ['3d-model', url],
      queryFn: async () => {
        // This would be handled by the Three.js loader
        // Just returning a placeholder for the cache
        return { url, preloaded: true };
      },
      staleTime: Infinity});
  }, [queryClient]);

  return {
    cacheModel,
    getCachedModel,
    preloadModel};
}