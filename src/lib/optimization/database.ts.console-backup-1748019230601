import { PrismaClient } from '@prisma/client';
import { config } from '@/config/env';
import { logError, logInfo } from '@/lib/monitoring/logger';

// Connection pool configuration
const poolConfig = {
  min: config.database.pool.min,
  max: config.database.pool.max,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 5000,
  maxUses: 7500};

// Create Prisma client with optimizations
export const prisma = new PrismaClient({
  datasources: {
    db: {
      url: config.database.url}},
  log: config.isDevelopment
    ? ['query', 'info', 'warn', 'error']
    : ['error'],
  errorFormat: config.isDevelopment ? 'pretty' : 'minimal'});

// Connection pool monitoring
let connectionCount = 0;
let activeQueries = 0;

// Middleware for query logging and monitoring
prisma.$use(async (params, next) => {
  const before = Date.now();
  activeQueries++;
  
  try {
    const result = await next(params);
    const after = Date.now();
    
    // Log slow queries
    const duration = after - before;
    if (duration > 1000) {
      logInfo('Slow database query detected', {
        model: params.model,
        action: params.action,
        duration: `${duration}ms`});
    }
    
    return result;
  } catch (error) {
    logError('Database query error', error as Error, {
      model: params.model,
      action: params.action});
    throw error;
  } finally {
    activeQueries--;
  }
});

// Query optimization utilities
export const dbOptimizations = {
  /**
   * Batch multiple queries into a transaction
   */
  async batchQueries<T>(queries: Array<() => Promise<T>>): Promise<T[]> {
    return prisma.$transaction(queries.map(q => q()));
  },

  /**
   * Use connection pooling for read replicas
   */
  async readFromReplica<T>(query: () => Promise<T>): Promise<T> {
    // In production, this would route to read replicas
    // For now, using the same connection
    return query();
  },

  /**
   * Optimize pagination queries
   */
  async paginateOptimized<T>(
    model: any,
    {
      page = 1,
      limit = 20,
      where = {},
      orderBy = {},
      include = {}}: {
      page?: number;
      limit?: number;
      where?: any;
      orderBy?: any;
      include?: any;
    }
  ) {
    const skip = (page - 1) * limit;

    // Parallel execution for count and data
    const [totalCount, data] = await Promise.all([
      model.count({ where }),
      model.findMany({
        where,
        orderBy,
        include,
        skip,
        take: limit})]);

    return {
      data,
      pagination: {
        total: totalCount,
        page,
        limit,
        pages: Math.ceil(totalCount / limit)}};
  },

  /**
   * Bulk insert with chunking
   */
  async bulkInsert<T>(
    model: any,
    data: T[],
    chunkSize = 1000
  ): Promise<void> {
    for (let i = 0; i < data.length; i += chunkSize) {
      const chunk = data.slice(i, i + chunkSize);
      await model.createMany({ data: chunk });
    }
  },

  /**
   * Connection pool status
   */
  getPoolStatus() {
    return {
      totalConnections: connectionCount,
      activeQueries,
      poolConfig};
  }};

// Prepared statements for common queries
export const preparedQueries = {
  getUserById: (id: string) =>
    prisma.user.findUnique({
      where: { id },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        createdAt: true}}),

  getPropertyWithDetails: (id: string) =>
    prisma.property.findUnique({
      where: { id },
      include: {
        development: {
          select: {
            id: true,
            name: true,
            developer: true}},
        units: {
          select: {
            id: true,
            unitNumber: true,
            status: true,
            price: true}}}}),

  getActiveTransactions: (userId: string) =>
    prisma.transaction.findMany({
      where: {
        userId,
        status: {
          in: ['PENDING', 'IN_PROGRESS']}},
      orderBy: {
        createdAt: 'desc'},
      include: {
        property: true,
        payments: true}})};

// Index optimization helpers
export const indexOptimization = {
  /**
   * Analyze query performance
   */
  async analyzeQuery(sql: string) {
    const result = await prisma.$queryRawUnsafe(`EXPLAIN ANALYZE ${sql}`);
    return result;
  },

  /**
   * Get missing indexes suggestion
   */
  async getMissingIndexes() {
    // This would analyze slow queries and suggest indexes
    // Implementation depends on database type
    return [];
  },

  /**
   * Vacuum and analyze tables
   */
  async optimizeTables() {
    if (config.isProduction) {
      // Run VACUUM and ANALYZE on PostgreSQL
      await prisma.$executeRawUnsafe('VACUUM ANALYZE');
    }
  }};

// Connection lifecycle management
export async function initializeDatabase() {
  try {
    await prisma.$connect();
    connectionCount++;
    logInfo('Database connected', { pool: poolConfig });
  } catch (error) {
    logError('Database connection failed', error as Error);
    throw error;
  }
}

export async function disconnectDatabase() {
  try {
    await prisma.$disconnect();
    connectionCount--;
    logInfo('Database disconnected');
  } catch (error) {
    logError('Database disconnect error', error as Error);
  }
}

// Graceful shutdown
process.on('beforeExit', async () => {
  await disconnectDatabase();
});

// Export optimized Prisma client
export default prisma;