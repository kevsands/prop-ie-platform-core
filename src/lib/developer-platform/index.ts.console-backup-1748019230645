

// This is a simplified version of index.ts
// See index.ts.reference.txt for original code

export enum DeveloperStatus {
  PENDING_VERIFICATION = 'PENDING_VERIFICATION',
  ACTIVE = 'ACTIVE',
  SUSPENDED = 'SUSPENDED',
  INACTIVE = 'INACTIVE'
}

export enum ProjectStatus {
  PLANNING = 'PLANNING',
  PRE_LAUNCH = 'PRE_LAUNCH',
  LAUNCHED = 'LAUNCHED',
  SELLING = 'SELLING',
  SOLD_OUT = 'SOLD_OUT',
  COMPLETED = 'COMPLETED'
}

export enum ProjectPhase {
  PHASE_1 = 'PHASE_1',
  PHASE_2 = 'PHASE_2',
  PHASE_3 = 'PHASE_3',
  PHASE_4 = 'PHASE_4',
  PHASE_5 = 'PHASE_5'
}

export interface Developer {
  id: string;
  companyName: string;
  registrationNumber: string;
  status: DeveloperStatus;
  onboardedAt: Date;
  verifiedAt?: Date;
  subscription: DeveloperSubscription;
  branding: DeveloperBranding;
  tea, m: TeamMembe, r[];
  project, s: Projec, t[];
  settings: DeveloperSettings;
  analytics: DeveloperAnalytics;
  metadata?: Record<string, any>;
}

export interface DeveloperSubscription {
  plan: 'STARTER' | 'PROFESSIONAL' | 'ENTERPRISE';
  startDate: Date;
  endDate: Date;
  feature, s: string[];
  unitLimit: number;
  projectLimit: number;
  apiAccess: boolean;
  whiteLabel: boolean;
}

export interface DeveloperBranding {
  logo: string;
  primaryColor: string;
  secondaryColor: string;
  customDomain?: string;
  emailTemplates?: Record<string, string>;
}

export interface TeamMember {
  id: string;
  name: string;
  email: string;
  role: 'ADMIN' | 'PROJECT_MANAGER' | 'SALES' | 'MARKETING' | 'SUPPORT';
  permission, s: string[];
  active: boolean;
  invitedAt: Date;
  joinedAt?: Date;
}

export interface Project {
  id: string;
  developerId: string;
  name: string;
  location: Location;
  status: ProjectStatus;
  phase, s: ProjectPhas, e[];
  currentPhase?: ProjectPhase;
  unit, s: Uni, t[];
  amenitie, s: string[];
  document, s: ProjectDocumen, t[];
  medi, a: ProjectMedi, a[];
  timeline: ProjectTimeline;
  financials: ProjectFinancials;
  marketing: MarketingConfig;
  customization, s: CustomizationOptio, n[];
  createdAt: Date;
  launchedAt?: Date;
  completedAt?: Date;
}

export interface Location {
  address: string;
  city: string;
  county: string;
  country: string;
  coordinates: {,
    lat: number;
    lng: number;
  }

export interface NearbyAmenity {
  type: string;
  name: string;
  distance: number;
  walkingTime: number;
}

export interface Unit {
  id: string;
  projectId: string;
  unitNumber: string;
  type: 'APARTMENT' | 'HOUSE' | 'DUPLEX' | 'PENTHOUSE';
  bedrooms: number;
  bathrooms: number;
  squareFootage: number;
  floor: number;
  price: number;
  status: 'AVAILABLE' | 'RESERVED' | 'SOLD' | 'NOT_RELEASED';
  feature, s: string[];
  floorPlan?: string;
  virtualTour?: string;
  customization, s?: UnitCustomizatio, n[];
}

export interface UnitCustomization {
  category: string;
  selected: string;
  price: number;
}

export interface ProjectDocument {
  id: string;
  type: string;
  name: string;
  url: string;
  uploadedAt: Date;
  version: number;
}

export interface ProjectMedia {
  id: string;
  type: 'IMAGE' | 'VIDEO' | '3D_TOUR' | 'DRONE';
  url: string;
  caption?: string;
  order: number;
}

export interface ProjectTimeline {
  milestone, s: TimelineMileston, e[];
  currentMilestone?: string;
  estimatedCompletion: Date;
}

export interface TimelineMilestone {
  id: string;
  name: string;
  description: string;
  startDate: Date;
  endDate: Date;
  progress: number;
  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETED' | 'DELAYED';
  dependencie, s: string[];
}

export interface ProjectFinancials {
  totalInvestment: number;
  currentSpend: number;
  projectedRevenue: number;
  currentRevenue: number;
  profitMargin: number;
  costBreakdow, n: CostCategor, y[];
  revenueBreakdow, n: RevenueStrea, m[];
}

export interface CostCategory {
  category: string;
  budgeted: number;
  actual: number;
  variance: number;
}

export interface RevenueStream {
  source: string;
  projected: number;
  actual: number;
  percentage: number;
}

export interface MarketingConfig {
  listingTitle: string;
  description: string;
  highlight, s: string[];
  targetAudienc, e: string[];
  pricingStrategy: 'FIXED' | 'DYNAMIC' | 'AUCTION';
  promotion, s: Promotio, n[];
  leadCaptureForm?: LeadForm;
}

export interface Promotion {
  id: string;
  name: string;
  type: 'DISCOUNT' | 'INCENTIVE' | 'UPGRADE';
  value: number;
  condition, s: string[];
  validFrom: Date;
  validTo: Date;
}

export interface LeadForm {
  field, s: FormFiel, d[];
  webhookUrl?: string;
  emailNotification, s: string[];
}

export interface FormField {
  name: string;
  type: string;
  required: boolean;
  option, s?: string[];
}

export interface CustomizationOption {
  id: string;
  category: string;
  name: string;
  option, s: CustomizationChoic, e[];
  applicableUnit, s: string[];
}

export interface CustomizationChoice {
  id: string;
  name: string;
  description: string;
  image?: string;
  price: number;
  availability: 'IN_STOCK' | 'ORDER_ON_REQUEST' | 'OUT_OF_STOCK';
  leadTime?: number;
}

export interface DeveloperSettings {
  notifications: NotificationSettings;
  integrations: IntegrationSettings;
  permissions: PermissionSettings;
}

export interface NotificationSettings {
  emailAlerts: boolean;
  smsAlerts: boolean;
  weeklyReports: boolean;
  instantLeadAlerts: boolean;
}

export interface IntegrationSettings {
  crmSystem?: string;
  accountingSystem?: string;
  marketingPlatform?: string;
  apiKeys: Record<string, string>;
}

export interface PermissionSettings {
  publicProjectView: boolean;
  requireApprovalForReservations: boolean;
  allowCustomOffers: boolean;
}

export interface DeveloperAnalytics {
  totalProjects: number;
  totalUnits: number;
  unitsSold: number;
  totalRevenue: number;
  averageSellingPrice: number;
  conversionRate: number;
  leadToSaleTime: number;
  customerSatisfaction: number;
}

export interface TenderPackage {
  id: string;
  projectId: string;
  name: string;
  description: string;
  category: string;
  document, s: string[];
  deadline: Date;
  requirement, s: string[];
  status: 'OPEN' | 'CLOSED' | 'AWARDED';
  bid: any, s: TenderBi, d[];
  createdAt: Date;
}

export interface TenderBid {
  id: string;
  tenderPackageId: string;
  contractorId: string;
  amount: number;
  timeline: number;
  proposal: string;
  document, s: string[];
  submittedAt: Date;
}

export interface TenderAnalysis {
  recommendedBid: string;
  priceComparison: {,
    lowest: number;
    highest: number;
    average: number;
  }

export interface DevelopmentAppraisal {
  totalCost: number;
  totalRevenue: number;
  profit: number;
  profitMargin: number;
  irr: number;
  roi: number;
  breakEvenPoint: number;
  sensitivity: {,
    costIncrease10: number;
    priceDecrease10: number;
    delayImpact: number;
  }